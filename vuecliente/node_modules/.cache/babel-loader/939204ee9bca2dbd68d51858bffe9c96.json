{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue","mtime":1643654906495},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Canvases.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"canvases\">\n    <canvas\n      id=\"canvasTodosVinculos\"\n      ref=\"canvasTodosVinculos\"\n      :style=\"[offsetCanvasTodosVinculos]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasVinculosSeleccionado\"\n      ref=\"canvasVinculosSeleccionado\"\n      :style=\"[offsetCanvasVinculosSeleccionado]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasPosiciones\"\n      ref=\"canvasPosiciones\"\n      :style=\"[estiloPosicionRelativaCanvas, sizeCanvasTodosVinculos]\"\n      class=\"canvas\"\n      v-show=\"callingPosiciones\"\n    >\n\n    </canvas>\n  </div>\n</template>\n\n<script>\nvar debounce =require(\"debounce\");\n\n\nexport default {\n  name: \"Canvases\",\n  data() {\n    return {\n      montado: false,\n\n      lapiz: null,\n      posicionCanvasTodosVinculos: {\n        top: 0,\n        left: 0,\n      },      \n      posicionCanvasActivo: {\n        x: 0,\n        y: 0,\n      },\n    };\n  },\n  props: {\n    nodoSeleccionado: {\n      type: Object,\n      default() {\n        return {\n          id: \"-1\",\n          vinculos: [],\n        };\n      },\n    },\n    idsNecesariosParaTarget:Array,\n    nodoRelevante: [Object],\n    idNodoTarget: String,\n    todosNodos: Array,\n    centroVista: Object,\n    actualizar: Number,\n\n    callingPosiciones:Boolean,\n    factorZoom:Number,\n  },\n  methods: {\n    crearImagenPosiciones(){\n      \n      this.lapiz=this.$refs.canvasPosiciones.getContext(\"2d\")\n      var nodosRelevantes = this.todosNodos;\n\n      if(this.nodoSeleccionado && this.nodoSeleccionado.id.length>4) nodosRelevantes=[this.nodoSeleccionado];\n      if (nodosRelevantes <= 1) return;\n\n      this.lapiz.canvas.width=parseInt(this.sizeCanvasTodosVinculos.width);\n      this.lapiz.canvas.height=parseInt(this.sizeCanvasTodosVinculos.height);\n      \n      this.lapiz.clearRect(\n        0,\n        0,\n        this.lapiz.canvas.width,\n        this.lapiz.canvas.height\n      );\n\n      this.lapiz.lineWidth=2;\n      this.lapiz.beginPath();\n\n      nodosRelevantes.forEach(nodo=>{\n        this.lapiz.beginPath();\n        this.lapiz.strokeStyle = nodo.stuck?'red':\"#9761d2\";\n\n        this.lapiz.moveTo(nodo.coords.x -this.posicionCanvasActivo.x, nodo.coords.y-this.posicionCanvasActivo.y);\n        this.lapiz.lineTo(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y);\n        this.lapiz.arc(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y, 10, 0, Math.PI*2);\n        this.lapiz.stroke();     \n     })\n\n     this.lapiz.beginPath();    \n     nodosRelevantes.forEach(nodo=>{\n       if(!nodo.stuck){\n        this.lapiz.strokeStyle = 'blue';\n        let nodox=nodo.coords.x -this.posicionCanvasActivo.x;\n        let nodoy=nodo.coords.y-this.posicionCanvasActivo.y\n        this.lapiz.moveTo(nodox, nodoy);\n        \n        let vectorx=(Math.cos(nodo.angulo)*100);\n        let vectory=(Math.sin(nodo.angulo)*100);\n        \n        this.lapiz.lineTo(nodox+vectorx, nodoy+vectory);\n       }\n       \n     })\n     this.lapiz.stroke();\n\n    },\n    crearImagenTodosVinculos: function () {\n      var nodosRelevantes=this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return \n\n      var lapiz = this.$refs.canvasTodosVinculos.getContext(\"2d\");\n                        \n      lapiz.canvas.width = this.esquinasCanvasTodosVinculos.x2 - this.esquinasCanvasTodosVinculos.x1;\n      lapiz.canvas.height = this.esquinasCanvasTodosVinculos.y2 - this.esquinasCanvasTodosVinculos.y1;\n\n      const posicionCanvas={\n        x: this.esquinasCanvasTodosVinculos.x1,\n        y: this.esquinasCanvasTodosVinculos.y1,\n      }\n      lapiz.lineWidth = 1;\n      lapiz.clearRect(0, 0, lapiz.canvas.width, lapiz.canvas.height);\n      lapiz.beginPath();\n      lapiz.strokeStyle = \"#b3b3b3\";\n      for (let nodo of nodosRelevantes) {\n        for (let vinculo of nodo.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) continue;\n          if (vinculo.rol == \"source\") {\n            this.dibujarLineaEntreNodos(\n              nodo,\n              nodosRelevantes.find((nodo) => nodo.id == vinculo.idRef),\n              lapiz,\n              posicionCanvas\n            );\n          }\n        }\n      }\n      lapiz.stroke();\n    },\n    crearImagenVinculosSeleccionado: function () {\n\n      var nodosRelevantes = this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes <= 1) return;\n\n      var lapiz = this.$refs.canvasVinculosSeleccionado.getContext(\"2d\");\n\n      lapiz.canvas.width = this.esquinasCanvasVinculosSeleccionado.x2 - this.esquinasCanvasVinculosSeleccionado.x1;\n      lapiz.canvas.height = this.esquinasCanvasVinculosSeleccionado.y2 - this.esquinasCanvasVinculosSeleccionado.y1; \n\n      const posicionCanvas={\n        x: this.esquinasCanvasVinculosSeleccionado.x1,\n        y: this.esquinasCanvasVinculosSeleccionado.y1,\n      }\n\n      lapiz.clearRect(\n        0,\n        0,\n        lapiz.canvas.width,\n        lapiz.canvas.height\n      );\n\n      \n\n      if (nodosRelevantes.some((n) => n.id == this.nodoSeleccionado.id)) {\n        //Lineas verdes de posiblidades\n        lapiz.beginPath();\n        lapiz.lineWidth = 2;\n        lapiz.strokeStyle = \"#008000\";\n\n        //Lineas verdes de salida\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"source\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(this.nodoSeleccionado, otroNodo, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n        //Lineas rojas de dependencias\n\n        lapiz.beginPath();\n        lapiz.strokeStyle = \"#b80e0e\";\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"target\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(otroNodo, this.nodoSeleccionado, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n      }\n    },\n    dibujarLineaEntreNodos(nodoFrom, nodoTo, lapiz, posicion) {\n      \n      var anguloVinculo = Math.atan(\n        (nodoTo.coords.y - nodoFrom.coords.y) / (nodoTo.coords.x - nodoFrom.coords.x)\n      );\n\n      if (nodoTo.coords.y - nodoFrom.coords.y < 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n      if (nodoTo.coords.y - nodoFrom.coords.y > 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n\n      const zonaNodo={\n        x: 25*Math.cos(anguloVinculo),\n        y: 25*Math.sin(anguloVinculo)\n      }\n      \n      let inicio = {\n        x: ((nodoFrom.coords.x+zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoFrom.coords.y+zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n      let final = {\n        x: ((nodoTo.coords.x-zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoTo.coords.y-zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n\n      \n\n      lapiz.moveTo(inicio.x, inicio.y);\n      lapiz.lineTo(final.x, final.y);\n      //ahora la flechita\n      const centro = {\n        x: (final.x + inicio.x) / 2,\n        y: (final.y + inicio.y) / 2,\n      };\n      const longitudAla = parseInt(7*this.factorZoom);\n            \n\n      \n      //anguloVinculo=anguloVinculo*180/Math.PI;\n\n      const puntaAlaIzquierda = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo - (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo - (3 * Math.PI) / 4),\n      };\n      const puntaAlaDerecha = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo + (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo + (3 * Math.PI) / 4),\n      };\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaIzquierda.x, puntaAlaIzquierda.y);\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaDerecha.x, puntaAlaDerecha.y);\n    },\n    trazarVinculosDeNodoRecursivamente(\n      idNodo,\n      rol,\n      nivelesRestantes,\n      blacklist\n    ) {\n      nivelesRestantes--;\n      let esteNodo = this.todosNodos.find((n) => n.id == idNodo);\n\n      for (let vinculo of esteNodo.vinculos) {\n        if (vinculo.rol != rol) continue;\n        let nodoRef = this.todosNodos.find((n) => n.id == vinculo.idRef);\n        if (!nodoRef) {\n          console.log(`ALERTA. idRef del vinculo no estaba entre los nodos`);\n          continue;\n        }\n        blacklist.push(nodoRef.id);\n        if (rol == \"target\") {\n          this.dibujarLineaEntreNodos(nodoRef, esteNodo);\n          blacklist.push(nodoRef.id);\n        } else if (rol == \"source\") {\n          this.dibujarLineaEntreNodos(esteNodo, nodoRef);\n        }\n        if (\n          nivelesRestantes > 0 &&\n          !blacklist.some((idN) => idN == nodoRef.id)\n        ) {\n          blacklist = this.trazarVinculosDeNodoRecursivamente(\n            nodoRef.id,\n            rol,\n            nivelesRestantes,\n            blacklist\n          );\n        }\n      }\n      return blacklist;\n    },\n    debTrazarVinculos:debounce(function(){\n      this.crearImagenTodosVinculos();\n    }, 1000)\n  },\n  computed: {\n    esquinasCanvasTodosVinculos(){\n      var nodosRelevantes=this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasTodosVinculos(){\n      return {\n        left:  this.esquinasCanvasTodosVinculos.x1 + \"px\",\n        top: this.esquinasCanvasTodosVinculos.y1 + \"px\",\n\n        width: (this.esquinasCanvasTodosVinculos.x2-this.esquinasCanvasTodosVinculos.x1) + \"px\",\n        height: (this.esquinasCanvasTodosVinculos.y2-this.esquinasCanvasTodosVinculos.y1) + \"px\",\n      }\n    },\n    esquinasCanvasVinculosSeleccionado(){\n      var nodosRelevantes=this.todosNodos.filter(n=>n.id==this.nodoSeleccionado.id || n.vinculos.some(v=>v.idRef==this.nodoSeleccionado.id));\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = nodosRelevantes.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasVinculosSeleccionado(){\n      return {\n        left:  this.esquinasCanvasVinculosSeleccionado.x1 + \"px\",\n        top: this.esquinasCanvasVinculosSeleccionado.y1 + \"px\",\n\n        width: (this.esquinasCanvasVinculosSeleccionado.x2-this.esquinasCanvasVinculosSeleccionado.x1) + \"px\",\n        height: (this.esquinasCanvasVinculosSeleccionado.y2-this.esquinasCanvasVinculosSeleccionado.y1) + \"px\",\n      }\n    },\n    sizeCanvasTodosVinculos(){\n      var nodosRelevantes = this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        width:\"0px\",\n        height:\"0px\",\n      };\n\n      let bordesCanvasTodosVinculos = {};\n\n      bordesCanvasTodosVinculos.top = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y > acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y < acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x < acc ? n.coordsManuales.x : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x > acc ? n.coordsManuales.x : acc;\n      }, 0);\n\n      let anchoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.right - bordesCanvasTodosVinculos.left\n      );\n      let altoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.top - bordesCanvasTodosVinculos.bot\n      );\n\n      if (anchoDiagrama > 5000 || altoDiagrama > 5000) {\n        console.log(`ALERTA. Diagrama demasiado grande`);\n      }\n\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"y\",\n        bordesCanvasTodosVinculos.bot\n      );\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"x\",\n        bordesCanvasTodosVinculos.left\n      );\n\n      return {\n        width: anchoDiagrama+\"px\",\n        height: altoDiagrama+\"px\"\n      }\n      // this.$set(this.sizeCanvasTodosVinculos, \"width\", anchoDiagrama + \"px\");\n      // this.$set(this.sizeCanvasTodosVinculos, \"height\", altoDiagrama + \"px\");\n      \n      \n    },\n    estiloPosicionRelativaCanvas() {\n      let top = this.posicionCanvasTodosVinculos.y - this.centroVista.y;\n      let left = this.posicionCanvasTodosVinculos.x - this.centroVista.x;\n      return {\n        top: top + \"px\",\n        left: left + \"px\",\n      };\n    },\n  },\n  watch: {\n    todosNodos: function () {\n      if (this.todosNodos.length < 1) return;\n      this.crearImagenTodosVinculos();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n      this.crearImagenVinculosSeleccionado();\n    },\n    nodoSeleccionado: function () {\n      if(!this.callingPosiciones)this.crearImagenVinculosSeleccionado();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n\n    },\n    idNodoTarget() {\n      console.log(`Trazando todos vínculos teniendo en cuenta el target`);\n      this.crearImagenTodosVinculos();\n    },\n    factorZoom(){\n      this.debTrazarVinculos();\n    }\n  },\n  mounted() {\n    this.montado = true;\n    this.crearImagenTodosVinculos();\n    this.crearImagenPosiciones();\n    this.crearImagenVinculosSeleccionado();\n  },\n};\n</script>\n\n<style scoped>\n.canvas {\n  position: absolute;\n}\n\n#canvasTodosVinculos {\n  z-index: 0;\n}\n</style>"],"sourceRoot":"src/components/atlasConocimiento"}]}