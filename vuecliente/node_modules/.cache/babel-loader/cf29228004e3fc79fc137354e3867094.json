{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/AtlasConocimiento.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/AtlasConocimiento.vue","mtime":1644587546118},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AtlasConocimiento.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"atlasConocimiento\"\n    @mousedown.left.exact.stop=\"panningVista = true\"\n    @mouseenter=\"hovered = true\"\n    @mouseleave=\"hovered = false\"\n    @click=\"\n      idNodoMenuCx = '-1';\n      cerrarBusqueda++;\n    \"\n    @mousemove=\"panVista($event)\"\n    @mouseup.left=\"clickFondoAtlas\"\n    @touchmove.prevent.stop=\"movimientoMobile\"\n    @touchstart=\"iniciaMovimientoTouch\"\n    @touchend=\"finTouch\"\n    @contextmenu.self.exact.prevent=\"abrirMenuContextual\"\n  >\n    <transition name=\"fadeOut\">\n      <div v-show=\"showingZoomInfo\" id=\"infoZoom\">x{{ factorZoom }}</div>\n    </transition>\n    <div\n      id=\"menuContextual\"\n      :style=\"[offsetMenuContextual]\"\n      v-show=\"mostrandoMenuContextual\"\n    >\n      <div\n        class=\"botonMenuContextual\"\n        id=\"botonCrearNuevoNodo\"\n        @click=\"crearNodoEnMenuContextual\"\n      >\n        Crear Nodo de conocimiento\n      </div>\n    </div>\n    <div\n      id=\"botonCallingPosiciones\"\n      v-if=\"usuarioSuperadministrador && usuario.username == 'juanMamian'\"\n      @click.stop=\"iniciarCallingPosiciones\"\n      :class=\"{ deshabilitado: callingPosiciones }\"\n      :style=\"[\n        { backgroundColor: callingPosiciones ? 'green' : 'transparent' },\n      ]\"\n    ></div>\n    <buscador-nodos-conocimiento\n      @nodoSeleccionado=\"centrarEnNodo\"\n      ref=\"buscadorNodos\"\n      :cerrarBusqueda=\"cerrarBusqueda\"\n    />\n\n    <panel-conjuntos-nodos\n      ref=\"panelConjuntosNodos\"\n      :yo=\"yo\"\n      :todosNodos=\"todosNodos\"\n      :idNodoTarget=\"idNodoTarget\"\n      @targetSeleccionado=\"setNodoTargetCache\"\n      @centrarEnNodo=\"centrarEnNodo(todosNodos.find((n) => n.id == $event))\"\n    />\n    <panel-configuracion-atlas ref=\"panelConfiguracionAtlas\" :yo=\"yo\" />\n    <canvases\n      :todosNodos=\"todosNodos\"\n      :nodoSeleccionado=\"nodoSeleccionado\"\n      :idNodoTarget=\"idNodoTarget\"\n      :idsNecesariosParaTarget=\"idsNecesariosParaTarget\"\n      :centroVista=\"centroVista\"\n      :callingPosiciones=\"callingPosiciones\"\n      :factorZoom=\"factorZoom\"\n      :style=\"[offsetContenedorNodos]\"\n      ref=\"canvases\"\n      v-if=\"todosNodos.length > 1\"\n    />\n    <div id=\"contenedorNodos\" :style=\"[offsetContenedorNodos]\">\n      <nodo-conocimiento\n        :nodoSeleccionado=\"nodoSeleccionado\"\n        :todosNodos=\"todosNodos\"\n        :idNodoMenuCx=\"idNodoMenuCx\"\n        :usuarioAdministradorAtlas=\"usuarioAdministradorAtlas\"\n        :yo=\"yo\"\n        :key=\"nodo.id\"\n        v-for=\"nodo of todosNodos\"\n        :esteNodo=\"nodo\"\n        :centroVista=\"centroVista\"\n        :esNodoObjetivo=\"idsNodosObjetivos.includes(nodo.id)\"\n        :esTarget=\"idNodoTarget == nodo.id\"\n        :idsNodosAprendidos=\"idsNodosAprendidos\"\n        :factorZoom=\"factorZoom\"\n        :escondido=\"\n          idNodoTarget &&\n          !idsNecesariosParaTarget.includes(nodo.id) &&\n          idNodoTarget != nodo.id\n        \"\n        :configuracionAtlas=\"configuracionAtlas\"\n        :callingPosiciones=\"callingPosiciones\"\n        @click.right.native.exact.stop.prevent=\"idNodoMenuCx = nodo.id\"\n        @click.native.stop=\"seleccionNodo(nodo)\"\n        @creacionVinculo=\"crearVinculo\"\n        @eliminacionVinculo=\"eliminarVinculo\"\n        @cambioDePosicionManual=\"cambiarCoordsManualesNodo\"\n        @eliminar=\"eliminarNodo\"\n        @cambieEstadoObjetivo=\"setEstadoObjetivoNodoCache($event, nodo.id)\"\n        @tengoNuevoValorAprendido=\"setNodoAprendidoCache($event, nodo.id)\"\n      />\n    </div>\n\n    <loading\n      id=\"simboloDescargandoNodos\"\n      v-show=\"!nodosDescargados\"\n      texto=\"descargando nodos de conocimiento\"\n    />\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport NodoConocimiento from \"./atlasConocimiento/NodoConocimiento.vue\";\nimport Canvases from \"./atlasConocimiento/Canvases.vue\";\nimport BuscadorNodosConocimiento from \"./atlasConocimiento/BuscadorNodosConocimiento.vue\";\nimport Loading from \"./utilidades/Loading.vue\";\nimport PanelConjuntosNodos from \"./atlasConocimiento/PanelConjuntosNodos.vue\";\nimport PanelConfiguracionAtlas from \"./atlasConocimiento/PanelConfiguracionAtlas.vue\";\nconst debounce = require(\"debounce\");\n\nconst fragmentoNodoConocimiento = gql`\n  fragment fragNodoConocimiento on NodoConocimiento {\n    id\n    nombre\n    descripcion\n    expertos\n    clases {\n      id\n      nombre\n      idExperto\n      interesados\n    }\n    coordsManuales {\n      x\n      y\n    }\n    coords {\n      x\n      y\n    }\n    autoCoords {\n      x\n      y\n    }\n    centroMasa {\n      x\n      y\n    }\n    stuck\n    angulo\n    puntaje\n    vinculos {\n      idRef\n      rol\n      tipo\n    }\n    fuerzaCentroMasa {\n      fuerza\n      direccion\n    }\n    fuerzaColision {\n      fuerza\n      direccion\n    }\n  }\n`;\n\nconst QUERY_NODOS = gql`\n  query {\n    todosNodos {\n      ...fragNodoConocimiento\n    }\n  }\n  ${fragmentoNodoConocimiento}\n`;\n\nconst QUERY_DATOS_USUARIO_NODOS = gql`\n  query {\n    yo {\n      id\n      atlas {\n        datosNodos {\n          idNodo\n          objetivo\n          aprendido\n        }\n        configuracion {\n          modo\n        }\n        idNodoTarget\n        colecciones {\n          id\n          nombre\n          idsNodos\n          nodos {\n            id\n            nombre\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default {\n  components: {\n    NodoConocimiento,\n    Canvases,\n    BuscadorNodosConocimiento,\n    Loading,\n    PanelConjuntosNodos,\n    PanelConfiguracionAtlas,\n  },\n  name: \"AtlasConocimiento\",\n  apollo: {\n    todosNodos: {\n      query: QUERY_NODOS,\n      result: function () {\n        this.dibujarVinculosGrises();\n      },\n      pollInterval() {\n        return this.callingPosiciones ? 5000 : null;\n      },\n      update({ todosNodos }) {\n        this.nodosDescargados = true;\n        var nuevoTodosNodos = JSON.parse(JSON.stringify(todosNodos));\n        nuevoTodosNodos.forEach((nodo) => {\n          nodo.coordsManuales = nodo.autoCoords;\n          nodo.coords = nodo.autoCoords;\n        });\n        return nuevoTodosNodos;\n      },\n      fetchPolicy: \"cache-and-network\",\n    },\n    yo: {\n      query: QUERY_DATOS_USUARIO_NODOS,\n      skip() {\n        return !this.usuarioLogeado || this.todosNodos.length < 1;\n      },\n    },\n    configuracionAtlas: {\n      query: gql`\n        query ($nombreAtlas: String!) {\n          configuracionAtlas(nombreAtlas: $nombreAtlas) {\n            id\n            posicionando\n          }\n        }\n      `,\n      variables: {\n        nombreAtlas: \"conocimiento\",\n      },\n      fetchPolicy: \"network-only\",\n    },\n  },\n  data() {\n    return {\n      configuracionAtlas: {\n        posicionando: false,\n      },\n      hovered: false,\n      todosNodos: [],\n      nodosDescargados: false,\n      idNodoSeleccionado: \"-1\",\n      idNodoMenuCx: \"-1\",\n      idsNecesariosParaTarget: [],\n\n      yo: {\n        atlas: {\n          datosNodos: [],\n          configuracion: {\n            modo: \"estudiante\",\n          },\n        },\n      },\n\n      centroVistaDecimal: {\n        x: 218,\n        y: 39,\n      },\n      showingZoomInfo: false,\n      zoom: 80,\n      minZoom: 20,\n      maxZoom: 200,\n      pinching: false,\n      lastPinchDistance: 0,\n      actualizarTrazos: 0,\n      panningVista: false,\n      vistaPanned: false,\n      nodosConectadosAlSeleccionado: {\n        listaCompleta: [],\n        listaPorNiveles: [],\n      },\n      profundidadNodosConectadosAlSeleccionado: 1,\n      actualizarVinculosGrises: 0,\n\n      ultimoTouchX: 0,\n      ultimoTouchY: 0,\n\n      cerrarBusqueda: 0,\n\n      callingPosiciones: false,\n\n      mostrandoMenuContextual: false,\n      offsetMenuContextual: {\n        top: \"0px\",\n        left: \"0px\",\n      },\n      enviandoQueryConfiguracionAtlas: false,\n    };\n  },\n  computed: {\n    idsNodosObjetivos() {\n      if (!this.yo || !this.yo.atlas || !this.yo.atlas.datosNodos) {\n        return [];\n      }\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.objetivo == true)\n        .map((n) => n.idNodo);\n    },\n    nodosObjetivo() {\n      if (!this.todosNodos) return [];\n      return this.todosNodos.filter((n) =>\n        this.idsNodosObjetivos.includes(n.id)\n      );\n    },\n    nodoSeleccionado: function () {\n      if (!this.todosNodos) {\n        console.log(`NO HAY NODOS`);\n        return false;\n      }\n      if (this.todosNodos.some((n) => n.id == this.idNodoSeleccionado)) {\n        let indexSeleccionado = this.todosNodos.findIndex(\n          (n) => n.id == this.idNodoSeleccionado\n        );\n        return this.todosNodos[indexSeleccionado];\n      }\n      return {\n        id: \"-1\",\n        vinculos: [],\n      };\n    },\n    idUsuario: function () {\n      return this.$store.state.usuario.id;\n    },\n    usuarioAdministradorAtlas: function () {\n      if (!this.$store.state.usuario.permisos) return false;\n      return this.$store.state.usuario.permisos.includes(\"atlasAdministrador\")\n        ? true\n        : false;\n    },\n    idNodoTarget() {\n      if (!this.yo || !this.yo.atlas) return null;\n      return this.yo.atlas.idNodoTarget;\n    },\n    idsNodosAprendidos() {\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.aprendido == true)\n        .map((n) => n.idNodo);\n    },\n    centroVista() {\n      return {\n        x: Math.round(this.centroVistaDecimal.x),\n        y: Math.round(this.centroVistaDecimal.y),\n      };\n    },\n    factorZoom() {\n      return Number((this.zoom / 100).toFixed(2));\n    },\n    offsetContenedorNodos() {\n      return {\n        left: -(this.centroVista.x * this.factorZoom) + \"px\",\n        top: -(this.centroVista.y * this.factorZoom) + \"px\",\n      };\n    },\n  },\n  methods: {\n    iniciarCallingPosiciones() {\n      var ciclos = prompt(\"¿Cuantos ciclos?\");\n      if (isNaN(ciclos)) {\n        return;\n      }\n\n      ciclos = Math.round(ciclos);\n      if (ciclos < 1) {\n        return;\n      }\n      console.log(`Enviando reposicionamiento de ${ciclos} ciclos`);\n      this.callingPosiciones = true;\n\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($ciclos: Int!) {\n              posicionarNodosConocimientoByFuerzas(ciclos: $ciclos)\n            }\n          `,\n          variables: {\n            ciclos,\n          },\n        })\n        .then(() => {\n          this.callingPosiciones = false;\n        })\n        .catch((error) => {\n          this.callingPosiciones = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    togglePosicionamiento() {\n      this.enviandoQueryConfiguracionAtlas = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($nombreAtlas: String!) {\n              togglePosicionamientoAutomaticoAtlas(nombreAtlas: $nombreAtlas) {\n                id\n                posicionando\n              }\n            }\n          `,\n          variables: {\n            nombreAtlas: \"conocimiento\",\n          },\n        })\n        .then(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        })\n        .catch(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        });\n    },\n    abrirMenuContextual(e) {\n      let posCalendario = this.$el.getBoundingClientRect();\n\n      let topClick = Math.round(e.pageY - posCalendario.top);\n      let leftClick = Math.round(e.pageX - posCalendario.left);\n\n      this.$set(this.offsetMenuContextual, \"top\", topClick + \"px\");\n      this.$set(this.offsetMenuContextual, \"left\", leftClick + \"px\");\n      this.mostrandoMenuContextual = true;\n      //this.crearNodo({x: leftClick, y: topClick});\n    },\n    crearNodoEnMenuContextual() {\n      let posContenedor = document\n        .getElementById(\"contenedorNodos\")\n        .getBoundingClientRect();\n\n      console.log(`Offset menú cx: ${this.offsetMenuContextual.top}`);\n      console.log(`Offset menú cx: ${parseInt(this.offsetMenuContextual.top)}`);\n\n      var posicionNuevoNodo = {\n        x: parseInt(\n          (parseInt(this.offsetMenuContextual.left) - posContenedor.left) /\n            this.factorZoom\n        ),\n        y: parseInt(\n          (parseInt(this.offsetMenuContextual.top) - posContenedor.top) /\n            this.factorZoom\n        ),\n      };\n\n      console.log(`Creando nuevo nodo en ${JSON.stringify(posicionNuevoNodo)}`);\n\n      this.crearNodo(posicionNuevoNodo);\n    },\n    encontrarNodosNecesariosDeNodo(idNodo, listaTotal) {\n      const elNodo = this.todosNodos.find((n) => n.id == idNodo);\n      if (!elNodo) {\n        return listaTotal;\n      }\n      const necesarios = elNodo.vinculos\n        .filter((v) => v.rol == \"target\")\n        .map((v) => v.idRef);\n      necesarios.forEach((necesario) => {\n        if (!listaTotal.includes(necesario)) {\n          listaTotal.push(necesario);\n          listaTotal = this.encontrarNodosNecesariosDeNodo(\n            necesario,\n            listaTotal\n          );\n        }\n      });\n      return listaTotal;\n    },\n    clickFondoAtlas() {\n      console.log(`Click en el fondo del atlas`);\n      if (!this.vistaPanned) this.idNodoSeleccionado = \"-1\";\n      this.panningVista = false;\n      this.vistaPanned = false;\n      this.$refs.panelConjuntosNodos.abierto = false;\n      this.$refs.panelConfiguracionAtlas.abierto = false;\n      this.mostrandoMenuContextual = false;\n    },\n    setEstadoObjetivoNodoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado objetivo: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].objetivo = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: nuevoEstado,\n          aprendido: false,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoAprendidoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado aprendido: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].aprendido = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: false,\n          aprendido: nuevoEstado,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoTargetCache(idNodo) {\n      console.log(`Seting en cache al nodo ${idNodo} como target`);\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      nuevoCache.yo.atlas.idNodoTarget = idNodo;\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n\n    centrarEnNodo(n) {\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        n.coords.x - this.$el.offsetWidth / (2 * this.factorZoom)\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        n.coords.y - this.$el.offsetHeight / (2 * this.factorZoom)\n      );\n      this.seleccionNodo(n);\n      //this.centroVista=e;\n    },\n    iniciaMovimientoTouch(e) {\n      if (e.touches.length === 2) {\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        this.lastPinchDistance = dist;\n        this.pinching = true;\n        return;\n      }\n\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n    },\n    movimientoMobile(e) {\n      if (this.pinching) {\n        var contenedor = this.$el;\n        let posContenedor = contenedor.getBoundingClientRect();\n\n        const posZoom = {\n          x:\n            Math.round(posContenedor.width / 2 / this.factorZoom) +\n            this.centroVista.x,\n          y:\n            Math.round(posContenedor.height / 2 / this.factorZoom) +\n            this.centroVista.y,\n        };\n\n        const proporciones = {\n          x:\n            (posZoom.x - this.centroVistaDecimal.x) /\n            (posContenedor.width / this.factorZoom),\n          y:\n            (posZoom.y - this.centroVistaDecimal.y) /\n            (posContenedor.height / this.factorZoom),\n        };\n\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        var pinch = dist - this.lastPinchDistance;\n        pinch = pinch * 0.5;\n        this.zoomVista(pinch);\n        this.lastPinchDistance = dist;\n\n        this.$set(\n          this.centroVistaDecimal,\n          \"x\",\n          posZoom.x - (posContenedor.width / this.factorZoom) * proporciones.x\n        );\n        this.$set(\n          this.centroVistaDecimal,\n          \"y\",\n          posZoom.y - (posContenedor.height / this.factorZoom) * proporciones.y\n        );\n        return;\n      }\n\n      const deltaX = e.changedTouches[0].clientX - this.ultimoTouchX;\n      const deltaY = e.changedTouches[0].clientY - this.ultimoTouchY;\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n\n      this.desplazarVista(deltaX, deltaY);\n    },\n    finTouch() {\n      this.pinching = false;\n    },\n    cambiarCoordsManualesNodo(idNodo, coordsManuales) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      this.todosNodos[this.todosNodos.findIndex((n) => n.id == idNodo)].coords =\n        coordsManuales;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: String, $coordsManuales: CoordsInput) {\n              setCoordsManuales(\n                idNodo: $idNodo\n                coordsManuales: $coordsManuales\n              ) {\n                modificados {\n                  id\n                  coordsManuales {\n                    x\n                    y\n                  }\n                  coords {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodo,\n            coordsManuales,\n          },\n        })\n        .then(() => {\n          this.$refs.canvases.crearImagenTodosVinculos();\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n        });\n    },\n    eliminarNodo(idNodo) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      if (!confirm(\"¿Seguro de que quieres eliminar este nodo?\")) return;\n      console.log(`enviando mutacion de eliminar nodo`);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!) {\n              eliminarNodo(idNodo: $idNodo)\n            }\n          `,\n          variables: {\n            idNodo,\n          },\n          update(store, { data: { eliminarNodo } }) {\n            if (!eliminarNodo) {\n              console.log(`Nodo no fue eliminado`);\n              return;\n            }\n            const cache = store.readQuery({\n              query: QUERY_NODOS,\n            });\n            var nuevoCache = JSON.parse(JSON.stringify(cache));\n            const indexN = nuevoCache.todosNodos.findIndex(\n              (n) => n.id == idNodo\n            );\n            if (indexN > -1) {\n              nuevoCache.todosNodos.splice(indexN, 1);\n              store.writeQuery({\n                query: QUERY_NODOS,\n                data: nuevoCache,\n              });\n            } else {\n              console.log(`El nodo no estaba presente`);\n            }\n          },\n        })\n        .then((data) => {\n          console.log(`quitando el objeto del array. ${data}`);\n        });\n    },\n    crearNodo(posicion) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`Error usuario no autorizado`);\n        return;\n      }\n      console.log(`enviando una mutación de crear nodo`);\n\n      let infoNodo = {\n        coordsManuales: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        coords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        autoCoords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n      };\n      console.log(`en las coordenadas: ${posicion.x}, ${posicion.y} `);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoNodo: NodoConocimientoInput) {\n              crearNodo(infoNodo: $infoNodo) {\n                ...fragNodoConocimiento\n              }\n            }\n            ${fragmentoNodoConocimiento}\n          `,\n          variables: {\n            infoNodo,\n          },\n        })\n        .then(({ data: { crearNodo } }) => {\n          console.log(`Creado ${crearNodo.id}`);\n          const store = this.$apollo.provider.defaultClient;\n          const cache = store.readQuery({\n            query: QUERY_NODOS,\n          });\n          var nuevoCache = JSON.parse(JSON.stringify(cache));\n          var losNodos = nuevoCache.todosNodos;\n          const indexN = losNodos.findIndex((n) => n.id === crearNodo.id);\n          if (indexN > -1) {\n            console.log(`El nodo ya estaba en caché`);\n          } else {\n            losNodos.push(crearNodo);\n            store.writeQuery({\n              query: QUERY_NODOS,\n              data: nuevoCache,\n            });\n          }\n\n          //this.$router.push(\"/nodoConocimiento/\"+crearNodo.id);\n        })\n        .catch((error) => {\n          console.log(`Error. E: ${error}`);\n        });\n    },\n    descargarCentroVista() {\n      let dis = this;\n      this.$apollo\n        .query({\n          query: gql`\n            query {\n              yo {\n                id\n                atlas {\n                  centroVista {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idUsuario: this.$store.state.usuario.id,\n          },\n          fetchPolicy: \"network-only\",\n        })\n        .then(function ({ data: { yo } }) {\n          let coords = yo.atlas.centroVista;\n          dis.$set(dis.centroVista, \"x\", coords.x);\n          dis.$set(dis.centroVista, \"y\", coords.y);\n          dis.$store.commit(\"setCentroVistaAtlas\", coords);\n        })\n        .catch(function (error) {\n          console.log(`error fetching centro vista: ${error}`);\n        });\n    },\n    desplazarVista(deltaX, deltaY) {\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        Math.round(this.centroVistaDecimal.x - deltaX / this.factorZoom)\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        Math.round(this.centroVistaDecimal.y - deltaY / this.factorZoom)\n      );\n      this.actualizarTrazos++;\n    },\n    panVista(e) {\n      if (!this.panningVista) {\n        return;\n      }\n      this.desplazarVista(e.movementX, e.movementY);\n      e.preventDefault();\n      this.vistaPanned = true;\n\n      /*this.centroVista.x -= e.movementX;\n      this.centroVista.y -= e.movementY;\n      */\n    },\n    seleccionNodo(nodo) {\n      this.idNodoSeleccionado = nodo.id;\n      if (!this.todosNodos.some((n) => n.id == this.idNodoSeleccionado)) {\n        console.log(`No encontrado`);\n        return null;\n      }\n\n      let profundidad = parseInt(this.profundidadNodosConectadosAlSeleccionado);\n      let listaPorNiveles = [];\n      let idNodoSel = this.idNodoSeleccionado;\n      let listaCompleta = [idNodoSel];\n      if (profundidad > 0) {\n        for (let i = 0; i < profundidad; i++) {\n          listaPorNiveles[i] = [];\n        }\n        ({ listaCompleta, listaPorNiveles } =\n          this.encontrarNodosConectadosRecursivamente(\n            idNodoSel,\n            [\"target\", \"source\"],\n            [\"continuacion\"],\n            listaCompleta,\n            listaPorNiveles,\n            0,\n            profundidad\n          ));\n      }\n      this.nodosConectadosAlSeleccionado = {\n        listaCompleta,\n        listaPorNiveles,\n      };\n    },\n    async eliminarVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(\n        `eliminando un vinculo entre ${args.idNodoFrom} y ${args.idNodoTo} `\n      );\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodoFrom: ID!, $idNodoTo: ID!) {\n              eliminarVinculoFromTo(\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    tipo\n                    rol\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n    dibujarVinculosGrises() {\n      this.actualizarVinculosGrises++;\n    },\n    async crearVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(`creando un vinculo ${JSON.stringify(args)} `);\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($tipo: String!, $idNodoFrom: ID!, $idNodoTo: ID!) {\n              crearVinculo(\n                tipo: $tipo\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    rol\n                    tipo\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            tipo: \"continuacion\",\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n    encontrarNodosConectadosRecursivamente(\n      idNodo,\n      roles,\n      tipos,\n      listaCompleta,\n      listaPorNiveles,\n      nivel,\n      profundidad\n    ) {\n      // Rol debe ser un array que incluye los roles validos en esta búsqueda.\n      // Tipo deber ser un array que incluye todos los tipos válidos en esta búsqueda\n      let nodo = this.todosNodos.find((n) => n.id == idNodo);\n      for (let vinculo of nodo.vinculos) {\n        if (\n          this.todosNodos.some((n) => n.id == vinculo.idRef) &&\n          roles.some((r) => r == vinculo.rol) &&\n          tipos.some((t) => t == vinculo.tipo) &&\n          !listaCompleta.some((idN) => idN == vinculo.idRef)\n        ) {\n          listaPorNiveles[nivel].push(vinculo.idRef);\n          listaCompleta.push(vinculo.idRef);\n\n          if (nivel + 1 < profundidad) {\n            ({ listaCompleta, listaPorNiveles } =\n              this.encontrarNodosConectadosRecursivamente(\n                vinculo.idRef,\n                roles,\n                tipos,\n                listaCompleta,\n                listaPorNiveles,\n                nivel + 1,\n                profundidad\n              ));\n          }\n        } else {\n          console.log(`No`);\n        }\n      }\n      return { listaCompleta, listaPorNiveles };\n    },\n    zoomVista(deltaZoom) {\n      var nuevoZoom = this.zoom + deltaZoom;\n      if (nuevoZoom < this.minZoom) {\n        this.zoom = this.minZoom;\n      } else if (nuevoZoom > this.maxZoom) {\n        this.zoom = this.maxZoom;\n      } else {\n        this.zoom = nuevoZoom;\n      }\n\n      //Pan vista de acuerdo con la posición del mouse respecto del atlas\n    },\n    zoomWheel(e) {\n      if (!this.hovered || !e.ctrlKey) {\n        return;\n      }\n      e.preventDefault();\n\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const posZoom = {\n        x:\n          Math.round((e.clientX - posContenedor.left) / this.factorZoom) +\n          this.centroVista.x,\n        y:\n          Math.round((e.clientY - posContenedor.top) / this.factorZoom) +\n          this.centroVista.y,\n      };\n\n      const proporciones = {\n        x:\n          (posZoom.x - this.centroVistaDecimal.x) /\n          (posContenedor.width / this.factorZoom),\n        y:\n          (posZoom.y - this.centroVistaDecimal.y) /\n          (posContenedor.height / this.factorZoom),\n      };\n\n      const factorZoom = 0.2;\n      this.zoomVista(-Math.round(e.deltaY * factorZoom), {\n        x: posZoom.x,\n        y: posZoom.y,\n      });\n\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        posZoom.x - (posContenedor.width / this.factorZoom) * proporciones.x\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        posZoom.y - (posContenedor.height / this.factorZoom) * proporciones.y\n      );\n    },\n    hideZoomInfo: debounce(function () {\n      this.showingZoomInfo = false;\n    }, 1000),\n  },\n  watch: {\n    nodoSeleccionado: function () {\n      this.actualizarTrazos++;\n    },\n    route: function (to) {\n      console.log(`cambio de navegación a ${to.path}`);\n    },\n    idNodoTarget(idNodoTarget) {\n      if (!idNodoTarget) {\n        this.idsNecesariosParaTarget = [];\n        return;\n      }\n      console.log(`iniciando busqueda de requeridos de nodo ${idNodoTarget}`);\n      this.idsNecesariosParaTarget = this.encontrarNodosNecesariosDeNodo(\n        idNodoTarget,\n        []\n      );\n    },\n    zoom() {\n      this.showingZoomInfo = true;\n      this.hideZoomInfo();\n    },\n  },\n  mounted() {\n    // if (!this.usuario.atlas || !this.usuario.atlas.centroVista) {\n    //   console.log(`No había info de centro vista en la store. Descargando`);\n    //   this.descargarCentroVista();\n    //   return;\n    // }\n    // this.$set(this.centroVistaDecimal, \"x\", this.usuario.atlas.centroVista.x);\n    // this.$set(this.centroVistaDecimal, \"y\", this.usuario.atlas.centroVista.y);\n\n    if (screen.width < 600) {\n      this.zoom = 70;\n    }\n  },\n  created() {\n    window.addEventListener(\"wheel\", this.zoomWheel, { passive: false });\n  },\n  removed() {\n    window.removeEventListener(\"wheel\", this.zoomWheel);\n  },\n  // beforeRouteLeave(_, __, next) {\n  //   console.log(\n  //     `enviando nuevo centroVista para el usuario ${\n  //       this.usuario.id\n  //     }. Centro vista: ${JSON.stringify(this.centroVista)}`\n  //   );\n  //   this.$store.commit(\"setCentroVistaAtlas\", this.centroVista);\n\n  //   this.$apollo\n  //     .mutate({\n  //       mutation: gql`\n  //         mutation($idUsuario: ID, $centroVista: CoordsInput) {\n  //           setCentroVista(idUsuario: $idUsuario, centroVista: $centroVista)\n  //         }\n  //       `,\n  //       variables: {\n  //         idUsuario: this.$store.state.usuario.id,\n  //         centroVista: this.centroVista,\n  //       },\n  //     })\n  //     .then(function () {\n  //       next();\n  //     })\n  //     .catch(function (error) {\n  //       console.log(`error: ${error}`);\n  //       next();\n  //     });\n  // },\n};\n</script>\n\n<style scoped>\n.atlasConocimiento {\n  position: relative;\n  overflow: hidden;\n}\n#menuContextual {\n  position: absolute;\n  background-color: gray;\n  z-index: 100;\n}\n.botonMenuContextual {\n  font-size: 12px;\n  color: rgb(221, 221, 221);\n  cursor: pointer;\n  padding: 10px;\n}\n.botonMenuContextual:hover {\n  background-color: rgb(68, 68, 68);\n}\n\n#canvases {\n  position: absolute;\n  pointer-events: none;\n}\n#contenedorNodos {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n\n  pointer-events: none;\n}\n#buscadorNodosConocimiento {\n  position: absolute;\n  top: 1%;\n  left: 1%;\n  /* transform: translateX(-50%); */\n  z-index: 1;\n}\n#panelConjuntosNodos {\n  z-index: 100;\n}\n#panelConfiguracionAtlas {\n  z-index: 100;\n}\n#panelObjetivos {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.2;\n  z-index: 100;\n}\n#panelObjetivos:hover {\n  opacity: 1;\n}\n#infoZoom {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 10px;\n  display: inline-block;\n  font-weight: bold;\n  color: rgb(102, 102, 102);\n}\n#botonCallingPosiciones {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n  position: absolute;\n  top: 1%;\n  right: 1%;\n  cursor: pointer;\n}\n\n#simboloDescargandoNodos {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.fadeOut-leave-to {\n  opacity: 0;\n}\n.fadeOut-leave-active {\n  transition: opacity 1s;\n}\n.fadeOut-leave {\n  opacity: 1;\n}\n</style>"],"sourceRoot":"src/components"}]}