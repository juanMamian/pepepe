{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/AtlasConocimiento.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/AtlasConocimiento.vue","mtime":1650228128900},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AtlasConocimiento.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"atlasConocimiento\"\n    :style=\"{ overflowY: nodoAbierto ? 'scroll' : 'hidden' }\"\n    @mousedown.left.exact.stop=\"panningVista = true\"\n    @mouseenter=\"hovered = true\"\n    @mouseleave=\"hovered = false\"\n    @click=\"\n      idNodoMenuCx = null;\n      cerrarBusqueda++;\n    \"\n  >\n    <router-view\n      :yo=\"yo\"\n      :datosNodosRepasar=\"datosNodosRepasar\"\n      :datosNodosUrgentes=\"datosNodosUrgentes\"\n      @centrarEnNodo=\"centrarEnNodoById($event)\"\n    />\n    <transition name=\"fadeOut\">\n      <div v-show=\"showingZoomInfo\" id=\"infoZoom\">x{{ factorZoom }}</div>\n    </transition>\n    <div\n      id=\"menuContextual\"\n      :style=\"[offsetMenuContextual]\"\n      v-show=\"mostrandoMenuContextual\"\n    >\n      <div\n        class=\"botonMenuContextual\"\n        id=\"botonCrearNuevoNodo\"\n        :class=\"{ deshabilitado: posicionCreandoNodo }\"\n        v-if=\"usuarioAdministradorAtlas || usuarioProfe\"\n        @click=\"crearNodoEnMenuContextual\"\n      >\n        Crear Nodo de conocimiento\n      </div>\n    </div>\n\n    <div id=\"zonaNodoTarget\">\n      <div\n        class=\"boton\"\n        @click=\"\n          configurarNodoTarget(nodoSeleccionado ? nodoSeleccionado.id : null)\n        \"\n        v-show=\"!enviandoQueryTarget && (nodoSeleccionado || nodoTarget)\"\n        :title=\"\n          nodoSeleccionado\n            ? 'Rastrear ' + nodoSeleccionado.nombre\n            : yo.atlas.idNodoTarget\n            ? 'Dejar de rastrear'\n            : ''\n        \"\n        :class=\"{ deshabilitado: enviandoQueryTarget }\"\n      >\n        <img src=\"@/assets/iconos/target.png\" alt=\"Target\" />\n      </div>\n      <loading texto=\"\" v-show=\"enviandoQueryTarget\" />\n      <div\n        id=\"nombreNodoTarget\"\n        v-if=\"nodoTarget\"\n        @click=\"centrarEnNodo(nodoTarget)\"\n      >\n        {{ nodoTarget.nombre }}\n      </div>\n    </div>\n\n    <div\n      id=\"botonCallingPosiciones\"\n      v-if=\"usuarioSuperadministrador && usuario.username == 'juanMamian'\"\n      @click.stop=\"iniciarCallingPosiciones\"\n      :class=\"{ deshabilitado: callingPosiciones }\"\n      :style=\"[\n        { backgroundColor: callingPosiciones ? 'green' : 'transparent' },\n      ]\"\n    ></div>\n    <buscador-nodos-conocimiento\n      @nodoSeleccionado=\"centrarEnNodo\"\n      ref=\"buscadorNodos\"\n      :cerrarBusqueda=\"cerrarBusqueda\"\n    />\n\n    <panel-conjuntos-nodos\n      ref=\"panelConjuntosNodos\"\n      :yo=\"yo\"\n      :todosNodos=\"todosNodos\"\n      :modoAtlas=\"modoAtlas\"\n      @centrarEnNodo=\"centrarEnNodo(todosNodos.find((n) => n.id == $event))\"\n    />\n\n    <div\n      id=\"contenedorDiagrama\"\n      ref=\"contenedorDiagrama\"\n      @contextmenu.self.exact.prevent=\"abrirMenuContextual\"\n      @mouseup.left.self=\"clickFondoAtlas\"\n    >\n      <div id=\"contenedorVinculosNodos\" :style=\"[offsetContenedorNodos]\">\n        <enlaces-nodo-conocimiento\n          v-for=\"nodo of nodosConRequerimentos\"\n          :key=\"nodo.id\"\n          :yo=\"yo\"\n          :idNodoSeleccionado=\"idNodoSeleccionado\"\n          :esteNodo=\"nodo\"\n          :todosNodos=\"todosNodos\"\n          :factorZoom=\"factorZoom\"\n          :esquinasDiagrama=\"esquinasDiagrama\"\n          :nodoSeleccionado=\"nodoSeleccionado\"\n          :redibujarEnlaces=\"redibujarEnlacesNodos\"\n          :idsTodosNodosRender=\"idsTodosNodosRender\"\n          :callingPosiciones=\"callingPosiciones\"\n        />\n      </div>\n      <div\n        id=\"contenedorNodos\"\n        ref=\"contenedorNodos\"\n        :style=\"[offsetContenedorNodos]\"\n      >\n        <loading\n          texto=\"\"\n          v-show=\"posicionCreandoNodo\"\n          style=\"position: absolute\"\n          :style=\"[offsetLoadingCreandoNodo]\"\n        />\n        <nodo-conocimiento\n          :nodoSeleccionado=\"nodoSeleccionado\"\n          :todosNodos=\"todosNodos\"\n          :idNodoMenuCx=\"idNodoMenuCx\"\n          :usuarioAdministradorAtlas=\"usuarioAdministradorAtlas\"\n          :yo=\"yo\"\n          :modoAtlas=\"modoAtlas\"\n          :key=\"nodo.id\"\n          v-for=\"nodo of nodosRender\"\n          :esteNodo=\"nodo\"\n          :esquinasDiagrama=\"esquinasDiagrama\"\n          :centroVista=\"centroVista\"\n          :esNodoObjetivo=\"idsNodosObjetivos.includes(nodo.id)\"\n          :esTarget=\"idNodoTarget == nodo.id\"\n          :idsNodosAprendidos=\"idsNodosAprendidos\"\n          :idsNodosEstudiados=\"idsNodosEstudiados\"\n          :idsNodosFrescos=\"idsNodosFrescos\"\n          :idsNodosPresentesCabeza=\"idsNodosPresentesCabeza\"\n          :factorZoom=\"factorZoom\"\n          :seleccionado=\"idNodoSeleccionado === nodo.id\"\n          :escondido=\"\n            idNodoTarget &&\n            !idsNecesariosParaTarget.includes(nodo.id) &&\n            idNodoTarget != nodo.id\n          \"\n          :configuracionAtlas=\"configuracionAtlas\"\n          :callingPosiciones=\"callingPosiciones\"\n          @click.right.native.exact.stop.prevent=\"idNodoMenuCx = nodo.id\"\n          @click.native.stop=\"seleccionNodo(nodo)\"\n          @creacionVinculo=\"crearVinculo\"\n          @eliminacionVinculo=\"eliminarVinculo\"\n          @cambioDePosicionManual=\"cambiarCoordsManualesNodo\"\n          @eliminar=\"eliminarNodo\"\n          @cambieEstadoObjetivo=\"setEstadoObjetivoNodoCache($event, nodo.id)\"\n          @tengoNuevoValorAprendido=\"setNodoAprendidoCache($event, nodo.id)\"\n        />\n      </div>\n    </div>\n\n    <div id=\"barraInferior\">\n      <div\n        class=\"boton\"\n        title=\"Mostrar colecciones\"\n        @click=\"$refs.panelConjuntosNodos.abierto = true\"\n      >\n        <img src=\"@/assets/iconos/userNodes.png\" alt=\"Nodos de usuario\" />\n      </div>\n\n      <div\n        class=\"boton\"\n        :title=\"\n          'Cambiar a modo ' + modoAtlas === 'experto' ? 'estudiante' : 'experto'\n        \"\n        :class=\"{ deshabilitado: enviandoQueryModo }\"\n        @click=\"setModo(modoAtlas === 'estudiante' ? 'experto' : 'estudiante')\"\n      >\n        <img\n          src=\"@/assets/iconos/teacher.svg\"\n          v-if=\"modoAtlas === 'experto'\"\n          alt=\"Experto\"\n        />\n        <img\n          src=\"@/assets/iconos/estudiante.png\"\n          v-if=\"modoAtlas === 'estudiante'\"\n          alt=\"Estudiante\"\n        />\n      </div>\n\n      <div\n        class=\"boton\"\n        title=\"Mostrar temas para repasar\"\n        @click=\"$router.push({ name: 'ventanaRepasos' })\"\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            d=\"M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z\"\n            :fill=\"\n              datosNodosUrgentes.length > 0\n                ? 'var(--atlasConocimientoRepaso)'\n                : ''\n            \"\n          />\n        </svg>\n      </div>\n    </div>\n\n    <loading\n      id=\"simboloDescargandoNodos\"\n      v-show=\"!nodosDescargados\"\n      texto=\"descargando nodos de conocimiento\"\n    />\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport NodoConocimiento from \"./NodoConocimiento.vue\";\nimport BuscadorNodosConocimiento from \"./BuscadorNodosConocimiento.vue\";\nimport Loading from \"../utilidades/Loading.vue\";\nimport PanelConjuntosNodos from \"./PanelConjuntosNodos.vue\";\nimport EnlacesNodoConocimiento from \"./EnlacesNodoConocimiento.vue\";\nimport { fragmentoDatoNodoConocimiento } from \"./fragsAtlasConocimiento\";\nconst debounce = require(\"debounce\");\n\nconst fragmentoNodoConocimiento = gql`\n  fragment fragNodoConocimiento on NodoConocimiento {\n    id\n    nombre\n    descripcion\n    expertos\n    clases {\n      id\n      nombre\n      idExperto\n      interesados\n    }\n    coordsManuales {\n      x\n      y\n    }\n    coords {\n      x\n      y\n    }\n    autoCoords {\n      x\n      y\n    }\n    centroMasa {\n      x\n      y\n    }\n    stuck\n    angulo\n    puntaje\n    vinculos {\n      id\n      idRef\n      rol\n      tipo\n    }\n    fuerzaCentroMasa {\n      fuerza\n      direccion\n    }\n    fuerzaColision {\n      fuerza\n      direccion\n    }\n  }\n`;\n\nconst QUERY_NODOS = gql`\n  query todosNodos {\n    todosNodos {\n      ...fragNodoConocimiento\n    }\n  }\n  ${fragmentoNodoConocimiento}\n`;\n\nexport const QUERY_DATOS_USUARIO_NODOS = gql`\n  query {\n    yo {\n      id\n      atlas {\n        datosNodos {\n          ...fragDatoNodoConocimiento\n        }\n        configuracion {\n          modo\n        }\n        idNodoTarget\n        colecciones {\n          id\n          nombre\n          idsNodos\n          nodos {\n            id\n            nombre\n          }\n        }\n      }\n    }\n  }\n  ${fragmentoDatoNodoConocimiento}\n`;\n\nexport default {\n  components: {\n    NodoConocimiento,\n    BuscadorNodosConocimiento,\n    Loading,\n    PanelConjuntosNodos,\n    EnlacesNodoConocimiento,\n  },\n  name: \"AtlasConocimiento\",\n  apollo: {\n    todosNodos: {\n      query: QUERY_NODOS,\n      result: function () {\n        this.dibujarVinculosGrises();\n      },\n      pollInterval() {\n        return this.callingPosiciones ? 5000 : null;\n      },\n      update({ todosNodos }) {\n        this.nodosDescargados = true;\n        var nuevoTodosNodos = JSON.parse(JSON.stringify(todosNodos));\n        nuevoTodosNodos.forEach((nodo) => {\n          nodo.coordsManuales = nodo.autoCoords;\n          nodo.coords = nodo.autoCoords;\n        });\n        return nuevoTodosNodos;\n      },\n      fetchPolicy() {\n        if (process.env.NODE_ENV === \"production\") {\n          return \"cache-first\";\n        } else {\n          return \"cache-and-network\";\n        }\n      },\n    },\n    yo: {\n      query: QUERY_DATOS_USUARIO_NODOS,\n      skip() {\n        return !this.usuarioLogeado || this.todosNodos.length < 1;\n      },\n    },\n    configuracionAtlas: {\n      query: gql`\n        query ($nombreAtlas: String!) {\n          configuracionAtlas(nombreAtlas: $nombreAtlas) {\n            id\n            posicionando\n          }\n        }\n      `,\n      variables: {\n        nombreAtlas: \"conocimiento\",\n      },\n      fetchPolicy: \"network-only\",\n    },\n  },\n  data() {\n    return {\n      configuracionAtlas: {\n        posicionando: false,\n      },\n      hovered: false,\n      todosNodos: [],\n      nodosDescargados: false,\n      posicionCreandoNodo: null,\n      idNodoSeleccionado: null,\n      idNodoMenuCx: null,\n      idsNecesariosParaTarget: [],\n      enviandoQueryModo: false,\n      modoAtlas: \"estudiante\",\n      enviandoQueryTarget: false,\n\n      redibujarEnlacesNodos: 0,\n\n      yo: {\n        atlas: {\n          datosNodos: [],\n          configuracion: {\n            modo: \"estudiante\",\n          },\n        },\n      },\n\n      centroVistaDecimal: {\n        x: 218,\n        y: 39,\n      },\n      showingZoomInfo: false,\n      zoom: 80,\n      minZoom: 20,\n      maxZoom: 200,\n      pinching: false,\n      lastPinchDistance: 0,\n      actualizarTrazos: 0,\n      panningVista: false,\n      vistaPanned: false,\n\n      actualizarVinculosGrises: 0,\n\n      ultimoTouchX: 0,\n      ultimoTouchY: 0,\n\n      cerrarBusqueda: 0,\n\n      callingPosiciones: false,\n\n      mostrandoMenuContextual: false,\n      offsetMenuContextual: {\n        top: \"0px\",\n        left: \"0px\",\n      },\n      enviandoQueryConfiguracionAtlas: false,\n    };\n  },\n  computed: {\n    idsNodosObjetivos() {\n      if (!this.yo || !this.yo.atlas || !this.yo.atlas.datosNodos) {\n        return [];\n      }\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.objetivo == true)\n        .map((n) => n.idNodo);\n    },\n    nodosObjetivo() {\n      if (!this.todosNodos) return [];\n      return this.todosNodos.filter((n) =>\n        this.idsNodosObjetivos.includes(n.id)\n      );\n    },\n    nodoSeleccionado: function () {\n      if (!this.idNodoSeleccionado) {\n        return null;\n      }\n      return this.todosNodos.find((n) => n.id === this.idNodoSeleccionado);\n    },\n    idUsuario: function () {\n      return this.$store.state.usuario.id;\n    },\n    usuarioAdministradorAtlas: function () {\n      if (!this.$store.state.usuario.permisos) return false;\n      return this.$store.state.usuario.permisos.includes(\"atlasAdministrador\")\n        ? true\n        : false;\n    },\n    idNodoTarget() {\n      if (!this.yo || !this.yo.atlas) return null;\n      return this.yo.atlas.idNodoTarget;\n    },\n    nodoTarget() {\n      if (!this.idNodoTarget) return null;\n      return this.todosNodos.find((n) => n.id === this.idNodoTarget);\n    },\n    idsNodosAprendidos() {\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.aprendido == true)\n        .map((n) => n.idNodo);\n    },\n    datosNodosEstudiados() {\n      return this.yo.atlas.datosNodos.filter(\n        (n) => !n.aprendido && n.estudiado\n      );\n    },\n    idsNodosEstudiados() {\n      return this.datosNodosEstudiados.map((ne) => ne.idNodo);\n    },\n    datosNodosRepasar() {\n      if (!this.yo || !this.yo.atlas || !this.yo.atlas.datosNodos) {\n        return [];\n      }\n\n      return this.yo.atlas.datosNodos.filter(\n        (dn) =>\n          !dn.aprendido &&\n          dn.estudiado &&\n          dn.iteracionesRepaso &&\n          dn.iteracionesRepaso.length > 0\n      );\n    },\n    datosNodosUrgentes() {\n      return this.datosNodosRepasar.filter((dn) => {\n        const pasado =\n          new Date(dn.estudiado).getTime() + dn.iteracionesRepaso[0].intervalo <\n          Date.now();\n        return pasado;\n      });\n    },\n    datosNodosFrescos() {\n      return this.datosNodosEstudiados.filter((dn) => {\n        const dateEstudiado = new Date(dn.estudiado);\n        if (!dn.iteracionesRepaso || dn.iteracionesRepaso.length < 1) {\n          return true;\n        }\n        return (\n          Date.now() <\n          dateEstudiado.getTime() + dn.iteracionesRepaso[0].intervalo\n        );\n      });\n    },\n    idsNodosFrescos() {\n      return this.datosNodosFrescos.map((nf) => nf.idNodo);\n    },\n    idsNodosPresentesCabeza() {\n      return this.idsNodosFrescos\n        .filter((idNe) => !this.idsNodosAprendidos.includes(idNe))\n        .concat(this.idsNodosAprendidos);\n    },\n    centroVista() {\n      return {\n        x: Math.round(this.centroVistaDecimal.x),\n        y: Math.round(this.centroVistaDecimal.y),\n      };\n    },\n    factorZoom() {\n      return Number((this.zoom / 100).toFixed(2));\n    },\n    esquinasDiagrama() {\n      const maxX = this.todosNodos.reduce(\n        (acc, n) => (n.autoCoords.x > acc ? n.autoCoords.x : acc),\n        0\n      );\n      const maxY = this.todosNodos.reduce(\n        (acc, n) => (n.autoCoords.y > acc ? n.autoCoords.y : acc),\n        0\n      );\n      const minX = this.todosNodos.reduce(\n        (acc, n) => (n.autoCoords.x < acc ? n.autoCoords.x : acc),\n        0\n      );\n      const minY = this.todosNodos.reduce(\n        (acc, n) => (n.autoCoords.y < acc ? n.autoCoords.y : acc),\n        0\n      );\n\n      return {\n        x1: minX,\n        y1: minY,\n\n        x2: maxX,\n        y2: maxY,\n      };\n    },\n    offsetContenedorNodos() {\n      const ancho = this.esquinasDiagrama.x2 - this.esquinasDiagrama.x1;\n      const alto = this.esquinasDiagrama.y2 - this.esquinasDiagrama.y1;\n      return {\n        // left: -(this.centroVista.x * this.factorZoom) + \"px\",\n        // top: -(this.centroVista.y * this.factorZoom) + \"px\",\n\n        width: ancho * this.factorZoom + \"px\",\n        height: alto * this.factorZoom + \"px\",\n      };\n    },\n    nodosConRequerimentos() {\n      var nr = this.todosNodos.filter((n) => n.vinculos.length > 0);\n\n      return nr;\n    },\n    nodosRender() {\n      if (this.idNodoTarget) {\n        return this.todosNodos\n          .filter((n) => this.idsNecesariosParaTarget.includes(n.id))\n          .concat([this.todosNodos.find((n) => this.idNodoTarget === n.id)]);\n      }\n      return this.todosNodos;\n    },\n    idsTodosNodosRender() {\n      return this.nodosRender.map((n) => n.id);\n    },\n    offsetLoadingCreandoNodo() {\n      if (!this.posicionCreandoNodo) {\n        return null;\n      }\n      const left =\n        (this.posicionCreandoNodo.x - this.esquinasDiagrama.x1) *\n        this.factorZoom;\n      const top =\n        (this.posicionCreandoNodo.y - this.esquinasDiagrama.y1) *\n        this.factorZoom;\n      return {\n        left: left + \"px\",\n        top: top + \"px\",\n      };\n    },\n    nodoAbierto() {\n      console.log(\"Verificando path name\");\n      console.log(this.$route.name);\n\n      return this.$route.name === \"visorNodoConocimiento\";\n    },\n    nodosConectadosAlSeleccionado() {\n      if (!this.nodoSeleccionado) return [];\n      return this.todosNodos.filter((n) =>\n        this.nodoSeleccionado.vinculos.some((v) => v.idRef === n.id)\n      );\n    },\n  },\n  methods: {\n    iniciarCallingPosiciones() {\n      var ciclos = prompt(\"¿Cuantos ciclos?\");\n      if (isNaN(ciclos)) {\n        return;\n      }\n\n      ciclos = Math.round(ciclos);\n      if (ciclos < 1) {\n        return;\n      }\n      console.log(`Enviando reposicionamiento de ${ciclos} ciclos`);\n      this.callingPosiciones = true;\n\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($ciclos: Int!) {\n              posicionarNodosConocimientoByFuerzas(ciclos: $ciclos)\n            }\n          `,\n          variables: {\n            ciclos,\n          },\n        })\n        .then(() => {\n          this.callingPosiciones = false;\n        })\n        .catch((error) => {\n          this.callingPosiciones = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    togglePosicionamiento() {\n      this.enviandoQueryConfiguracionAtlas = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($nombreAtlas: String!) {\n              togglePosicionamientoAutomaticoAtlas(nombreAtlas: $nombreAtlas) {\n                id\n                posicionando\n              }\n            }\n          `,\n          variables: {\n            nombreAtlas: \"conocimiento\",\n          },\n        })\n        .then(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        })\n        .catch(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        });\n    },\n    abrirMenuContextual(e) {\n      let posDiagrama = this.$refs.contenedorDiagrama.getBoundingClientRect();\n\n      let topClick = Math.round(e.pageY - posDiagrama.top);\n      let leftClick = Math.round(e.pageX - posDiagrama.left);\n\n      this.$set(this.offsetMenuContextual, \"top\", topClick + \"px\");\n      this.$set(this.offsetMenuContextual, \"left\", leftClick + \"px\");\n      this.mostrandoMenuContextual = true;\n      //this.crearNodo({x: leftClick, y: topClick});\n    },\n    crearNodoEnMenuContextual() {\n      const posContenedorNodos =\n        this.$refs.contenedorNodos.getBoundingClientRect();\n      const distanciaLeftPx =\n        parseInt(this.offsetMenuContextual.left) -\n        parseInt(posContenedorNodos.left);\n      const distanciaTopPx =\n        parseInt(this.offsetMenuContextual.top) -\n        (parseInt(posContenedorNodos.top) - parseInt(this.$el.offsetTop));\n\n      const posPxX = distanciaLeftPx;\n      const posPxY = distanciaTopPx;\n\n      console.log(`xPix: ${parseInt(this.offsetMenuContextual.left)}`);\n      console.log(\n        `posXContenedorNodos: ${parseInt(posContenedorNodos.left)}, ${\n          posContenedorNodos.top\n        }`\n      );\n      console.log(`distanciaLeftPx: ${distanciaLeftPx}`);\n      console.log(`distanciaTopPx: ${distanciaTopPx}`);\n      console.log(\n        `Scroll x contenedorDiagrama: ${this.$refs.contenedorDiagrama.scrollLeft}`\n      );\n\n      var posicionNuevoNodo = {\n        x: parseInt(posPxX / this.factorZoom + this.esquinasDiagrama.x1),\n        y: parseInt(posPxY / this.factorZoom + this.esquinasDiagrama.y1),\n      };\n\n      console.log(`Creando nuevo nodo en ${JSON.stringify(posicionNuevoNodo)}`);\n\n      this.crearNodo(posicionNuevoNodo);\n    },\n    encontrarNodosNecesariosDeNodo(idNodo, listaTotal) {\n      const elNodo = this.todosNodos.find((n) => n.id == idNodo);\n      if (!elNodo) {\n        return listaTotal;\n      }\n      const necesarios = elNodo.vinculos\n        .filter((v) => v.rol == \"target\")\n        .map((v) => v.idRef);\n      necesarios.forEach((necesario) => {\n        if (!listaTotal.includes(necesario)) {\n          listaTotal.push(necesario);\n          listaTotal = this.encontrarNodosNecesariosDeNodo(\n            necesario,\n            listaTotal\n          );\n        }\n      });\n      return listaTotal;\n    },\n    clickFondoAtlas() {\n      // console.log(`Click en el fondo del atlas. Route name: ${this.$route.name}`);\n      if (this.$route.name != \"atlas\") {\n        this.$router.push({ name: \"atlas\" });\n        return;\n      }\n      if (!this.vistaPanned) this.idNodoSeleccionado = null;\n      this.panningVista = false;\n      this.vistaPanned = false;\n      this.$refs.panelConjuntosNodos.abierto = false;\n      this.mostrandoMenuContextual = false;\n    },\n    setEstadoObjetivoNodoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado objetivo: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].objetivo = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: nuevoEstado,\n          aprendido: false,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoAprendidoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado aprendido: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].aprendido = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: false,\n          aprendido: nuevoEstado,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoTargetCache(idNodo) {\n      console.log(`Seting en cache al nodo ${idNodo} como target`);\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      nuevoCache.yo.atlas.idNodoTarget = idNodo;\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setModo(modo) {\n      if (!this.usuarioLogeado) return;\n      this.modoAtlas = modo;\n      // this.enviandoQueryModo = true;\n\n      // this.$apollo\n      //   .mutate({\n      //     mutation: gql`\n      //       mutation ($idUsuario: ID!, $nuevoModo: String!) {\n      //         setModoUsuarioAtlas(idUsuario: $idUsuario, nuevoModo: $nuevoModo){\n      //             id\n      //             atlas{\n      //                 configuracion{\n      //                     modo\n      //                 }\n      //             }\n      //         }\n      //       }\n      //     `,\n      //     variables: {\n      //       idUsuario: this.usuario.id,\n      //       nuevoModo: modo,\n      //     },\n      //   })\n      //   .then(() => {\n      //     this.enviandoQueryModo = false;\n\n      //   })\n      //   .catch((error) => {\n      //     this.enviandoQueryModo = false;\n      //     console.log(`Error: ${error}`);\n      //   });\n    },\n    configurarNodoTarget(idNodo) {\n      this.enviandoQueryTarget = true;\n\n      console.log(`Configurando nodo target`);\n      if (!idNodo || idNodo === this.idNodoTarget) {\n        console.log(`Nulificando`);\n        setTimeout(()=>{\n        this.nulificarNodoTarget();\n\n        }, 100);\n      } else {\n        setTimeout(()=>{\n\n        this.setNodoTarget(idNodo);\n        }, 100);\n      }\n    },\n    setNodoTarget(idNodo) {\n      if (!idNodo) return;\n      if (this.idNodoTarget == idNodo) {\n        return;\n      }\n\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      nuevoCache.yo.atlas.idNodoTarget = idNodo;\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!) {\n              setNodoAtlasTarget(idNodo: $idNodo)\n            }\n          `,\n          variables: {\n            idNodo,\n          },\n        })\n        .then(() => {\n          this.enviandoQueryTarget = false;\n        })\n        .catch((error) => {\n          this.enviandoQueryTarget = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    nulificarNodoTarget() {\n      console.log(`Nulificando nodo target`);\n      this.enviandoQueryTarget = true;\n\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      nuevoCache.yo.atlas.idNodoTarget = null;\n      // nuevoCache.yo.atlas.centroVista = {x:100, y:100};\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation {\n              nulificarNodoTargetUsuarioAtlas\n            }\n          `,\n        })\n        .then(() => {\n          this.enviandoQueryTarget = false;\n        })\n        .catch((error) => {\n          this.enviandoQueryTarget = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    centrarEnNodo(n) {\n      const posDiagrama = this.$refs.contenedorDiagrama.getBoundingClientRect();\n      const posNodo = {\n        x: (n.autoCoords.x - this.esquinasDiagrama.x1) * this.factorZoom,\n        y: (n.autoCoords.y - this.esquinasDiagrama.y1) * this.factorZoom,\n      };\n\n      const posIdealScroll = {\n        x: parseInt(posNodo.x - posDiagrama.width / 2),\n        y: parseInt(posNodo.y - posDiagrama.height / 2),\n      };\n\n      this.$refs.contenedorDiagrama.scrollLeft = posIdealScroll.x;\n      this.$refs.contenedorDiagrama.scrollTop = posIdealScroll.y;\n\n      this.seleccionNodo(n);\n      //this.centroVista=e;\n    },\n    centrarEnNodoById(idNodo) {\n      console.log(`Centrando en nodo con id ${idNodo}`);\n      var elNodo = this.todosNodos.find((n) => n.id === idNodo);\n      if (elNodo) {\n        this.centrarEnNodo(elNodo);\n        return;\n      }\n      this.$apollo\n        .query({\n          query: gql`\n            query ($idNodo: ID!) {\n              nodo(idNodo: $idNodo) {\n                id\n                autoCoords {\n                  x\n                  y\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodo,\n          },\n        })\n        .then(({ data: { nodo } }) => {\n          console.log(`Recibido nodo así: ${JSON.stringify(nodo)}`);\n          this.centrarEnNodo(nodo);\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n        });\n    },\n    iniciaMovimientoTouch(e) {\n      if (e.touches.length === 2) {\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        this.lastPinchDistance = dist;\n        this.pinching = true;\n        return;\n      }\n\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n    },\n    finTouch() {\n      this.pinching = false;\n    },\n    cambiarCoordsManualesNodo(idNodo, coordsManuales) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      this.todosNodos[this.todosNodos.findIndex((n) => n.id == idNodo)].coords =\n        coordsManuales;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: String, $coordsManuales: CoordsInput) {\n              setCoordsManuales(\n                idNodo: $idNodo\n                coordsManuales: $coordsManuales\n              ) {\n                modificados {\n                  id\n                  coordsManuales {\n                    x\n                    y\n                  }\n                  coords {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodo,\n            coordsManuales,\n          },\n        })\n        .then(() => {\n          this.$refs.canvases.crearImagenTodosVinculos();\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n        });\n    },\n    eliminarNodo(idNodo) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      if (!confirm(\"¿Seguro de que quieres eliminar este nodo?\")) return;\n      console.log(`enviando mutacion de eliminar nodo`);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!) {\n              eliminarNodo(idNodo: $idNodo)\n            }\n          `,\n          variables: {\n            idNodo,\n          },\n          update(store, { data: { eliminarNodo } }) {\n            console.log(`QUERY: ${JSON.stringify(QUERY_NODOS)}`);\n            if (!eliminarNodo) {\n              console.log(`Nodo no fue eliminado`);\n              return;\n            }\n            const cache = store.readQuery({\n              query: QUERY_NODOS,\n            });\n            console.log(`Cache QUERY_NODOS: ${JSON.stringify(cache)}`);\n            var nuevoCache = JSON.parse(JSON.stringify(cache));\n            const indexN = nuevoCache.todosNodos.findIndex(\n              (n) => n.id == idNodo\n            );\n            if (indexN > -1) {\n              nuevoCache.todosNodos.splice(indexN, 1);\n              store.writeQuery({\n                query: QUERY_NODOS,\n                data: nuevoCache,\n              });\n            } else {\n              console.log(`El nodo no estaba presente`);\n            }\n          },\n        })\n        .then((data) => {\n          console.log(`quitando el objeto del array. ${data}`);\n        });\n    },\n    crearNodo(posicion) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`Error usuario no autorizado`);\n        return;\n      }\n      console.log(`enviando una mutación de crear nodo`);\n\n      let infoNodo = {\n        coordsManuales: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        coords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        autoCoords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n      };\n      console.log(`en las coordenadas: ${posicion.x}, ${posicion.y} `);\n      this.posicionCreandoNodo = {\n        x: posicion.x,\n        y: posicion.y,\n      };\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoNodo: NodoConocimientoInput) {\n              crearNodo(infoNodo: $infoNodo) {\n                ...fragNodoConocimiento\n              }\n            }\n            ${fragmentoNodoConocimiento}\n          `,\n          variables: {\n            infoNodo,\n          },\n        })\n        .then(({ data: { crearNodo } }) => {\n          console.log(`Creado ${crearNodo.id}`);\n          const store = this.$apollo.provider.defaultClient;\n          const cache = store.readQuery({\n            query: QUERY_NODOS,\n          });\n          var nuevoCache = JSON.parse(JSON.stringify(cache));\n          console.log(`1`);\n          var losNodos = nuevoCache.todosNodos;\n          console.log(`2`);\n\n          const indexN = losNodos.findIndex((n) => n.id === crearNodo.id);\n          if (indexN > -1) {\n            console.log(`El nodo ya estaba en caché`);\n          } else {\n            losNodos.push(crearNodo);\n            store.writeQuery({\n              query: QUERY_NODOS,\n              data: nuevoCache,\n            });\n          }\n          this.posicionCreandoNodo = null;\n          //this.$router.push(\"/nodoConocimiento/\"+crearNodo.id);\n        })\n        .catch((error) => {\n          this.posicionCreandoNodo = null;\n          console.log(`Error. E: ${error}`);\n        });\n    },\n    descargarCentroVista() {\n      let dis = this;\n      this.$apollo\n        .query({\n          query: gql`\n            query {\n              yo {\n                id\n                atlas {\n                  centroVista {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idUsuario: this.$store.state.usuario.id,\n          },\n          fetchPolicy: \"network-only\",\n        })\n        .then(function ({ data: { yo } }) {\n          let coords = yo.atlas.centroVista;\n          dis.$set(dis.centroVista, \"x\", coords.x);\n          dis.$set(dis.centroVista, \"y\", coords.y);\n          dis.$store.commit(\"setCentroVistaAtlas\", coords);\n        })\n        .catch(function (error) {\n          console.log(`error fetching centro vista: ${error}`);\n        });\n    },\n    seleccionNodo(nodo) {\n      this.idNodoSeleccionado = nodo.id;\n    },\n    async eliminarVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(\n        `eliminando un vinculo entre ${args.idNodoFrom} y ${args.idNodoTo} `\n      );\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodoFrom: ID!, $idNodoTo: ID!) {\n              eliminarVinculoFromTo(\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    tipo\n                    rol\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n    dibujarVinculosGrises() {\n      this.actualizarVinculosGrises++;\n    },\n    async crearVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(`creando un vinculo ${JSON.stringify(args)} `);\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($tipo: String!, $idNodoFrom: ID!, $idNodoTo: ID!) {\n              crearVinculo(\n                tipo: $tipo\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    rol\n                    tipo\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            tipo: \"continuacion\",\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n\n    zoomVista(deltaZoom) {\n      var nuevoZoom = this.zoom + deltaZoom;\n      if (nuevoZoom < this.minZoom) {\n        this.zoom = this.minZoom;\n      } else if (nuevoZoom > this.maxZoom) {\n        this.zoom = this.maxZoom;\n      } else {\n        this.zoom = nuevoZoom;\n      }\n\n      //Pan vista de acuerdo con la posición del mouse respecto del atlas\n    },\n    zoomWheel(e) {\n      if (!this.hovered || !e.ctrlKey) {\n        return;\n      }\n      e.preventDefault();\n\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const posZoom = {\n        x:\n          Math.round((e.clientX - posContenedor.left) / this.factorZoom) +\n          this.centroVista.x,\n        y:\n          Math.round((e.clientY - posContenedor.top) / this.factorZoom) +\n          this.centroVista.y,\n      };\n\n      // const proporciones = {\n      //   x:\n      //     (posZoom.x - this.centroVistaDecimal.x) /\n      //     (posContenedor.width / this.factorZoom),\n      //   y:\n      //     (posZoom.y - this.centroVistaDecimal.y) /\n      //     (posContenedor.height / this.factorZoom),\n      // };\n\n      const factorZoom = 0.2;\n      this.zoomVista(-Math.round(e.deltaY * factorZoom), {\n        x: posZoom.x,\n        y: posZoom.y,\n      });\n    },\n    hideZoomInfo: debounce(function () {\n      this.showingZoomInfo = false;\n    }, 1000),\n  },\n  watch: {\n    nodoSeleccionado: function () {\n      this.actualizarTrazos++;\n    },\n    route: function (to) {\n      console.log(`cambio de navegación a ${to.path}`);\n    },\n    idNodoTarget(idNodoTarget) {\n      if (!idNodoTarget) {\n        this.idsNecesariosParaTarget = [];\n        return;\n      }\n      console.log(`iniciando busqueda de requeridos de nodo ${idNodoTarget}`);\n      this.idsNecesariosParaTarget = this.encontrarNodosNecesariosDeNodo(\n        idNodoTarget,\n        []\n      );\n    },\n    zoom() {\n      this.showingZoomInfo = true;\n      this.hideZoomInfo();\n    },\n  },\n  mounted() {\n    // if (!this.usuario.atlas || !this.usuario.atlas.centroVista) {\n    //   console.log(`No había info de centro vista en la store. Descargando`);\n    //   this.descargarCentroVista();\n    //   return;\n    // }\n    // this.$set(this.centroVistaDecimal, \"x\", this.usuario.atlas.centroVista.x);\n    // this.$set(this.centroVistaDecimal, \"y\", this.usuario.atlas.centroVista.y);\n\n    if (screen.width < 600) {\n      this.zoom = 70;\n    }\n  },\n  created() {\n    window.addEventListener(\"wheel\", this.zoomWheel, { passive: false });\n  },\n  removed() {\n    window.removeEventListener(\"wheel\", this.zoomWheel);\n  },\n  // beforeRouteLeave(_, __, next) {\n  //   console.log(\n  //     `enviando nuevo centroVista para el usuario ${\n  //       this.usuario.id\n  //     }. Centro vista: ${JSON.stringify(this.centroVista)}`\n  //   );\n  //   this.$store.commit(\"setCentroVistaAtlas\", this.centroVista);\n\n  //   this.$apollo\n  //     .mutate({\n  //       mutation: gql`\n  //         mutation($idUsuario: ID, $centroVista: CoordsInput) {\n  //           setCentroVista(idUsuario: $idUsuario, centroVista: $centroVista)\n  //         }\n  //       `,\n  //       variables: {\n  //         idUsuario: this.$store.state.usuario.id,\n  //         centroVista: this.centroVista,\n  //       },\n  //     })\n  //     .then(function () {\n  //       next();\n  //     })\n  //     .catch(function (error) {\n  //       console.log(`error: ${error}`);\n  //       next();\n  //     });\n  // },\n};\n</script>\n<style>\n:root {\n  --atlasConocimientoFondo: #f3eff5;\n  --atlasConocimientoCheck: #3f7d20;\n  --atlasConocimientoAvailable: #e2c044;\n  --atlasConocimientoRepaso: #ff5f5f;\n  --atlasConocimientoOff: #dbfcff;\n}\n</style>\n<style scoped>\n.atlasConocimiento {\n  position: relative;\n  overflow-x: hidden;\n}\n.ventanaRepasos {\n  z-index: 100;\n  position: absolute;\n  top: 0px;\n  left: 0%;\n  background-color: rgb(255 252 249);\n  box-shadow: 3px 4px 4px rgba(0, 0, 0, 0.25);\n}\n#zonaNodoTarget {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  z-index: 50;\n}\n#zonaNodoTarget .boton {\n  width: 25px;\n  height: 25px;\n}\n#menuContextual {\n  position: absolute;\n  background-color: gray;\n  z-index: 110;\n}\n.botonMenuContextual {\n  font-size: 12px;\n  color: rgb(221, 221, 221);\n  cursor: pointer;\n  padding: 10px;\n}\n.botonMenuContextual:hover {\n  background-color: rgb(68, 68, 68);\n}\n#contenedorDiagrama {\n  position: relative;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  overflow: scroll;\n  z-index: 0;\n}\n#contenedorVinculosNodos {\n  position: absolute;\n  top: 50px;\n  left: 50px;\n  user-select: none;\n\n  pointer-events: none;\n}\n#contenedorNodos {\n  position: absolute;\n  top: 50px;\n  left: 50px;\n  user-select: none;\n\n  pointer-events: none;\n}\n#buscadorNodosConocimiento {\n  position: absolute;\n  top: 1%;\n  right: 1%;\n  /* transform: translateX(-50%); */\n  z-index: 1;\n  width: min(100vh, 350px);\n}\n#panelConjuntosNodos {\n  z-index: 100;\n}\n\n#panelObjetivos {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.2;\n  z-index: 100;\n}\n#panelObjetivos:hover {\n  opacity: 1;\n}\n#infoZoom {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 10px;\n  display: inline-block;\n  font-weight: bold;\n  color: rgb(102, 102, 102);\n}\n#botonCallingPosiciones {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n  position: absolute;\n  top: 1%;\n  right: 1%;\n  cursor: pointer;\n  z-index: 1;\n}\n\n#simboloDescargandoNodos {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.visorNodoConocimiento {\n  width: 100%;\n  min-height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1000;\n  background-color: whitesmoke;\n}\n\n#barraInferior {\n  position: absolute;\n  bottom: 12px;\n  padding: 10px;\n  display: flex;\n  flex-direction: row-reverse;\n  right: 0px;\n  box-sizing: border-box;\n}\n\n#barraInferior .boton {\n  height: 30px;\n  width: 30px;\n  margin: 0px 5px;\n  z-index: 0;\n}\n\n.fadeOut-leave-to {\n  opacity: 0;\n}\n.fadeOut-leave-active {\n  transition: opacity 1s;\n}\n.fadeOut-leave {\n  opacity: 1;\n}\n</style>"],"sourceRoot":"src/components/atlasConocimiento"}]}