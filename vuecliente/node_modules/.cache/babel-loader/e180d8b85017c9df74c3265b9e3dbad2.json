{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/eslint-loader/index.js??ref--13-0!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/MixinAtlasSolidaridad.js","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/MixinAtlasSolidaridad.js","mtime":1644587546122},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/MixinAtlasSolidaridad.js"],"names":["gql","debounce","fragmentoNodoSolidaridad","fragmentoPersonaAtlas","QUERY_NODOS_SOLIDARIDAD","QUERY_PERSONAS","MixinAtlasSolidaridad","apollo","nodoRoot","query","variables","idNodo","idNodoRoot","tipoNodo","tipoNodoRoot","skip","update","nodoAtlasSolidaridadByIdAndTipo","nodosSolidaridad","nodoSolidaridad","personas","persona","cacheNodosInicializado","store","$apollo","provider","defaultClient","writeQuery","data","console","log","fetchPolicy","$subscribe","nodoEditado","centro","x","y","radio","result","nombre","nodoEliminado","eliminarNodoCache","nodosEliminados","forEach","ne","removeNodoFromNodosSolidaridad","datosYoDescargados","idsNodosEverPassedToFetchMore","infoNodosEverRendered","methods","addNodoToNodosSolidaridad","nuevoNodo","cache","readQuery","nuevoCache","JSON","parse","stringify","indexN","findIndex","n","id","push","idNodoSeleccionado","splice","fetchRelacionesNodosNeedingFetchMore","infoNodos","infoNodosNeedingFetchMore","then","relacionesNodosAtlasByIds","arrayUnique","concat","idsNodosNeedingFetchMore","idsActualesNodosSolidaridad","map","ns","cacheNS","nuevoCacheNS","filter","includes","idsActualesPersonas","p","cacheP","nuevoCacheP","computed","indiceNodosUnder","length","objetoFinal","todosNodos","nodo","idsVinculos","vinculos","v","tipo","idRef","requeridos","sort","a","b","indexOf","children","nodoParent","responsables","nodosChildren","nodosRequeridos","i","info","watch","nuevo","array","j"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\"\nimport debounce from \"debounce\";\nimport { fragmentoNodoSolidaridad, fragmentoPersonaAtlas } from \"./frags\";\n\n\nexport const QUERY_NODOS_SOLIDARIDAD = gql`\n    query{\n      nodosSolidaridad{\n        ...fragNodoSolidaridad\n      }\n    }\n    ${fragmentoNodoSolidaridad}\n    `\n\nexport const QUERY_PERSONAS = gql`\n    query{\n      personas{\n        ...fragPersonaAtlas\n      }\n    }\n    ${fragmentoPersonaAtlas}\n`\n\nexport const MixinAtlasSolidaridad = {\n  apollo: {\n    nodoRoot: {\n      query: gql`\n        query($idNodo: ID!, $tipoNodo: String!){\n          nodoAtlasSolidaridadByIdAndTipo(idNodo:$idNodo, tipoNodo: $tipoNodo){\n            nodoSolidaridad{\n              ...fragNodoSolidaridad\n            }\n            persona{\n              ...fragPersonaAtlas\n            }\n          }\n        }\n        ${fragmentoNodoSolidaridad}\n        ${fragmentoPersonaAtlas}\n      `,\n      variables() {\n        return {\n          idNodo: this.idNodoRoot,\n          tipoNodo: this.tipoNodoRoot\n        }\n      },\n      skip() {\n        return !this.idNodoRoot;\n      },\n      update({ nodoAtlasSolidaridadByIdAndTipo }) {\n        var nodosSolidaridad = nodoAtlasSolidaridadByIdAndTipo.nodoSolidaridad ? [nodoAtlasSolidaridadByIdAndTipo.nodoSolidaridad] : []\n        var personas = nodoAtlasSolidaridadByIdAndTipo.persona ? [nodoAtlasSolidaridadByIdAndTipo.persona] : []\n\n        if (!this.cacheNodosInicializado) {\n          const store = this.$apollo.provider.defaultClient;\n          store.writeQuery({\n            query: QUERY_NODOS_SOLIDARIDAD,\n            data: { nodosSolidaridad }\n          });\n          store.writeQuery({\n            query: QUERY_PERSONAS,\n            data: { personas }\n          });\n          this.cacheNodosInicializado = true;\n        }\n       \n\n        if (nodoAtlasSolidaridadByIdAndTipo.nodoSolidaridad) {\n          return nodoAtlasSolidaridadByIdAndTipo.nodoSolidaridad\n        }\n        else if (nodoAtlasSolidaridadByIdAndTipo.persona) {\n          return nodoAtlasSolidaridadByIdAndTipo.persona\n        }\n        else {\n          console.log(`Fallo al obtener nodoRoot`);\n          return null;\n        }\n      },\n    },\n    nodosSolidaridad: {\n      query: QUERY_NODOS_SOLIDARIDAD,\n      fetchPolicy: \"cache-only\",\n      skip() {\n        return !this.nodoRoot\n      }\n    },\n    personas: {\n      query: QUERY_PERSONAS,\n      fetchPolicy: \"cache-only\",\n      skip() {\n        return !this.nodoRoot\n      }\n    },\n    $subscribe: {\n      nodoEditado: {\n        query: gql`\n          subscription ($centro: CoordsInput!, $radio: Int!) {\n            nodoEditado(centro: $centro, radio: $radio) {\n              ...fragNodoSolidaridad\n            }\n          }\n          ${fragmentoNodoSolidaridad}\n        `,\n        variables() {\n          return {\n            centro: {\n              x: 0,\n              y: 0,\n            },\n            radio: 0,\n          };\n        },\n        result : function({ data: { nodoEditado } }){    \n          console.log(`nodo ${nodoEditado.nombre} editado`);      \n        },\n      },\n      nodoEliminado: {\n        query: gql`\n          subscription ($centro: CoordsInput!, $radio: Int!) {\n            nodoEliminado(centro: $centro, radio: $radio)\n          }\n        `,\n        variables() {\n          return {\n            centro: {\n              x: 0,\n              y: 0,\n            },\n            radio: 0,\n          };\n        },\n        result({ data: { nodoEliminado } }) {\n          console.log(`Eliminando de cache a ${nodoEliminado}`);\n          this.eliminarNodoCache(nodoEliminado);\n        },\n      },\n      nodosEliminados: {\n        query: gql`\n          subscription {\n            nodosEliminados\n          }\n        `,\n        result({ data: { nodosEliminados } }) {\n          console.log(`Eliminando de cache a ${nodosEliminados}`);\n          nodosEliminados.forEach((ne) => {\n            this.removeNodoFromNodosSolidaridad(ne);\n          });\n        },\n      },\n      \n    },\n  },\n  data() {\n    return {\n      datosYoDescargados: false,\n      nodosSolidaridad: [],\n      personas: [],\n      idsNodosEverPassedToFetchMore: [],\n      infoNodosEverRendered: [],\n      cacheNodosInicializado:false,\n    }\n  },\n  methods: {\n    addNodoToNodosSolidaridad(nuevoNodo){\n      console.log(`Adding nuevo nodo a nodosSolidaridad`);\n      const store=this.$apollo.provider.defaultClient;\n      const cache=store.readQuery({\n        query: QUERY_NODOS_SOLIDARIDAD,        \n      })\n\n      var nuevoCache=JSON.parse(JSON.stringify(cache));\n      \n      const indexN=nuevoCache.nodosSolidaridad.findIndex(n=>n.id===nuevoNodo.id);\n      if(indexN===-1){\n        nuevoCache.nodosSolidaridad.push(nuevoNodo);\n        store.writeQuery({\n          query: QUERY_NODOS_SOLIDARIDAD,\n          data: nuevoCache,\n        })\n      }\n      this.idNodoSeleccionado=nuevoNodo.id\n    },\n    removeNodoFromNodosSolidaridad(id){\n      if(this.idNodoSeleccionado===id){\n        this.idNodoSeleccionado=null;\n      }\n      const store=this.$apollo.provider.defaultClient;\n      const cache=store.readQuery({\n        query: QUERY_NODOS_SOLIDARIDAD,        \n      })\n\n      var nuevoCache=JSON.parse(JSON.stringify(cache));\n      \n      const indexN=nuevoCache.nodosSolidaridad.findIndex(n=>n.id===id);\n      if(indexN>-1){\n        nuevoCache.nodosSolidaridad.splice(indexN, 1);\n        store.writeQuery({\n          query: QUERY_NODOS_SOLIDARIDAD,\n          data: nuevoCache,\n        })\n      }\n    },\n    fetchRelacionesNodosNeedingFetchMore: debounce(function () {\n\n      this.$apollo\n        .query({\n          query: gql`\n            query($infoNodos: [InfoNodoDeAtlasSolidaridad!]!) {\n              relacionesNodosAtlasByIds(infoNodos: $infoNodos) {\n                  nodosSolidaridad {\n                    ...fragNodoSolidaridad\n                }\n                  personas {\n                    ...fragPersonaAtlas\n                }\n              }\n            }\n            ${fragmentoNodoSolidaridad}\n            ${fragmentoPersonaAtlas}\n            `,\n          variables: {\n            infoNodos: this.infoNodosNeedingFetchMore,\n          },\n          fetchPolicy:\"network-only\"\n        })\n        .then(({ data: { relacionesNodosAtlasByIds } }) => {\n          this.idsNodosEverPassedToFetchMore = arrayUnique(\n            this.idsNodosEverPassedToFetchMore.concat(\n              this.idsNodosNeedingFetchMore\n            )\n          );\n          //Add to cache de nodosSolidaridad\n          const idsActualesNodosSolidaridad = this.nodosSolidaridad.map(ns => ns.id);\n\n          const store = this.$apollo.provider.defaultClient;\n          const cacheNS = store.readQuery({\n            query: QUERY_NODOS_SOLIDARIDAD\n          });\n          var nuevoCacheNS = JSON.parse(JSON.stringify(cacheNS));\n          if (!nuevoCacheNS.nodosSolidaridad) nuevoCacheNS.nodosSolidaridad = [];\n          nuevoCacheNS.nodosSolidaridad.push(...relacionesNodosAtlasByIds.nodosSolidaridad.filter(ns => !idsActualesNodosSolidaridad.includes(ns.id)))\n\n          store.writeQuery({\n            query: QUERY_NODOS_SOLIDARIDAD,\n            data: nuevoCacheNS\n          });\n\n          //Add to cache de personas\n          const idsActualesPersonas = this.personas.map(p => p.id);\n\n          const cacheP = store.readQuery({\n            query: QUERY_PERSONAS\n          });\n          var nuevoCacheP = JSON.parse(JSON.stringify(cacheP));\n          if (!nuevoCacheNS.personas) nuevoCacheNS.nodosSolidaridad = [];\n          nuevoCacheP.personas.push(...relacionesNodosAtlasByIds.personas.filter(p => !idsActualesPersonas.includes(p.id)))\n\n          store.writeQuery({\n            query: QUERY_PERSONAS,\n            data: nuevoCacheP\n          });\n        });\n    }, 2000),\n  },\n  computed: {\n    indiceNodosUnder() {\n      if (this.nodosSolidaridad.length + this.personas.length < 1) return null;\n      var objetoFinal = {};\n\n      this.todosNodos.forEach((nodo) => {\n        let idsVinculos = nodo.vinculos\n          .filter((v) => v.tipo === \"requiere\")\n          .map((v) => v.idRef);\n        let requeridos = this.nodosSolidaridad\n          .filter((n) => idsVinculos.includes(n.id))\n          .sort(\n            (a, b) => idsVinculos.indexOf(a.id) - idsVinculos.indexOf(b.id)\n          );\n        let children = requeridos.filter((n) => n.nodoParent === nodo.id);\n        let responsables = this.personas.filter((p) =>\n          nodo.responsables.includes(p.id)\n        );\n        objetoFinal[nodo.id] = {\n          nodosChildren: children,\n          nodosRequeridos: requeridos,\n          responsables,\n        };\n      });\n\n      return objetoFinal;\n    },\n    infoNodosNeedingFetchMore() {\n      return this.infoNodosEverRendered.filter(\n        (i) => !this.idsNodosEverPassedToFetchMore.includes(i.id)\n      );\n    },\n    todosNodos() {\n      return this.nodosSolidaridad.concat(this.personas);\n    },\n    idsNodosNeedingFetchMore() {\n      return this.infoNodosNeedingFetchMore.map((info) => info.id);\n    },\n  },\n  watch: {\n    idsNodosNeedingFetchMore(nuevo) {\n      if (nuevo.length > 0) {\n        this.fetchRelacionesNodosNeedingFetchMore();\n      }\n    },\n  }\n}\n\nconst arrayUnique = function (array) {\n  var a = array.concat();\n  for (var i = 0; i < a.length; ++i) {\n    for (var j = i + 1; j < a.length; ++j) {\n      if (a[i] === a[j]) a.splice(j--, 1);\n    }\n  }\n\n  return a;\n}"]}]}