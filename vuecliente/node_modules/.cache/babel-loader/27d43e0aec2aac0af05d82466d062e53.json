{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js!/home/vida1/webpj/pepepe/vuecliente/node_modules/eslint-loader/index.js??ref--13-0!/home/vida1/webpj/pepepe/vuecliente/src/apollo.js","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/apollo.js","mtime":1650316648233},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdmlkYTEvd2VicGovcGVwZXBlL3Z1ZWNsaWVudGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgeyBBcG9sbG9DbGllbnQsIEh0dHBMaW5rLCBJbk1lbW9yeUNhY2hlIH0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7CmltcG9ydCB7IGNyZWF0ZUFwb2xsb1Byb3ZpZGVyIH0gZnJvbSAnQHZ1ZS9hcG9sbG8tb3B0aW9uJzsgLy8gaW1wb3J0IHtXZWJTb2NrZXRMaW5rfSBmcm9tICJAYXBvbGxvL2NsaWVudC9saW5rL3dzIgovLyBpbXBvcnQge2dldE1haW5EZWZpbml0aW9ufSBmcm9tICJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMiCgppbXBvcnQgeyBzZXRDb250ZXh0IH0gZnJvbSAiQGFwb2xsby9jbGllbnQvbGluay9jb250ZXh0IjsKaW1wb3J0IHsgb25FcnJvciB9IGZyb20gJ0BhcG9sbG8vY2xpZW50L2xpbmsvZXJyb3InOwppbXBvcnQgcG9zc2libGVUeXBlcyBmcm9tICIuLi9wb3NzaWJsZVR5cGVzLmpzb24iOwppbXBvcnQgeyB0eXBlRGVmcywgcmVzb2x2ZXJzIH0gZnJvbSAiLi9hcG9sbG9TdG9yZS9TY2hlbWEiOwp2YXIgY2FjaGUgPSBuZXcgSW5NZW1vcnlDYWNoZSh7CiAgcG9zc2libGVUeXBlczogcG9zc2libGVUeXBlcwp9KTsKCnZhciBnZXRUb2tlbiA9IGZ1bmN0aW9uIGdldFRva2VuKCkgewogIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTsKfTsKCmV4cG9ydCB2YXIgc2VydmVyVXJsID0gJ2h0dHA6Ly8xOTIuMTY4LjEuMTAwOjMwMDAnOyAvLyBleHBvcnQgY29uc3Qgd3NTZXJ2ZXJVcmw9cHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJwovLyA/ICd3c3M6Ly8nK3NlcnZlclVybC5zdWJzdHIoNykrJy9zdWJzY3JpcGNpb25lcycKLy8gOiAnd3M6Ly8nK3NlcnZlclVybC5zdWJzdHIoNykrJy9zdWJzY3JpcGNpb25lcycKCnZhciBodHRwTGluayA9IG5ldyBIdHRwTGluayh7CiAgdXJpOiBzZXJ2ZXJVcmwgKyAiL2dyYXBocWwiCn0pOyAvL2NvbnNvbGUubG9nKGBEaXJlY2Npb24gc3Vic2NyaXBjaW9uZXMgJHt3c1NlcnZlclVybH1gKTsKLy8gY29uc3Qgd3NMaW5rID0gbmV3IFdlYlNvY2tldExpbmsoewovLyAgIHVyaTogd3NTZXJ2ZXJVcmwsCi8vICAgb3B0aW9uczogewovLyAgICAgcmVjb25uZWN0OiB0cnVlLAovLyAgICAgY29ubmVjdGlvblBhcmFtczogewovLyAgICAgICBoZWFkZXJzOiB7Ci8vICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2dldFRva2VuKCl9YAovLyAgICAgICB9Ci8vICAgICB9Ci8vICAgfSwKLy8gfSkKCnZhciBhdXRoTGluayA9IHNldENvbnRleHQoZnVuY3Rpb24gKF8sIF9yZWYpIHsKICB2YXIgaGVhZGVycyA9IF9yZWYuaGVhZGVyczsKICByZXR1cm4gewogICAgaGVhZGVyczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBoZWFkZXJzKSwge30sIHsKICAgICAgYXV0aG9yaXphdGlvbjogZ2V0VG9rZW4oKQogICAgfSkKICB9Owp9KTsKdmFyIGVycm9yTGluayA9IG9uRXJyb3IoZnVuY3Rpb24gKF9yZWYyKSB7CiAgdmFyIGdyYXBoUUxFcnJvcnMgPSBfcmVmMi5ncmFwaFFMRXJyb3JzLAogICAgICBuZXR3b3JrRXJyb3IgPSBfcmVmMi5uZXR3b3JrRXJyb3I7CgogIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7CiAgICBpZiAoZ3JhcGhRTEVycm9ycykgZ3JhcGhRTEVycm9ycy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgIHZhciBtZXNzYWdlID0gX3JlZjMubWVzc2FnZSwKICAgICAgICAgIGxvY2F0aW9ucyA9IF9yZWYzLmxvY2F0aW9ucywKICAgICAgICAgIHBhdGggPSBfcmVmMy5wYXRoOwogICAgICByZXR1cm4gY29uc29sZS5sb2coIltHcmFwaFFMIGVycm9yXTogTWVzc2FnZTogIi5jb25jYXQobWVzc2FnZSwgIiwgTG9jYXRpb246ICIpLmNvbmNhdChsb2NhdGlvbnMsICIsIFBhdGg6ICIpLmNvbmNhdChwYXRoKSk7CiAgICB9KTsKICAgIGlmIChuZXR3b3JrRXJyb3IpIGNvbnNvbGUubG9nKCJbTmV0d29yayBlcnJvcl06ICIuY29uY2F0KG5ldHdvcmtFcnJvcikpOwogIH0KfSk7CnZhciBsaW5rID0gZXJyb3JMaW5rLmNvbmNhdChhdXRoTGluaykuY29uY2F0KGh0dHBMaW5rKTsgLy8gY29uc3QgZmluYWxMaW5rID0gc3BsaXQoCi8vICAgLy8gc3BsaXQgYmFzZWQgb24gb3BlcmF0aW9uIHR5cGUKLy8gICAoeyBxdWVyeSB9KSA9PiB7Ci8vICAgICBjb25zdCBkZWZpbml0aW9uID0gZ2V0TWFpbkRlZmluaXRpb24ocXVlcnkpCi8vICAgICByZXR1cm4gZGVmaW5pdGlvbi5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicgJiYKLy8gICAgICAgZGVmaW5pdGlvbi5vcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nCi8vICAgfSwKLy8gICB3c0xpbmssCi8vICAgbGluawovLyApCgpleHBvcnQgdmFyIGFwb2xsb0NsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoewogIGxpbms6IGxpbmssCiAgY2FjaGU6IGNhY2hlLAogIHR5cGVEZWZzOiB0eXBlRGVmcywKICByZXNvbHZlcnM6IHJlc29sdmVycywKICBjb25uZWN0VG9EZXZUb29sczogdHJ1ZQp9KTsKZXhwb3J0IHZhciBhcG9sbG9Qcm92aWRlciA9IGNyZWF0ZUFwb2xsb1Byb3ZpZGVyKHsKICBkZWZhdWx0Q2xpZW50OiBhcG9sbG9DbGllbnQKfSk7"},{"version":3,"sources":["/home/vida1/webpj/pepepe/vuecliente/src/apollo.js"],"names":["ApolloClient","HttpLink","InMemoryCache","createApolloProvider","setContext","onError","possibleTypes","typeDefs","resolvers","cache","getToken","localStorage","getItem","serverUrl","httpLink","uri","authLink","_","headers","authorization","errorLink","graphQLErrors","networkError","process","env","NODE_ENV","map","message","locations","path","console","log","link","concat","apolloClient","connectToDevTools","apolloProvider","defaultClient"],"mappings":";;;AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,qBAAtD;AACA,SAASC,oBAAT,QAAqC,oBAArC,C,CAEA;AAEA;;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAmC,sBAAnC;AAGA,IAAMC,KAAK,GAAE,IAAIP,aAAJ,CAAkB;AAC7BI,EAAAA,aAAa,EAAbA;AAD6B,CAAlB,CAAb;;AAKA,IAAII,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAKC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAL;AAAA,CAAf;;AAGA,OAAO,IAAMC,SAAS,GAAC,2BAAhB,C,CAIP;AACA;AACA;;AAGA,IAAMC,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAC5Bc,EAAAA,GAAG,EAAEF,SAAS,GAAC;AADa,CAAb,CAAjB,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMG,QAAQ,GAACZ,UAAU,CAAC,UAACa,CAAD,QAAgB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACtC,SAAO;AACHA,IAAAA,OAAO,kCACAA,OADA;AAEHC,MAAAA,aAAa,EAAET,QAAQ;AAFpB;AADJ,GAAP;AAMH,CAPwB,CAAzB;AASA,IAAMU,SAAS,GAAGf,OAAO,CAAC,iBAAqC;AAAA,MAAlCgB,aAAkC,SAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,SAAnBA,YAAmB;;AAC7D,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIJ,aAAJ,EACEA,aAAa,CAACK,GAAd,CAAkB;AAAA,UAAGC,OAAH,SAAGA,OAAH;AAAA,UAAYC,SAAZ,SAAYA,SAAZ;AAAA,UAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,aAChBC,OAAO,CAACC,GAAR,qCAC+BJ,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADgB;AAAA,KAAlB;AAMF,QAAIP,YAAJ,EAAkBQ,OAAO,CAACC,GAAR,4BAAgCT,YAAhC;AACnB;AACF,CAXwB,CAAzB;AAaA,IAAMU,IAAI,GAACZ,SAAS,CAACa,MAAV,CAAiBjB,QAAjB,EAA2BiB,MAA3B,CAAkCnB,QAAlC,CAAX,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMoB,YAAY,GAAC,IAAIlC,YAAJ,CAAiB;AACzCgC,EAAAA,IAAI,EAAJA,IADyC;AAEzCvB,EAAAA,KAAK,EAALA,KAFyC;AAGzCF,EAAAA,QAAQ,EAARA,QAHyC;AAIzCC,EAAAA,SAAS,EAATA,SAJyC;AAKzC2B,EAAAA,iBAAiB,EAAC;AALuB,CAAjB,CAAnB;AASP,OAAO,IAAMC,cAAc,GAACjC,oBAAoB,CAAC;AAC/CkC,EAAAA,aAAa,EAACH;AADiC,CAAD,CAAzC","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client/core'\nimport { createApolloProvider } from '@vue/apollo-option'\n\n// import {WebSocketLink} from \"@apollo/client/link/ws\"\n\n// import {getMainDefinition} from \"@apollo/client/utilities\"\nimport {setContext} from \"@apollo/client/link/context\"\nimport { onError } from '@apollo/client/link/error'\n\nimport possibleTypes from \"../possibleTypes.json\"\nimport { typeDefs, resolvers} from \"./apolloStore/Schema\"\n\n\nconst cache= new InMemoryCache({\n  possibleTypes\n});\n\n\nlet getToken = ()=> localStorage.getItem('token');\n\n\nexport const serverUrl='http://192.168.1.100:3000';\n\n\n\n// export const wsServerUrl=process.env.NODE_ENV === 'production'\n// ? 'wss://'+serverUrl.substr(7)+'/subscripciones'\n// : 'ws://'+serverUrl.substr(7)+'/subscripciones'\n\n\nconst httpLink = new HttpLink({\n  uri: serverUrl+\"/graphql\"\n});\n\n//console.log(`Direccion subscripciones ${wsServerUrl}`);\n\n// const wsLink = new WebSocketLink({\n//   uri: wsServerUrl,\n//   options: {\n//     reconnect: true,\n//     connectionParams: {\n//       headers: {\n//         Authorization: `Bearer ${getToken()}`\n//       }\n//     }\n//   },\n// })\n\nconst authLink=setContext((_, {headers})=>{    \n    return {\n        headers:{\n            ...headers,\n            authorization: getToken()\n        }\n    }\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n        ),\n      )\n\n    if (networkError) console.log(`[Network error]: ${networkError}`)\n  }\n});\n\nconst link=errorLink.concat(authLink).concat(httpLink);\n\n\n// const finalLink = split(\n//   // split based on operation type\n//   ({ query }) => {\n//     const definition = getMainDefinition(query)\n//     return definition.kind === 'OperationDefinition' &&\n//       definition.operation === 'subscription'\n//   },\n//   wsLink,\n//   link\n// )\n\nexport const apolloClient=new ApolloClient({\n  link,\n  cache,\n  typeDefs,\n  resolvers,\n  connectToDevTools:true,\n});\n\n\nexport const apolloProvider=createApolloProvider({\n  defaultClient:apolloClient\n});\n\n\n"]}]}