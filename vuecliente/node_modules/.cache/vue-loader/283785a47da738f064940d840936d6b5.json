{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue?vue&type=style&index=0&id=12c6f2e7&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue","mtime":1643654906495},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNhbnZhcyB7CiAgcG9zaXRpb246IGFic29sdXRlOwp9CgojY2FudmFzVG9kb3NWaW5jdWxvcyB7CiAgei1pbmRleDogMDsKfQo="},{"version":3,"sources":["Canvases.vue"],"names":[],"mappingskfA;AACA;AACA;;AAEA;AACA;AACA","file":"Canvases.vue","sourceRoot":"src/components/atlasConocimiento","sourcesContent":["<template>\n  <div id=\"canvases\">\n    <canvas\n      id=\"canvasTodosVinculos\"\n      ref=\"canvasTodosVinculos\"\n      :style=\"[offsetCanvasTodosVinculos]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasVinculosSeleccionado\"\n      ref=\"canvasVinculosSeleccionado\"\n      :style=\"[offsetCanvasVinculosSeleccionado]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasPosiciones\"\n      ref=\"canvasPosiciones\"\n      :style=\"[estiloPosicionRelativaCanvas, sizeCanvasTodosVinculos]\"\n      class=\"canvas\"\n      v-show=\"callingPosiciones\"\n    >\n\n    </canvas>\n  </div>\n</template>\n\n<script>\nvar debounce =require(\"debounce\");\n\n\nexport default {\n  name: \"Canvases\",\n  data() {\n    return {\n      montado: false,\n\n      lapiz: null,\n      posicionCanvasTodosVinculos: {\n        top: 0,\n        left: 0,\n      },      \n      posicionCanvasActivo: {\n        x: 0,\n        y: 0,\n      },\n    };\n  },\n  props: {\n    nodoSeleccionado: {\n      type: Object,\n      default() {\n        return {\n          id: \"-1\",\n          vinculos: [],\n        };\n      },\n    },\n    idsNecesariosParaTarget:Array,\n    nodoRelevante: [Object],\n    idNodoTarget: String,\n    todosNodos: Array,\n    centroVista: Object,\n    actualizar: Number,\n\n    callingPosiciones:Boolean,\n    factorZoom:Number,\n  },\n  methods: {\n    crearImagenPosiciones(){\n      \n      this.lapiz=this.$refs.canvasPosiciones.getContext(\"2d\")\n      var nodosRelevantes = this.todosNodos;\n\n      if(this.nodoSeleccionado && this.nodoSeleccionado.id.length>4) nodosRelevantes=[this.nodoSeleccionado];\n      if (nodosRelevantes <= 1) return;\n\n      this.lapiz.canvas.width=parseInt(this.sizeCanvasTodosVinculos.width);\n      this.lapiz.canvas.height=parseInt(this.sizeCanvasTodosVinculos.height);\n      \n      this.lapiz.clearRect(\n        0,\n        0,\n        this.lapiz.canvas.width,\n        this.lapiz.canvas.height\n      );\n\n      this.lapiz.lineWidth=2;\n      this.lapiz.beginPath();\n\n      nodosRelevantes.forEach(nodo=>{\n        this.lapiz.beginPath();\n        this.lapiz.strokeStyle = nodo.stuck?'red':\"#9761d2\";\n\n        this.lapiz.moveTo(nodo.coords.x -this.posicionCanvasActivo.x, nodo.coords.y-this.posicionCanvasActivo.y);\n        this.lapiz.lineTo(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y);\n        this.lapiz.arc(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y, 10, 0, Math.PI*2);\n        this.lapiz.stroke();     \n     })\n\n     this.lapiz.beginPath();    \n     nodosRelevantes.forEach(nodo=>{\n       if(!nodo.stuck){\n        this.lapiz.strokeStyle = 'blue';\n        let nodox=nodo.coords.x -this.posicionCanvasActivo.x;\n        let nodoy=nodo.coords.y-this.posicionCanvasActivo.y\n        this.lapiz.moveTo(nodox, nodoy);\n        \n        let vectorx=(Math.cos(nodo.angulo)*100);\n        let vectory=(Math.sin(nodo.angulo)*100);\n        \n        this.lapiz.lineTo(nodox+vectorx, nodoy+vectory);\n       }\n       \n     })\n     this.lapiz.stroke();\n\n    },\n    crearImagenTodosVinculos: function () {\n      var nodosRelevantes=this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return \n\n      var lapiz = this.$refs.canvasTodosVinculos.getContext(\"2d\");\n                        \n      lapiz.canvas.width = this.esquinasCanvasTodosVinculos.x2 - this.esquinasCanvasTodosVinculos.x1;\n      lapiz.canvas.height = this.esquinasCanvasTodosVinculos.y2 - this.esquinasCanvasTodosVinculos.y1;\n\n      const posicionCanvas={\n        x: this.esquinasCanvasTodosVinculos.x1,\n        y: this.esquinasCanvasTodosVinculos.y1,\n      }\n      lapiz.lineWidth = 1;\n      lapiz.clearRect(0, 0, lapiz.canvas.width, lapiz.canvas.height);\n      lapiz.beginPath();\n      lapiz.strokeStyle = \"#b3b3b3\";\n      for (let nodo of nodosRelevantes) {\n        for (let vinculo of nodo.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) continue;\n          if (vinculo.rol == \"source\") {\n            this.dibujarLineaEntreNodos(\n              nodo,\n              nodosRelevantes.find((nodo) => nodo.id == vinculo.idRef),\n              lapiz,\n              posicionCanvas\n            );\n          }\n        }\n      }\n      lapiz.stroke();\n    },\n    crearImagenVinculosSeleccionado: function () {\n\n      var nodosRelevantes = this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes <= 1) return;\n\n      var lapiz = this.$refs.canvasVinculosSeleccionado.getContext(\"2d\");\n\n      lapiz.canvas.width = this.esquinasCanvasVinculosSeleccionado.x2 - this.esquinasCanvasVinculosSeleccionado.x1;\n      lapiz.canvas.height = this.esquinasCanvasVinculosSeleccionado.y2 - this.esquinasCanvasVinculosSeleccionado.y1; \n\n      const posicionCanvas={\n        x: this.esquinasCanvasVinculosSeleccionado.x1,\n        y: this.esquinasCanvasVinculosSeleccionado.y1,\n      }\n\n      lapiz.clearRect(\n        0,\n        0,\n        lapiz.canvas.width,\n        lapiz.canvas.height\n      );\n\n      \n\n      if (nodosRelevantes.some((n) => n.id == this.nodoSeleccionado.id)) {\n        //Lineas verdes de posiblidades\n        lapiz.beginPath();\n        lapiz.lineWidth = 2;\n        lapiz.strokeStyle = \"#008000\";\n\n        //Lineas verdes de salida\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"source\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(this.nodoSeleccionado, otroNodo, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n        //Lineas rojas de dependencias\n\n        lapiz.beginPath();\n        lapiz.strokeStyle = \"#b80e0e\";\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"target\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(otroNodo, this.nodoSeleccionado, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n      }\n    },\n    dibujarLineaEntreNodos(nodoFrom, nodoTo, lapiz, posicion) {\n      \n      var anguloVinculo = Math.atan(\n        (nodoTo.coords.y - nodoFrom.coords.y) / (nodoTo.coords.x - nodoFrom.coords.x)\n      );\n\n      if (nodoTo.coords.y - nodoFrom.coords.y < 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n      if (nodoTo.coords.y - nodoFrom.coords.y > 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n\n      const zonaNodo={\n        x: 25*Math.cos(anguloVinculo),\n        y: 25*Math.sin(anguloVinculo)\n      }\n      \n      let inicio = {\n        x: ((nodoFrom.coords.x+zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoFrom.coords.y+zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n      let final = {\n        x: ((nodoTo.coords.x-zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoTo.coords.y-zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n\n      \n\n      lapiz.moveTo(inicio.x, inicio.y);\n      lapiz.lineTo(final.x, final.y);\n      //ahora la flechita\n      const centro = {\n        x: (final.x + inicio.x) / 2,\n        y: (final.y + inicio.y) / 2,\n      };\n      const longitudAla = parseInt(7*this.factorZoom);\n            \n\n      \n      //anguloVinculo=anguloVinculo*180/Math.PI;\n\n      const puntaAlaIzquierda = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo - (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo - (3 * Math.PI) / 4),\n      };\n      const puntaAlaDerecha = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo + (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo + (3 * Math.PI) / 4),\n      };\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaIzquierda.x, puntaAlaIzquierda.y);\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaDerecha.x, puntaAlaDerecha.y);\n    },\n    trazarVinculosDeNodoRecursivamente(\n      idNodo,\n      rol,\n      nivelesRestantes,\n      blacklist\n    ) {\n      nivelesRestantes--;\n      let esteNodo = this.todosNodos.find((n) => n.id == idNodo);\n\n      for (let vinculo of esteNodo.vinculos) {\n        if (vinculo.rol != rol) continue;\n        let nodoRef = this.todosNodos.find((n) => n.id == vinculo.idRef);\n        if (!nodoRef) {\n          console.log(`ALERTA. idRef del vinculo no estaba entre los nodos`);\n          continue;\n        }\n        blacklist.push(nodoRef.id);\n        if (rol == \"target\") {\n          this.dibujarLineaEntreNodos(nodoRef, esteNodo);\n          blacklist.push(nodoRef.id);\n        } else if (rol == \"source\") {\n          this.dibujarLineaEntreNodos(esteNodo, nodoRef);\n        }\n        if (\n          nivelesRestantes > 0 &&\n          !blacklist.some((idN) => idN == nodoRef.id)\n        ) {\n          blacklist = this.trazarVinculosDeNodoRecursivamente(\n            nodoRef.id,\n            rol,\n            nivelesRestantes,\n            blacklist\n          );\n        }\n      }\n      return blacklist;\n    },\n    debTrazarVinculos:debounce(function(){\n      this.crearImagenTodosVinculos();\n    }, 1000)\n  },\n  computed: {\n    esquinasCanvasTodosVinculos(){\n      var nodosRelevantes=this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasTodosVinculos(){\n      return {\n        left:  this.esquinasCanvasTodosVinculos.x1 + \"px\",\n        top: this.esquinasCanvasTodosVinculos.y1 + \"px\",\n\n        width: (this.esquinasCanvasTodosVinculos.x2-this.esquinasCanvasTodosVinculos.x1) + \"px\",\n        height: (this.esquinasCanvasTodosVinculos.y2-this.esquinasCanvasTodosVinculos.y1) + \"px\",\n      }\n    },\n    esquinasCanvasVinculosSeleccionado(){\n      var nodosRelevantes=this.todosNodos.filter(n=>n.id==this.nodoSeleccionado.id || n.vinculos.some(v=>v.idRef==this.nodoSeleccionado.id));\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = nodosRelevantes.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasVinculosSeleccionado(){\n      return {\n        left:  this.esquinasCanvasVinculosSeleccionado.x1 + \"px\",\n        top: this.esquinasCanvasVinculosSeleccionado.y1 + \"px\",\n\n        width: (this.esquinasCanvasVinculosSeleccionado.x2-this.esquinasCanvasVinculosSeleccionado.x1) + \"px\",\n        height: (this.esquinasCanvasVinculosSeleccionado.y2-this.esquinasCanvasVinculosSeleccionado.y1) + \"px\",\n      }\n    },\n    sizeCanvasTodosVinculos(){\n      var nodosRelevantes = this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        width:\"0px\",\n        height:\"0px\",\n      };\n\n      let bordesCanvasTodosVinculos = {};\n\n      bordesCanvasTodosVinculos.top = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y > acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y < acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x < acc ? n.coordsManuales.x : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x > acc ? n.coordsManuales.x : acc;\n      }, 0);\n\n      let anchoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.right - bordesCanvasTodosVinculos.left\n      );\n      let altoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.top - bordesCanvasTodosVinculos.bot\n      );\n\n      if (anchoDiagrama > 5000 || altoDiagrama > 5000) {\n        console.log(`ALERTA. Diagrama demasiado grande`);\n      }\n\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"y\",\n        bordesCanvasTodosVinculos.bot\n      );\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"x\",\n        bordesCanvasTodosVinculos.left\n      );\n\n      return {\n        width: anchoDiagrama+\"px\",\n        height: altoDiagrama+\"px\"\n      }\n      // this.$set(this.sizeCanvasTodosVinculos, \"width\", anchoDiagrama + \"px\");\n      // this.$set(this.sizeCanvasTodosVinculos, \"height\", altoDiagrama + \"px\");\n      \n      \n    },\n    estiloPosicionRelativaCanvas() {\n      let top = this.posicionCanvasTodosVinculos.y - this.centroVista.y;\n      let left = this.posicionCanvasTodosVinculos.x - this.centroVista.x;\n      return {\n        top: top + \"px\",\n        left: left + \"px\",\n      };\n    },\n  },\n  watch: {\n    todosNodos: function () {\n      if (this.todosNodos.length < 1) return;\n      this.crearImagenTodosVinculos();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n      this.crearImagenVinculosSeleccionado();\n    },\n    nodoSeleccionado: function () {\n      if(!this.callingPosiciones)this.crearImagenVinculosSeleccionado();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n\n    },\n    idNodoTarget() {\n      console.log(`Trazando todos vínculos teniendo en cuenta el target`);\n      this.crearImagenTodosVinculos();\n    },\n    factorZoom(){\n      this.debTrazarVinculos();\n    }\n  },\n  mounted() {\n    this.montado = true;\n    this.crearImagenTodosVinculos();\n    this.crearImagenPosiciones();\n    this.crearImagenVinculosSeleccionado();\n  },\n};\n</script>\n\n<style scoped>\n.canvas {\n  position: absolute;\n}\n\n#canvasTodosVinculos {\n  z-index: 0;\n}\n</style>"]}]}