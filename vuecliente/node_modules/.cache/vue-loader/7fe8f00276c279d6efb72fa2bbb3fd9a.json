{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/NodoConocimiento.vue?vue&type=style&index=0&id=614e7f6c&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/NodoConocimiento.vue","mtime":1674484905022},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojaWNvbm9Ob2RvIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIHBvaW50ZXItZXZlbnRzOiBub25lOwogIHdpZHRoOiA1NSU7CiAgaGVpZ2h0OiA1NSU7CiAgei1pbmRleDogMTsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKICBib3JkZXItcmFkaXVzOiA1MCU7Cn0KCiNpY29ub05vZG8gaW1nIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0KI2ljb25vTm9kby5kZU5vZG9TZWxlY2Npb25hZG8gaW1nIHsKICBmaWx0ZXI6IHZhcigtLWZpbHRyb0JsYW5jbyk7Cn0KLm5vZG9Db25vY2ltaWVudG8gewogIHdpZHRoOiA2MHB4OwogIGhlaWdodDogNjBweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7CiAgY3Vyc29yOiBwb2ludGVyOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBwb2ludGVyLWV2ZW50czogYWxsOwp9Ci5ub2RvQ29ub2NpbWllbnRvOm5vdCguZGVOb2RvU2VsZWNjaW9uYWRvKSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjM0OSk7Cn0KLm5vZG9Db25vY2ltaWVudG8uZGVOb2RvU2VsZWNjaW9uYWRvIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hdGxhc0Nvbm9jaW1pZW50b1NlbGVjY2lvbik7Cn0KCiNib3RvbkFicmlyTWVudUN4IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOwoKICByaWdodDogLTQwcHg7Cn0KI3pvbmFBcnJhc3RyZSB7CiAgd2lkdGg6IDUwMHB4OwogIGhlaWdodDogNTAwcHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwp9Ci5zZWxlY2Npb25hZG8gewogIHotaW5kZXg6IDEwOwp9Ci5mYW50YXNtZWFkbyB7CiAgb3BhY2l0eTogMC4yOwp9CgouZXNjb25kaWRvIHsKICB2aXNpYmlsaXR5OiBoaWRkZW47Cn0KI25vbWJyZSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMTA1JTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgbGVmdDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItc3R5bGU6IHNvbGlkOwp9CgojbWVudUNvbnRleHR1YWwgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDExMCU7CiAgbGVmdDogMTEwJTsKICBtaW4td2lkdGg6IDE0MHB4OwogIHBhZGRpbmc6IDVweCAwcHg7CiAgei1pbmRleDogMTEwOwogIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzcsIDE3NywgMTU5KTsKICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMiksCiAgICAwIDFweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpOwp9Ci5ib3Rvbk1lbnVDeCB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGZvbnQtc2l6ZTogMTRweDsKICBwYWRkaW5nOiAxM3B4IDEwcHg7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgouaWNvbm9NZW51Q3ggewogIGhlaWdodDogMTNweDsKICBtYXJnaW46IDBweCA1cHg7Cn0KLnNlY2Npb25NZW51Q3ggewogIGZvbnQtc2l6ZTogMTVweDsKICBjb2xvcjogcmdiKDcxLCA3MSwgNzEpOwogIHBhZGRpbmc6IDVweDsKfQouYm90b25NZW51Q3g6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6IGdyYXk7Cn0KLnNlbGVjdG9yU3Vic2VjY2lvbk1lbnVDeCB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Cgouc3Vic2VjY2lvbk1lbnVDeCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGxlZnQ6IDEwMCU7CiAgdG9wOiAwJTsKICBkaXNwbGF5OiBub25lOwogIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzcsIDE3NywgMTU5KTsKfQouc2VsZWN0b3JTdWJzZWNjaW9uTWVudUN4OmhvdmVyID4gLnN1YnNlY2Npb25NZW51Q3ggewogIGRpc3BsYXk6IGJsb2NrOwp9CiNvcGNpb25lc1RpcG9Ob2RvIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGdhcDogMjBweDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIHBhZGRpbmc6IDEwcHggMjBweDsKfQoKLmN1YWRyaXRvRGVzY3JpcGNpb25Ob2RvIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogMTA0JTsKICB3aWR0aDogMTcwcHg7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOwogIGJhY2tncm91bmQtY29sb3I6ICNmZmRiYWY7CiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDAsIDAsIDQ0KTsKICBib3JkZXItcmFkaXVzOiAxMHB4Owp9CgouZGVzY3JpcGNpb25Ob2RvIHsKICBmb250LXNpemU6IDE1cHg7CiAgcGFkZGluZzogMTBweDsKICBtaW4taGVpZ2h0OiAzMHB4OwogIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKfQouYm90b25BYnJpck5vZG8gewogIGRpc3BsYXk6IGJsb2NrOwogIHdpZHRoOiAyNHB4OwogIGhlaWdodDogMjRweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgbWFyZ2luOiAxMHB4IGF1dG87CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIHBhZGRpbmc6IDEwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNCwgMTc2LCAxMzApOwp9Ci5ib3RvbkFicmlyTm9kbzpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5MCwgMTQ1LCA4OCk7Cn0KCi5pbWFnZW5UYXJnZXQgewogIHdpZHRoOiAxODAlOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IC00MCU7CiAgbGVmdDogLTQwJTsKICB6LWluZGV4OiAxMDsKICBvcGFjaXR5OiAwLjg2Owp9Ci5pbWFnZW5UYXJnZXQ6aG92ZXIgewogIG9wYWNpdHk6IDAuMTY7Cn0KLmltYWdlbkFwcmVuZGlkbyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGJhY2tncm91bmQtY29sb3I6IHJnYigzMywgMTY4LCAzMyk7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9CiNib3RvbkNlcnJhckRlc2NyaXBjaW9uIHsKICBsZWZ0OiAxMDElOwogIGJvdHRvbTogMTAxJTsKICB3aWR0aDogMTVweDsKICBoZWlnaHQ6IDE1cHg7Cn0KLmZ1ZXJ6YU1vdmltaWVudG8gewogIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDUwJTsKICBsZWZ0OiA1MCU7CiAgdHJhbnNmb3JtLW9yaWdpbjogMCUgMCU7CiAgei1pbmRleDogMjAwOwp9CiNmdWVyemFDZW50cm9NYXNhIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlOwp9CiNmdWVyemFDb2xpc2lvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwp9Ci5mbGVjaGl0YUZ1ZXJ6YSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTAlOwogIGxlZnQ6IDEwMCU7CiAgd2lkdGg6IDFweDsKICBoZWlnaHQ6IDFweDsKICBib3JkZXI6IDVweCBzb2xpZCB0cmFuc3BhcmVudDsKICBib3JkZXItbGVmdC1jb2xvcjogYmxhY2s7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7Cn0K"},{"version":3,"sources":["NodoConocimiento.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA47BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NodoConocimiento.vue","sourceRoot":"src/components/atlasConocimiento","sourcesContent":["<template>\n  <div\n    class=\"nodoConocimiento\"\n    :style=\"[estiloPosicion, estiloSize, estiloZeta, estiloBolita]\"\n    :class=\"{ escondido, deNodoSeleccionado: seleccionado, fantasmeado }\"\n    @click.ctrl.capture=\"stopProp\"\n    @mouseup.left=\"guardarPosicion\"\n    @mousemove=\"arrastrarNodo\"\n    @mouseleave=\"arrastrandoNodo = false\"\n    @dblclick=\"abrirPaginaNodo\"\n  >\n    <div\n      class=\"boton\"\n      id=\"botonAbrirMenuCx\"\n      @click.stop=\"$emit('abroMenuContextual')\"\n      v-show=\"seleccionado && !menuCx\"\n    >\n      <img src=\"@/assets/iconos/ellipsisVertical.svg\" alt=\"Opciones\" />\n    </div>\n    <div id=\"zonaArrastre\" v-show=\"arrastrandoNodo\"></div>\n\n    <div\n      v-if=\"usuarioSuperadministrador\"\n      v-show=\"configuracionAtlas.posicionando\"\n      id=\"fuerzaCentroMasa\"\n      class=\"fuerzaMovimiento\"\n      :style=\"[estiloFuerzaCentroMasa]\"\n    >\n      <div class=\"flechitaFuerza\"></div>\n    </div>\n    <div\n      v-if=\"usuarioSuperadministrador\"\n      v-show=\"configuracionAtlas.posicionando\"\n      id=\"fuerzaColision\"\n      class=\"fuerzaMovimiento\"\n      :style=\"[estiloFuerzaColision]\"\n    >\n      <div class=\"flechitaFuerza\"></div>\n    </div>\n\n    <div\n      id=\"iconoNodo\"\n      :class=\"{\n        deNodoSeleccionado: seleccionado,\n        previoDeSeleccionado,\n      }\"\n    >\n      <img\n        v-if=\"esteNodo.tipoNodo === 'concepto'\"\n        src=\"@/assets/iconos/atlas/lightbulbEmpty.svg\"\n      />\n      <img v-else src=\"@/assets/iconos/atlas/fireSolid.svg\" />\n    </div>\n    <img\n      src=\"@/assets/iconos/success.png\"\n      alt=\"Aprendido\"\n      title=\"Este tema ya ha sido aprendido\"\n      v-show=\"nodoAprendido && modoAtlas === 'estudiante'\"\n      :style=\"[\n        {\n          width: parseInt(20 * factorZoom) + 'px',\n          left: parseInt(-10 * factorZoom) + 'px',\n          top: parseInt(-10 * factorZoom) + 'px',\n        },\n      ]\"\n      class=\"imagenAprendido\"\n    />\n    <img\n      src=\"@/assets/iconos/target.png\"\n      alt=\"Objetivo\"\n      v-show=\"esTarget\"\n      class=\"imagenTarget\"\n    />\n\n    <div\n      id=\"menuContextual\"\n      v-show=\"menuCx\"\n      @mousedown.stop=\"\"\n      @mouseup.stop=\"\"\n    >\n      <div class=\"seccionMenuCx\" @click=\"abrirPaginaNodo\">\n        {{ esteNodo.nombre }}\n      </div>\n      <div\n        id=\"opcionesTipoNodo\"\n        :class=\"{ deshabilitado: settingTipoNodo }\"\n        v-if=\"usuarioExpertoNodo\"\n      >\n        <div\n          class=\"boton selector\"\n          :class=\"{ activo: esteNodo.tipoNodo === 'concepto' }\"\n          @click.stop=\"setTipoNodo('concepto')\"\n        >\n          <img src=\"@/assets/iconos/atlas/lightbulbEmpty.svg\" alt=\"Concepto\" />\n        </div>\n\n        <div\n          class=\"boton selector\"\n          :class=\"{ activo: esteNodo.tipoNodo === 'skill' }\"\n          @click.stop=\"setTipoNodo('skill')\"\n        >\n          <img src=\"@/assets/iconos/atlas/fireSolid.svg\" alt=\"Habilidad\" />\n        </div>\n      </div>\n      <loading v-show=\"settingTipoNodo\" style=\"margin: 5px auto\" />\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"\n          usuarioSuperadministrador == true || usuarioAdministradorAtlas == true\n        \"\n        @click.stop=\"eliminarEsteNodo\"\n      >\n        Eliminar\n      </div>\n      <div\n        class=\"botonMenuCx\"\n        :class=\"{ deshabilitado: esTarget }\"\n        @click.stop=\"$emit('mePongoEnMira')\"\n      >\n        <img\n          class=\"iconoMenuCx\"\n          src=\"@/assets/iconos/target.png\"\n          alt=\"mira\"\n          v-show=\"!enviandoQueryTarget\"\n        />\n        <loading v-show=\"enviandoQueryTarget\" />\n        Poner en la mira\n      </div>\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioSuperadministrador\"\n        @click.stop=\"copiarId\"\n      >\n        {{ esteNodo.id }}\n      </div>\n      <div\n        class=\"botonMenuCx selectorSubseccionMenuCx\"\n        v-show=\"\n          yo.atlas && yo.atlas.colecciones && yo.atlas.colecciones.length > 0\n        \"\n      >\n        <img\n          src=\"@/assets/iconos/userNodes.png\"\n          alt=\"nodos\"\n          class=\"iconoMenuCx\"\n        />\n        Colecciones\n        <div class=\"subseccionMenuCx\">\n          <div\n            class=\"botonMenuCx\"\n            v-for=\"coleccion of yo.atlas.colecciones\"\n            :key=\"coleccion.id\"\n            @click.stop=\"toggleNodoEnColeccion(coleccion.id)\"\n          >\n            <img\n              src=\"@/assets/iconos/check.svg\"\n              alt=\"Check\"\n              style=\"height: 12px; margin-right: 10px; border-radius: 50%\"\n              v-show=\"togglingNodoEnColeccion!=coleccion.id\"\n              :style=\"[\n                {\n                  backgroundColor: coleccion.idsNodos.includes(esteNodo.id)\n                    ? 'var(--atlasVerde)'\n                    : '',\n                },\n              ]\"\n            />\n            <loading v-show=\"togglingNodoEnColeccion===coleccion.id\" />\n            {{ coleccion.nombre }}\n          </div>\n        </div>\n      </div>\n      <!-- <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioLogeado && !esNodoObjetivo\"\n        @click.stop=\"setNodoObjetivo(true)\"\n      >\n        Añadir a objetivos\n      </div>\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioLogeado && esNodoObjetivo\"\n        @click.stop=\"setNodoObjetivo(false)\"\n      >\n        Retirar de objetivos\n      </div> -->\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioLogeado\"\n        @click.stop=\"toggleAprendido\"\n      >\n        <img\n          src=\"@/assets/iconos/check.svg\"\n          alt=\"check\"\n          class=\"iconoMenuCx\"\n          style=\"border-radius: 50%\"\n          v-show=\"!togglingAprendido\"\n          :style=\"[\n            {\n              backgroundColor: nodoAprendido\n                ? 'var(--atlasConocimientoCheck)'\n                : '',\n            },\n          ]\"\n        />\n        <loading v-show=\"togglingAprendido\" texto=\"\" />\n        {{ nodoAprendido ? \"Desm\" : \"M\" }}arcar como aprendido\n      </div>\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioLogeado\"\n        @click.stop=\"marcarEstudiado\"\n        v-show=\"aprendible\"\n        :class=\"{ deshabilitado: enviandoFechaEstudiado }\"\n      >\n        <img\n          src=\"@/assets/iconos/readme.svg\"\n          alt=\"Read\"\n          class=\"iconoMenuCx\"\n          v-show=\"!enviandoFechaEstudiado\"\n        />\n        <loading v-show=\"enviandoFechaEstudiado\" texto=\"\" />\n        Estudiado\n      </div>\n      <div\n        class=\"botonMenuCx\"\n        v-if=\"usuarioLogeado\"\n        @click.stop=\"setPeriodoRepaso\"\n        v-show=\"nodoEstudiado && !nodoAprendido\"\n        :class=\"{ deshabilitado: creandoIteracionRepaso }\"\n      >\n        <img\n          src=\"@/assets/iconos/clock.svg\"\n          alt=\"Reloj\"\n          class=\"iconoMenuCx\"\n        />Periodo de repaso\n        <span></span>\n        <loading texto=\"\" v-show=\"creandoIteracionRepaso\" />\n      </div>\n      <template\n        v-if=\"\n          nodoSeleccionado &&\n          nodoSeleccionado.id != esteNodo.id &&\n          (usuarioSuperadministrador == true ||\n            usuarioAdministradorAtlas == true)\n        \"\n      >\n        <div class=\"seccionMenuCx\">{{ nodoSeleccionado.nombre }}</div>\n        <div\n          class=\"botonMenuCx\"\n          @click.stop=\"crearVinculo('continuacion', nodoSeleccionado, esteNodo)\"\n        >\n          Continua aquí\n        </div>\n        <div\n          class=\"botonMenuCx\"\n          @click.stop=\"crearVinculo('continuacion', esteNodo, nodoSeleccionado)\"\n        >\n          Continua desde aquí\n        </div>\n        <div\n          class=\"botonMenuCx\"\n          v-show=\"esteNodo.vinculos.some((v) => v.idRef == nodoSeleccionado.id)\"\n          @click.stop=\"eliminarVinculo(esteNodo, nodoSeleccionado)\"\n        >\n          Desconectar\n        </div>\n      </template>\n    </div>\n    <div\n      @click=\"clickCartelNombre\"\n      id=\"nombre\"\n      :style=\"[estiloCartelNombre]\"\n      ref=\"nombre\"\n    >\n      {{ callingPosiciones ? esteNodo.puntaje : esteNodo.nombre }}\n    </div>\n\n    <div\n      class=\"cuadritoDescripcionNodo\"\n      v-if=\"esteNodo && esteNodo.descripcion\"\n      v-show=\"seleccionado && !callingPosiciones && mostrarDescripcion\"\n    >\n      <div class=\"descripcionNodo\">{{ esteNodo.descripcion }}</div>\n      <img\n        @click.stop=\"abrirPaginaNodo\"\n        src=\"@/assets/iconos/ir.png\"\n        alt=\"Ir\"\n        title=\"Abrir este nodo\"\n        class=\"botonAbrirNodo\"\n      />\n      <div\n        class=\"botonEquis\"\n        @click.stop=\"mostrarDescripcion = false\"\n        @mousedown.stop=\"\"\n        @mouseup.stop=\"\"\n        id=\"botonCerrarDescripcion\"\n      >\n        <div class=\"linea1\"></div>\n        <div class=\"linea2\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport Loading from \"../utilidades/Loading.vue\";\nimport { fragmentoDatoNodoConocimiento } from \"./fragsAtlasConocimiento\";\nimport { QUERY_DATOS_USUARIO_NODOS } from \"./AtlasConocimiento.vue\";\nexport default {\n  components: { Loading },\n  name: \"NodoConocimiento\",\n  props: {\n    esteNodo: {\n      type: Object,\n      required: true,\n    },\n    datosUsuarioEsteNodo: {\n      type: Object,\n    },\n    enviandoQueryTarget: Boolean,\n    esNodoObjetivo: Boolean,\n    esTarget: Boolean,\n    yo: Object,\n    modoAtlas: String,\n    escondido: Boolean,\n    centroVista: Object,\n    idNodoMenuCx: String,\n    idsNodosAprendidos: Array,\n    idsNodosEstudiados: Array,\n    idsNodosFrescos: Array,\n    idsNodosPresentesCabeza: Array,\n    nodoSeleccionado: Object,\n    seleccionado: Boolean,\n    fantasmeado: Boolean,\n    previoDeSeleccionado: Boolean,\n    usuarioAdministradorAtlas: {\n      type: Boolean,\n      default: false,\n    },\n    esquinasDiagrama: Object,\n    callingPosiciones: Boolean,\n    factorZoom: Number,\n    configuracionAtlas: Object,\n  },\n  data() {\n    return {\n      arrastrandoNodo: false,\n      nombreEditable: false,\n      nombreEditandose: false,\n\n      baseSize: {\n        x: 50,\n        y: 50,\n      },\n\n      posicion: {\n        x: 0,\n        y: 0,\n      },\n      togglingNodoEnColeccion: null,\n\n      estiloNombreBase: {\n        minWidth: 20,\n        fontSize: 12,\n        minHeight: 10,\n        padding: 5,\n        borderRadius: 4,\n      },\n      mostrarDescripcion: false,\n      creandoIteracionRepaso: false,\n\n      enviandoFechaEstudiado: false,\n      togglingAprendido: false,\n\n      settingTipoNodo: false,\n    };\n  },\n  computed: {\n    menuCx() {\n      return this.idNodoMenuCx == this.esteNodo.id ? true : false;\n    },\n    size() {\n      let fSize = Object.assign({}, this.baseSize);\n      if (this.seleccionado) {\n        let baseX = this.baseSize.x;\n        let baseY = this.baseSize.y;\n        fSize.x = Math.round(baseX * 1.1);\n        fSize.y = Math.round(baseY * 1.1);\n      }\n      return { ...fSize };\n    },\n    estiloPosicion() {\n      //Posicion ajustada a las esquinas del diagrama:\n      const posXAjustada = this.posicion.x - this.esquinasDiagrama.x1;\n      const posYAjustada = this.posicion.y - this.esquinasDiagrama.y1;\n\n      //Posicion absoluta\n      const posY = Math.round(\n        (posYAjustada - this.size.y / 2) * this.factorZoom\n      );\n      const posX = Math.round(\n        (posXAjustada - this.size.x / 2) * this.factorZoom\n      );\n\n      //Ajustar respecto del centro de la vista\n      // posY -= this.centroVista.y;\n      // posX -= this.centroVista.x;\n      return {\n        top: posY + \"px\",\n        left: posX + \"px\",\n      };\n    },\n    estiloZeta() {\n      let valorZ = 0;\n      if (this.arrastrandoNodo || this.seleccionado) {\n        valorZ = 10;\n      }\n      if (this.menuCx) {\n        valorZ = 11;\n      }\n      return {\n        zIndex: valorZ,\n      };\n    },\n    estiloSize() {\n      return {\n        width: this.size.x * this.factorZoom + \"px\",\n        height: this.size.y * this.factorZoom + \"px\",\n      };\n    },\n    permisosUsuario: function () {\n      return this.$store.state.usuario.permisos;\n    },\n    aprendible() {\n      if (!this.esteNodo.vinculos.some((v) => v.rol == \"target\")) {\n        return true;\n      }\n      var idsNecesarios = this.esteNodo.vinculos\n        .filter((v) => v.rol == \"target\")\n        .map((v) => v.idRef);\n      return idsNecesarios.every((id) =>\n        this.idsNodosPresentesCabeza.includes(id)\n      );\n    },\n    nodoAprendido() {\n      return this.idsNodosAprendidos.includes(this.esteNodo.id);\n    },\n    nodoEstudiado() {\n      return this.idsNodosEstudiados.includes(this.esteNodo.id);\n    },\n    nodoRepasar() {\n      return (\n        !this.idNodoAprendido &&\n        this.nodoEstudiado &&\n        !this.idsNodosFrescos.includes(this.esteNodo.id)\n      );\n    },\n    nodoPresenteCabeza() {\n      return this.idsNodosPresentesCabeza.includes(this.esteNodo.id);\n    },\n    estiloCartelNombre() {\n      var bColor = \"var(--atlasConocimientoOff)\";\n      var color = \"black\";\n      if (this.modoAtlas === \"estudiante\") {\n        if (this.nodoPresenteCabeza) {\n          bColor = \"var(--atlasConocimientoCheck)\";\n        } else if (this.nodoRepasar) {\n          bColor = \"var(--atlasConocimientoRepaso)\";\n        } else if (this.aprendible) {\n          bColor = \"var(--atlasConocimientoAvailable)\";\n        } else {\n          color = \"#313131\";\n        }\n      } else if (this.modoAtlas === \"experto\") {\n        if (this.usuarioExpertoNodo) {\n          bColor = \"var(--atlasConocimientoCheck)\";\n        }\n      }\n\n      return {\n        backgroundColor: bColor,\n        color,\n        minWidth:\n          parseInt(this.estiloNombreBase.minWidth * this.factorZoom) + \"px\",\n        fontSize:\n          parseInt(this.estiloNombreBase.fontSize * this.factorZoom) + \"px\",\n        minHeight:\n          parseInt(this.estiloNombreBase.minHeight * this.factorZoom) + \"px\",\n        padding:\n          parseInt(this.estiloNombreBase.padding * this.factorZoom) + \"px\",\n        borderRadius:\n          parseInt(this.estiloNombreBase.borderRadius * this.factorZoom) + \"px\",\n      };\n    },\n    usuarioExpertoNodo() {\n      if (!this.usuario || !this.usuario.id) return false;\n      return this.esteNodo.expertos.includes(this.usuario.id);\n    },\n    estiloFuerzaCentroMasa() {\n      return {\n        width:\n          Math.round(this.esteNodo.fuerzaCentroMasa.fuerza * this.factorZoom) +\n          \"px\",\n        height: Math.round(3 * this.factorZoom) + \"px\",\n        transform:\n          \"rotate(\" + this.esteNodo.fuerzaCentroMasa.direccion + \"rad)\",\n      };\n    },\n    estiloFuerzaColision() {\n      return {\n        width:\n          Math.round(this.factorZoom * this.esteNodo.fuerzaColision.fuerza) +\n          \"px\",\n        height: Math.round(3 * this.factorZoom) + \"px\",\n        transform: \"rotate(\" + this.esteNodo.fuerzaColision.direccion + \"rad)\",\n      };\n    },\n    estiloBolita() {\n      let border = \"2px solid transparent\";\n      let backgroundColor = \"rgb(195 195 195)\";\n\n      if (this.previoDeSeleccionado) {\n        border = \"2px solid var(--atlasConocimientoSeleccion)\";\n        backgroundColor = \"rgb(195 195 195)\";\n      }\n      if (this.seleccionado) {\n        border = \"2px solid transparent\";\n        backgroundColor = \"var(--atlasConocimientoSeleccion)\";\n      }\n\n      return {\n        border,\n        backgroundColor,\n      };\n    },\n  },\n  methods: {\n    setTipoNodo(nuevoTipoNodo) {\n      if (!this.usuarioExpertoNodo) {\n        return;\n      }\n\n      if (this.esteNodo.tipoNodo === nuevoTipoNodo) {\n        console.log(\"Operación innecesaria\");\n        return;\n      }\n      this.settingTipoNodo = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!, $nuevoTipoNodo: String!) {\n              setTipoNodo(idNodo: $idNodo, nuevoTipoNodo: $nuevoTipoNodo) {\n                id\n                tipoNodo\n              }\n            }\n          `,\n          variables: {\n            idNodo: this.esteNodo.id,\n            nuevoTipoNodo,\n          },\n        })\n        .then(() => {\n          this.settingTipoNodo = false;\n        })\n        .catch((error) => {\n          this.settingTipoNodo = false;\n\n          console.log(`Error: ${error}`);\n        });\n    },\n    setPeriodoRepaso() {\n      const diasRepaso = parseInt(\n        Number(prompt(\"Introduce el periodo para repasar este tema (En días)\"))\n      );\n\n      if (diasRepaso < 1) {\n        console.log(\"Periodo ilegal\");\n        return;\n      }\n\n      var nuevoPeriodoRepaso = diasRepaso * 86400000;\n\n      this.enviandoOperacion = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!, $nuevoPeriodoRepaso: Int!) {\n              setPeriodoRepasoNodoConocimientoUsuario(\n                idNodo: $idNodo\n                nuevoPeriodoRepaso: $nuevoPeriodoRepaso\n              ) {\n                id\n                idNodo\n                periodoRepaso\n              }\n            }\n          `,\n          variables: {\n            idNodo: this.esteNodo.id,\n            nuevoPeriodoRepaso,\n          },\n        })\n        .then(() => {\n          this.enviandoOperacion = false;\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.enviandoOperacion = false;\n        });\n    },\n    clickCartelNombre(e) {\n      if (this.seleccionado) {\n        e.stopPropagation();\n        this.mostrarDescripcion = !this.mostrarDescripcion;\n      }\n    },\n    toggleAprendido() {\n      var nuevoEstadoAprendido = this.nodoAprendido ? false : true;\n      this.togglingAprendido = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!, $nuevoEstadoAprendido: Boolean!) {\n              setNodoAtlasAprendidoUsuario(\n                idNodo: $idNodo\n                nuevoEstadoAprendido: $nuevoEstadoAprendido\n              ) {\n                ...fragDatoNodoConocimiento\n              }\n            }\n            ${fragmentoDatoNodoConocimiento}\n          `,\n          variables: {\n            idNodo: this.esteNodo.id,\n            nuevoEstadoAprendido,\n          },\n        })\n        .then(({ data: { setNodoAtlasAprendidoUsuario } }) => {\n          console.log(\n            `${setNodoAtlasAprendidoUsuario.length} nodos modificados`\n          );\n\n          for (const res of setNodoAtlasAprendidoUsuario) {\n            console.log(`Nombre: ` + res.nombreNodo);\n          }\n\n          this.togglingAprendido = false;\n\n          const store = this.$apollo.provider.defaultClient;\n          const cache = store.readQuery({\n            query: QUERY_DATOS_USUARIO_NODOS,\n          });\n          var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n          var modificacionesRealizadas = false;\n          for (const datoNodo of setNodoAtlasAprendidoUsuario) {\n            if (!this.yo.atlas.datosNodos.some((dn) => dn.id === datoNodo.id)) {\n              console.log(\n                `No estaba en caché. Pushing ${JSON.stringify(datoNodo)}`\n              );\n              modificacionesRealizadas = true;\n              nuevoCache.yo.atlas.datosNodos.push(datoNodo);\n            }\n          }\n\n          if (modificacionesRealizadas) {\n            store.writeQuery({\n              query: QUERY_DATOS_USUARIO_NODOS,\n              data: nuevoCache,\n            });\n          }\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.togglingAprendido = false;\n        });\n    },\n    // setNodoObjetivo(nuevoEstadoObjetivo) {\n    //   this.$apollo\n    //     .mutate({\n    //       mutation: gql`\n    //         mutation ($idNodo: ID!, $nuevoEstadoObjetivo: Boolean!) {\n    //           setNodoObjetivo(\n    //             idNodo: $idNodo\n    //             nuevoEstadoObjetivo: $nuevoEstadoObjetivo\n    //           )\n    //         }\n    //       `,\n    //       variables: {\n    //         idNodo: this.esteNodo.id,\n    //         nuevoEstadoObjetivo,\n    //       },\n    //     })\n    //     .then(({ data: { setNodoObjetivo } }) => {\n    //       if (setNodoObjetivo) {\n    //         this.$emit(\"cambieEstadoObjetivo\", nuevoEstadoObjetivo);\n    //       }\n    //     });\n    // },\n    abrirPaginaNodo() {\n      if (\n        !this.aprendible &&\n        !this.usuarioSuperadministrador &&\n        this.modoAtlas === \"estudiante\"\n      )\n        return alert(\"¡Aún no puedes estudiar este nodo!\");\n      this.$router.push(\n        this.$route.path + \"/nodoConocimiento/\" + this.esteNodo.id\n      );\n    },\n    copiarId(e) {\n      let str = e.target.innerText.trim();\n      const el = document.createElement(\"textarea\");\n      el.value = str;\n      document.body.appendChild(el);\n      el.select();\n      document.execCommand(\"copy\");\n      document.body.removeChild(el);\n    },\n    eliminarEsteNodo() {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      this.$emit(\"eliminar\", this.esteNodo.id);\n    },\n    arrastrarNodo(e) {\n      if (!this.arrastrandoNodo) {\n        return;\n      }\n      //console.log(`mouse move en ${e.pageX}, ${e.pageY}`);\n      let posContenedor = document\n        .getElementById(\"contenedorNodos\")\n        .getBoundingClientRect();\n      let nuevoTop = Math.round(\n        (e.clientY - posContenedor.top) / this.factorZoom\n      );\n      let nuevoLeft = Math.round(\n        (e.clientX - posContenedor.left) / this.factorZoom\n      );\n      this.posicion.y = nuevoTop;\n      this.posicion.x = nuevoLeft;\n    },\n    guardarPosicion() {\n      if (!this.arrastrandoNodo) return;\n      this.$emit(\"cambioDePosicionManual\", this.esteNodo.id, {\n        x: this.posicion.x,\n        y: this.posicion.y,\n      });\n\n      this.arrastrandoNodo = false;\n    },\n    crearVinculo(tipo, nodoFrom, nodoTo) {\n      console.log(`Creando vinculo entre ${nodoFrom} y ${nodoTo}`);\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(\n        `creando un vinculo tipo ${tipo} entre ${nodoFrom.nombre} y ${nodoTo.nombre} `\n      );\n      this.$emit(\"creacionVinculo\", {\n        tipo,\n        idNodoFrom: nodoFrom.id,\n        idNodoTo: nodoTo.id,\n      });\n    },\n    eliminarVinculo(nodoFrom, nodoTo) {\n      console.log(`Desconectando`);\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      this.$emit(\"eliminacionVinculo\", {\n        idNodoFrom: nodoFrom.id,\n        idNodoTo: nodoTo.id,\n      });\n    },\n    stopProp(e) {\n      console.log(`Stopping`);\n      e.stopPropagation();\n    },\n    toggleNodoEnColeccion(idColeccion) {\n      if (!this.usuario || !this.usuario.id) {\n        return;\n      }\n\n      this.togglingNodoEnColeccion = idColeccion;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!, $idColeccion: ID!, $idUsuario: ID!) {\n              toggleNodoColeccionNodosAtlasConocimientoUsuario(\n                idNodo: $idNodo\n                idColeccion: $idColeccion\n                idUsuario: $idUsuario\n              ) {\n                id\n                idsNodos\n                nodos {\n                  id\n                  nombre\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodo: this.esteNodo.id,\n            idColeccion,\n            idUsuario: this.usuario.id,\n          },\n        })\n        .then(() => {\n          this.togglingNodoEnColeccion = null;\n        })\n        .catch((error) => {\n          this.togglingNodoEnColeccion = null;\n          console.log(`Error: ${error}`);\n        });\n    },\n    iniciarGestionRepasos() {\n      var elDatoNodo = this.yo.atlas.datosNodos.find(\n        (dn) =>\n          dn.idNodo === this.esteNodo.id && dn.iteracionesRepaso.length > 0\n      );\n      if (elDatoNodo) {\n        console.log(`Este nodo ya tenía repasos`);\n        this.$router.push({\n          name: \"ventanaRepasos\",\n          params: { idRepaso: elDatoNodo.id },\n        });\n      } else {\n        console.log(`Este nodo no tenía repasos. Creando`);\n        this.addIteracionRepaso();\n      }\n    },\n    addIteracionRepaso() {\n      console.log(`Enviando para add to lista repasos`);\n      this.creandoIteracionRepaso = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idUsuario: ID!, $idNodo: ID!) {\n              crearIteracionRepasoNodoConocimientoUsuario(\n                idUsuario: $idUsuario\n                idNodo: $idNodo\n              ) {\n                id\n                iteracionesRepaso {\n                  id\n                  intervalo\n                }\n              }\n            }\n          `,\n          variables: {\n            idUsuario: this.usuario.id,\n            idNodo: this.esteNodo.id,\n          },\n        })\n        .then(({ data: { crearIteracionRepasoNodoConocimientoUsuario } }) => {\n          this.creandoIteracionRepaso = false;\n          this.$router.push({\n            name: \"ventanaRepasos\",\n            params: {\n              idRepaso: crearIteracionRepasoNodoConocimientoUsuario.id,\n            },\n          });\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.creandoIteracionRepaso = false;\n        });\n    },\n    marcarEstudiado() {\n      if (!this.usuarioLogeado) {\n        return;\n      }\n\n      var fechaEstudiado = new Date();\n      // fechaEstudiado.setDate(7);\n\n      // fechaEstudiado.setHours(0);\n      // fechaEstudiado.setMinutes(0);\n      // fechaEstudiado.setSeconds(0);\n      // fechaEstudiado.setMilliseconds(0);\n\n      this.enviandoFechaEstudiado = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idUsuario: ID!, $idNodo: ID!, $fecha: Date!) {\n              setDateNodoConocimientoEstudiadoUsuario(\n                idUsuario: $idUsuario\n                idNodo: $idNodo\n                fecha: $fecha\n              ) {\n                ...fragDatoNodoConocimiento\n              }\n            }\n            ${fragmentoDatoNodoConocimiento}\n          `,\n          variables: {\n            idUsuario: this.usuario.id,\n            idNodo: this.esteNodo.id,\n            fecha: fechaEstudiado,\n          },\n        })\n        .then(({ data: { setDateNodoConocimientoEstudiadoUsuario } }) => {\n          this.enviandoFechaEstudiado = false;\n          if (\n            !this.yo.atlas.datosNodos.some(\n              (dn) => dn.id === setDateNodoConocimientoEstudiadoUsuario.id\n            )\n          ) {\n            console.log(\n              `No estaba en caché. Pushing ${JSON.stringify(\n                setDateNodoConocimientoEstudiadoUsuario\n              )}`\n            );\n            const store = this.$apollo.provider.defaultClient;\n            const cache = store.readQuery({\n              query: QUERY_DATOS_USUARIO_NODOS,\n            });\n            var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n            nuevoCache.yo.atlas.datosNodos.push(\n              setDateNodoConocimientoEstudiadoUsuario\n            );\n            store.writeQuery({\n              query: QUERY_DATOS_USUARIO_NODOS,\n              data: nuevoCache,\n            });\n          }\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.enviandoFechaEstudiado = false;\n        });\n    },\n  },\n  watch: {\n    esteNodo() {\n      this.posicion = { ...this.esteNodo.coords };\n    },\n  },\n  mounted() {\n    this.posicion = { ...this.esteNodo.autoCoords };\n  },\n};\n</script>\n\n<style scoped>\n#iconoNodo {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  width: 55%;\n  height: 55%;\n  z-index: 1;\n  pointer-events: none;\n  border-radius: 50%;\n}\n\n#iconoNodo img {\n  width: 100%;\n  height: 100%;\n}\n#iconoNodo.deNodoSeleccionado img {\n  filter: var(--filtroBlanco);\n}\n.nodoConocimiento {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-size: 100% 100%;\n  cursor: pointer;\n  position: absolute;\n  pointer-events: all;\n}\n.nodoConocimiento:not(.deNodoSeleccionado) {\n  background-color: rgba(128, 128, 128, 0.349);\n}\n.nodoConocimiento.deNodoSeleccionado {\n  background-color: var(--atlasConocimientoSeleccion);\n}\n\n#botonAbrirMenuCx {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n\n  right: -40px;\n}\n#zonaArrastre {\n  width: 500px;\n  height: 500px;\n  position: absolute;\n  transform: translate(-50%, -50%);\n}\n.seleccionado {\n  z-index: 10;\n}\n.fantasmeado {\n  opacity: 0.2;\n}\n\n.escondido {\n  visibility: hidden;\n}\n#nombre {\n  position: absolute;\n  top: 105%;\n  text-align: center;\n  left: 50%;\n  transform: translateX(-50%);\n  border-width: 1px;\n  border-style: solid;\n}\n\n#menuContextual {\n  position: absolute;\n  top: 110%;\n  left: 110%;\n  min-width: 140px;\n  padding: 5px 0px;\n  z-index: 110;\n  background-color: rgb(177, 177, 159);\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n}\n.botonMenuCx {\n  cursor: pointer;\n  font-size: 14px;\n  padding: 13px 10px;\n  display: flex;\n  align-items: center;\n}\n\n.iconoMenuCx {\n  height: 13px;\n  margin: 0px 5px;\n}\n.seccionMenuCx {\n  font-size: 15px;\n  color: rgb(71, 71, 71);\n  padding: 5px;\n}\n.botonMenuCx:hover {\n  background-color: gray;\n}\n.selectorSubseccionMenuCx {\n  position: relative;\n}\n\n.subseccionMenuCx {\n  position: absolute;\n  left: 100%;\n  top: 0%;\n  display: none;\n  background-color: rgb(177, 177, 159);\n}\n.selectorSubseccionMenuCx:hover > .subseccionMenuCx {\n  display: block;\n}\n#opcionesTipoNodo {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  align-items: center;\n  padding: 10px 20px;\n}\n\n.cuadritoDescripcionNodo {\n  position: absolute;\n  top: 50%;\n  left: 104%;\n  width: 170px;\n  transform: translateY(-50%);\n  background-color: #ffdbaf;\n  border: 1px solid rgb(0, 0, 44);\n  border-radius: 10px;\n}\n\n.descripcionNodo {\n  font-size: 15px;\n  padding: 10px;\n  min-height: 30px;\n  white-space: pre-wrap;\n}\n.botonAbrirNodo {\n  display: block;\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n  margin: 10px auto;\n  border-radius: 50%;\n  padding: 10px;\n  background-color: rgb(214, 176, 130);\n}\n.botonAbrirNodo:hover {\n  background-color: rgb(190, 145, 88);\n}\n\n.imagenTarget {\n  width: 180%;\n  position: absolute;\n  top: -40%;\n  left: -40%;\n  z-index: 10;\n  opacity: 0.86;\n}\n.imagenTarget:hover {\n  opacity: 0.16;\n}\n.imagenAprendido {\n  position: absolute;\n  background-color: rgb(33, 168, 33);\n  border-radius: 50%;\n}\n#botonCerrarDescripcion {\n  left: 101%;\n  bottom: 101%;\n  width: 15px;\n  height: 15px;\n}\n.fuerzaMovimiento {\n  background-color: black;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform-origin: 0% 0%;\n  z-index: 200;\n}\n#fuerzaCentroMasa {\n  background-color: blue;\n}\n#fuerzaColision {\n  background-color: red;\n}\n.flechitaFuerza {\n  position: absolute;\n  top: 50%;\n  left: 100%;\n  width: 1px;\n  height: 1px;\n  border: 5px solid transparent;\n  border-left-color: black;\n  transform: translate(-50%, -50%);\n}\n</style>"]}]}