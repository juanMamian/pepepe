{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/Canvases.vue","mtime":1643654906495},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCnZhciBkZWJvdW5jZSA9cmVxdWlyZSgiZGVib3VuY2UiKTsKCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkNhbnZhc2VzIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbW9udGFkbzogZmFsc2UsCgogICAgICBsYXBpejogbnVsbCwKICAgICAgcG9zaWNpb25DYW52YXNUb2Rvc1ZpbmN1bG9zOiB7CiAgICAgICAgdG9wOiAwLAogICAgICAgIGxlZnQ6IDAsCiAgICAgIH0sICAgICAgCiAgICAgIHBvc2ljaW9uQ2FudmFzQWN0aXZvOiB7CiAgICAgICAgeDogMCwKICAgICAgICB5OiAwLAogICAgICB9LAogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICBub2RvU2VsZWNjaW9uYWRvOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgaWQ6ICItMSIsCiAgICAgICAgICB2aW5jdWxvczogW10sCiAgICAgICAgfTsKICAgICAgfSwKICAgIH0sCiAgICBpZHNOZWNlc2FyaW9zUGFyYVRhcmdldDpBcnJheSwKICAgIG5vZG9SZWxldmFudGU6IFtPYmplY3RdLAogICAgaWROb2RvVGFyZ2V0OiBTdHJpbmcsCiAgICB0b2Rvc05vZG9zOiBBcnJheSwKICAgIGNlbnRyb1Zpc3RhOiBPYmplY3QsCiAgICBhY3R1YWxpemFyOiBOdW1iZXIsCgogICAgY2FsbGluZ1Bvc2ljaW9uZXM6Qm9vbGVhbiwKICAgIGZhY3Rvclpvb206TnVtYmVyLAogIH0sCiAgbWV0aG9kczogewogICAgY3JlYXJJbWFnZW5Qb3NpY2lvbmVzKCl7CiAgICAgIAogICAgICB0aGlzLmxhcGl6PXRoaXMuJHJlZnMuY2FudmFzUG9zaWNpb25lcy5nZXRDb250ZXh0KCIyZCIpCiAgICAgIHZhciBub2Rvc1JlbGV2YW50ZXMgPSB0aGlzLnRvZG9zTm9kb3M7CgogICAgICBpZih0aGlzLm5vZG9TZWxlY2Npb25hZG8gJiYgdGhpcy5ub2RvU2VsZWNjaW9uYWRvLmlkLmxlbmd0aD40KSBub2Rvc1JlbGV2YW50ZXM9W3RoaXMubm9kb1NlbGVjY2lvbmFkb107CiAgICAgIGlmIChub2Rvc1JlbGV2YW50ZXMgPD0gMSkgcmV0dXJuOwoKICAgICAgdGhpcy5sYXBpei5jYW52YXMud2lkdGg9cGFyc2VJbnQodGhpcy5zaXplQ2FudmFzVG9kb3NWaW5jdWxvcy53aWR0aCk7CiAgICAgIHRoaXMubGFwaXouY2FudmFzLmhlaWdodD1wYXJzZUludCh0aGlzLnNpemVDYW52YXNUb2Rvc1ZpbmN1bG9zLmhlaWdodCk7CiAgICAgIAogICAgICB0aGlzLmxhcGl6LmNsZWFyUmVjdCgKICAgICAgICAwLAogICAgICAgIDAsCiAgICAgICAgdGhpcy5sYXBpei5jYW52YXMud2lkdGgsCiAgICAgICAgdGhpcy5sYXBpei5jYW52YXMuaGVpZ2h0CiAgICAgICk7CgogICAgICB0aGlzLmxhcGl6LmxpbmVXaWR0aD0yOwogICAgICB0aGlzLmxhcGl6LmJlZ2luUGF0aCgpOwoKICAgICAgbm9kb3NSZWxldmFudGVzLmZvckVhY2gobm9kbz0+ewogICAgICAgIHRoaXMubGFwaXouYmVnaW5QYXRoKCk7CiAgICAgICAgdGhpcy5sYXBpei5zdHJva2VTdHlsZSA9IG5vZG8uc3R1Y2s/J3JlZCc6IiM5NzYxZDIiOwoKICAgICAgICB0aGlzLmxhcGl6Lm1vdmVUbyhub2RvLmNvb3Jkcy54IC10aGlzLnBvc2ljaW9uQ2FudmFzQWN0aXZvLngsIG5vZG8uY29vcmRzLnktdGhpcy5wb3NpY2lvbkNhbnZhc0FjdGl2by55KTsKICAgICAgICB0aGlzLmxhcGl6LmxpbmVUbyhub2RvLmNlbnRyb01hc2EueCAtIHRoaXMucG9zaWNpb25DYW52YXNBY3Rpdm8ueCwgbm9kby5jZW50cm9NYXNhLnkgLSB0aGlzLnBvc2ljaW9uQ2FudmFzQWN0aXZvLnkpOwogICAgICAgIHRoaXMubGFwaXouYXJjKG5vZG8uY2VudHJvTWFzYS54IC0gdGhpcy5wb3NpY2lvbkNhbnZhc0FjdGl2by54LCBub2RvLmNlbnRyb01hc2EueSAtIHRoaXMucG9zaWNpb25DYW52YXNBY3Rpdm8ueSwgMTAsIDAsIE1hdGguUEkqMik7CiAgICAgICAgdGhpcy5sYXBpei5zdHJva2UoKTsgICAgIAogICAgIH0pCgogICAgIHRoaXMubGFwaXouYmVnaW5QYXRoKCk7ICAgIAogICAgIG5vZG9zUmVsZXZhbnRlcy5mb3JFYWNoKG5vZG89PnsKICAgICAgIGlmKCFub2RvLnN0dWNrKXsKICAgICAgICB0aGlzLmxhcGl6LnN0cm9rZVN0eWxlID0gJ2JsdWUnOwogICAgICAgIGxldCBub2RveD1ub2RvLmNvb3Jkcy54IC10aGlzLnBvc2ljaW9uQ2FudmFzQWN0aXZvLng7CiAgICAgICAgbGV0IG5vZG95PW5vZG8uY29vcmRzLnktdGhpcy5wb3NpY2lvbkNhbnZhc0FjdGl2by55CiAgICAgICAgdGhpcy5sYXBpei5tb3ZlVG8obm9kb3gsIG5vZG95KTsKICAgICAgICAKICAgICAgICBsZXQgdmVjdG9yeD0oTWF0aC5jb3Mobm9kby5hbmd1bG8pKjEwMCk7CiAgICAgICAgbGV0IHZlY3Rvcnk9KE1hdGguc2luKG5vZG8uYW5ndWxvKSoxMDApOwogICAgICAgIAogICAgICAgIHRoaXMubGFwaXoubGluZVRvKG5vZG94K3ZlY3RvcngsIG5vZG95K3ZlY3RvcnkpOwogICAgICAgfQogICAgICAgCiAgICAgfSkKICAgICB0aGlzLmxhcGl6LnN0cm9rZSgpOwoKICAgIH0sCiAgICBjcmVhckltYWdlblRvZG9zVmluY3Vsb3M6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG5vZG9zUmVsZXZhbnRlcz10aGlzLnRvZG9zTm9kb3M7CiAgICAgIGlmICh0aGlzLmlkTm9kb1RhcmdldCkgewogICAgICAgIG5vZG9zUmVsZXZhbnRlcyA9IHRoaXMudG9kb3NOb2Rvcy5maWx0ZXIobj0+dGhpcy5pZHNOZWNlc2FyaW9zUGFyYVRhcmdldC5pbmNsdWRlcyhuLmlkKSB8fCBuLmlkPT10aGlzLmlkTm9kb1RhcmdldCk7CiAgICAgIH0KCiAgICAgIGlmIChub2Rvc1JlbGV2YW50ZXMubGVuZ3RoIDw9IDEpIHJldHVybiAKCiAgICAgIHZhciBsYXBpeiA9IHRoaXMuJHJlZnMuY2FudmFzVG9kb3NWaW5jdWxvcy5nZXRDb250ZXh0KCIyZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgbGFwaXouY2FudmFzLndpZHRoID0gdGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueDIgLSB0aGlzLmVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcy54MTsKICAgICAgbGFwaXouY2FudmFzLmhlaWdodCA9IHRoaXMuZXNxdWluYXNDYW52YXNUb2Rvc1ZpbmN1bG9zLnkyIC0gdGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueTE7CgogICAgICBjb25zdCBwb3NpY2lvbkNhbnZhcz17CiAgICAgICAgeDogdGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueDEsCiAgICAgICAgeTogdGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueTEsCiAgICAgIH0KICAgICAgbGFwaXoubGluZVdpZHRoID0gMTsKICAgICAgbGFwaXouY2xlYXJSZWN0KDAsIDAsIGxhcGl6LmNhbnZhcy53aWR0aCwgbGFwaXouY2FudmFzLmhlaWdodCk7CiAgICAgIGxhcGl6LmJlZ2luUGF0aCgpOwogICAgICBsYXBpei5zdHJva2VTdHlsZSA9ICIjYjNiM2IzIjsKICAgICAgZm9yIChsZXQgbm9kbyBvZiBub2Rvc1JlbGV2YW50ZXMpIHsKICAgICAgICBmb3IgKGxldCB2aW5jdWxvIG9mIG5vZG8udmluY3Vsb3MpIHsKICAgICAgICAgIGlmICghbm9kb3NSZWxldmFudGVzLnNvbWUoKG4pID0+IG4uaWQgPT0gdmluY3Vsby5pZFJlZikpIGNvbnRpbnVlOwogICAgICAgICAgaWYgKHZpbmN1bG8ucm9sID09ICJzb3VyY2UiKSB7CiAgICAgICAgICAgIHRoaXMuZGlidWphckxpbmVhRW50cmVOb2RvcygKICAgICAgICAgICAgICBub2RvLAogICAgICAgICAgICAgIG5vZG9zUmVsZXZhbnRlcy5maW5kKChub2RvKSA9PiBub2RvLmlkID09IHZpbmN1bG8uaWRSZWYpLAogICAgICAgICAgICAgIGxhcGl6LAogICAgICAgICAgICAgIHBvc2ljaW9uQ2FudmFzCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGxhcGl6LnN0cm9rZSgpOwogICAgfSwKICAgIGNyZWFySW1hZ2VuVmluY3Vsb3NTZWxlY2Npb25hZG86IGZ1bmN0aW9uICgpIHsKCiAgICAgIHZhciBub2Rvc1JlbGV2YW50ZXMgPSB0aGlzLnRvZG9zTm9kb3M7CgogICAgICBpZiAodGhpcy5pZE5vZG9UYXJnZXQpIHsKICAgICAgICBub2Rvc1JlbGV2YW50ZXMgPSB0aGlzLnRvZG9zTm9kb3MuZmlsdGVyKG49PnRoaXMuaWRzTmVjZXNhcmlvc1BhcmFUYXJnZXQuaW5jbHVkZXMobi5pZCkgfHwgbi5pZD09dGhpcy5pZE5vZG9UYXJnZXQpOwogICAgICB9CgogICAgICBpZiAobm9kb3NSZWxldmFudGVzIDw9IDEpIHJldHVybjsKCiAgICAgIHZhciBsYXBpeiA9IHRoaXMuJHJlZnMuY2FudmFzVmluY3Vsb3NTZWxlY2Npb25hZG8uZ2V0Q29udGV4dCgiMmQiKTsKCiAgICAgIGxhcGl6LmNhbnZhcy53aWR0aCA9IHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby54MiAtIHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby54MTsKICAgICAgbGFwaXouY2FudmFzLmhlaWdodCA9IHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby55MiAtIHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby55MTsgCgogICAgICBjb25zdCBwb3NpY2lvbkNhbnZhcz17CiAgICAgICAgeDogdGhpcy5lc3F1aW5hc0NhbnZhc1ZpbmN1bG9zU2VsZWNjaW9uYWRvLngxLAogICAgICAgIHk6IHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby55MSwKICAgICAgfQoKICAgICAgbGFwaXouY2xlYXJSZWN0KAogICAgICAgIDAsCiAgICAgICAgMCwKICAgICAgICBsYXBpei5jYW52YXMud2lkdGgsCiAgICAgICAgbGFwaXouY2FudmFzLmhlaWdodAogICAgICApOwoKICAgICAgCgogICAgICBpZiAobm9kb3NSZWxldmFudGVzLnNvbWUoKG4pID0+IG4uaWQgPT0gdGhpcy5ub2RvU2VsZWNjaW9uYWRvLmlkKSkgewogICAgICAgIC8vTGluZWFzIHZlcmRlcyBkZSBwb3NpYmxpZGFkZXMKICAgICAgICBsYXBpei5iZWdpblBhdGgoKTsKICAgICAgICBsYXBpei5saW5lV2lkdGggPSAyOwogICAgICAgIGxhcGl6LnN0cm9rZVN0eWxlID0gIiMwMDgwMDAiOwoKICAgICAgICAvL0xpbmVhcyB2ZXJkZXMgZGUgc2FsaWRhCiAgICAgICAgZm9yIChsZXQgdmluY3VsbyBvZiB0aGlzLm5vZG9TZWxlY2Npb25hZG8udmluY3Vsb3MpIHsKICAgICAgICAgIGlmICghbm9kb3NSZWxldmFudGVzLnNvbWUoKG4pID0+IG4uaWQgPT0gdmluY3Vsby5pZFJlZikpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coYEFMRVJUQS4gVmluY3VsbyBhICR7dmluY3Vsby5pZFJlZn0gaHVlcmZhbm9gKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmluY3Vsby5yb2wgPT0gInNvdXJjZSIpIHsKICAgICAgICAgICAgbGV0IG90cm9Ob2RvID0gbm9kb3NSZWxldmFudGVzLmZpbmQoKG4pID0+IG4uaWQgPT0gdmluY3Vsby5pZFJlZik7CiAgICAgICAgICAgIHRoaXMuZGlidWphckxpbmVhRW50cmVOb2Rvcyh0aGlzLm5vZG9TZWxlY2Npb25hZG8sIG90cm9Ob2RvLCBsYXBpeiwgcG9zaWNpb25DYW52YXMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsYXBpei5zdHJva2UoKTsKICAgICAgICAvL0xpbmVhcyByb2phcyBkZSBkZXBlbmRlbmNpYXMKCiAgICAgICAgbGFwaXouYmVnaW5QYXRoKCk7CiAgICAgICAgbGFwaXouc3Ryb2tlU3R5bGUgPSAiI2I4MGUwZSI7CiAgICAgICAgZm9yIChsZXQgdmluY3VsbyBvZiB0aGlzLm5vZG9TZWxlY2Npb25hZG8udmluY3Vsb3MpIHsKICAgICAgICAgIGlmICghbm9kb3NSZWxldmFudGVzLnNvbWUoKG4pID0+IG4uaWQgPT0gdmluY3Vsby5pZFJlZikpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coYEFMRVJUQS4gVmluY3VsbyBhICR7dmluY3Vsby5pZFJlZn0gaHVlcmZhbm9gKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAodmluY3Vsby5yb2wgPT0gInRhcmdldCIpIHsKICAgICAgICAgICAgbGV0IG90cm9Ob2RvID0gbm9kb3NSZWxldmFudGVzLmZpbmQoKG4pID0+IG4uaWQgPT0gdmluY3Vsby5pZFJlZik7CiAgICAgICAgICAgIHRoaXMuZGlidWphckxpbmVhRW50cmVOb2RvcyhvdHJvTm9kbywgdGhpcy5ub2RvU2VsZWNjaW9uYWRvLCBsYXBpeiwgcG9zaWNpb25DYW52YXMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBsYXBpei5zdHJva2UoKTsKICAgICAgfQogICAgfSwKICAgIGRpYnVqYXJMaW5lYUVudHJlTm9kb3Mobm9kb0Zyb20sIG5vZG9UbywgbGFwaXosIHBvc2ljaW9uKSB7CiAgICAgIAogICAgICB2YXIgYW5ndWxvVmluY3VsbyA9IE1hdGguYXRhbigKICAgICAgICAobm9kb1RvLmNvb3Jkcy55IC0gbm9kb0Zyb20uY29vcmRzLnkpIC8gKG5vZG9Uby5jb29yZHMueCAtIG5vZG9Gcm9tLmNvb3Jkcy54KQogICAgICApOwoKICAgICAgaWYgKG5vZG9Uby5jb29yZHMueSAtIG5vZG9Gcm9tLmNvb3Jkcy55IDwgMCAmJiBub2RvVG8uY29vcmRzLnggLSBub2RvRnJvbS5jb29yZHMueCA8IDApCiAgICAgICAgYW5ndWxvVmluY3VsbyArPSBNYXRoLlBJOwogICAgICBpZiAobm9kb1RvLmNvb3Jkcy55IC0gbm9kb0Zyb20uY29vcmRzLnkgPiAwICYmIG5vZG9Uby5jb29yZHMueCAtIG5vZG9Gcm9tLmNvb3Jkcy54IDwgMCkKICAgICAgICBhbmd1bG9WaW5jdWxvICs9IE1hdGguUEk7CgogICAgICBjb25zdCB6b25hTm9kbz17CiAgICAgICAgeDogMjUqTWF0aC5jb3MoYW5ndWxvVmluY3VsbyksCiAgICAgICAgeTogMjUqTWF0aC5zaW4oYW5ndWxvVmluY3VsbykKICAgICAgfQogICAgICAKICAgICAgbGV0IGluaWNpbyA9IHsKICAgICAgICB4OiAoKG5vZG9Gcm9tLmNvb3Jkcy54K3pvbmFOb2RvLngpKnRoaXMuZmFjdG9yWm9vbSkgLSBwb3NpY2lvbi54LAogICAgICAgIHk6ICgobm9kb0Zyb20uY29vcmRzLnkrem9uYU5vZG8ueSkqdGhpcy5mYWN0b3Jab29tKSAtIHBvc2ljaW9uLnksCiAgICAgIH07CiAgICAgIGxldCBmaW5hbCA9IHsKICAgICAgICB4OiAoKG5vZG9Uby5jb29yZHMueC16b25hTm9kby54KSp0aGlzLmZhY3Rvclpvb20pIC0gcG9zaWNpb24ueCwKICAgICAgICB5OiAoKG5vZG9Uby5jb29yZHMueS16b25hTm9kby55KSp0aGlzLmZhY3Rvclpvb20pIC0gcG9zaWNpb24ueSwKICAgICAgfTsKCiAgICAgIAoKICAgICAgbGFwaXoubW92ZVRvKGluaWNpby54LCBpbmljaW8ueSk7CiAgICAgIGxhcGl6LmxpbmVUbyhmaW5hbC54LCBmaW5hbC55KTsKICAgICAgLy9haG9yYSBsYSBmbGVjaGl0YQogICAgICBjb25zdCBjZW50cm8gPSB7CiAgICAgICAgeDogKGZpbmFsLnggKyBpbmljaW8ueCkgLyAyLAogICAgICAgIHk6IChmaW5hbC55ICsgaW5pY2lvLnkpIC8gMiwKICAgICAgfTsKICAgICAgY29uc3QgbG9uZ2l0dWRBbGEgPSBwYXJzZUludCg3KnRoaXMuZmFjdG9yWm9vbSk7CiAgICAgICAgICAgIAoKICAgICAgCiAgICAgIC8vYW5ndWxvVmluY3Vsbz1hbmd1bG9WaW5jdWxvKjE4MC9NYXRoLlBJOwoKICAgICAgY29uc3QgcHVudGFBbGFJenF1aWVyZGEgPSB7CiAgICAgICAgeDogY2VudHJvLnggKyBsb25naXR1ZEFsYSAqIE1hdGguY29zKGFuZ3Vsb1ZpbmN1bG8gLSAoMyAqIE1hdGguUEkpIC8gNCksCiAgICAgICAgeTogY2VudHJvLnkgKyBsb25naXR1ZEFsYSAqIE1hdGguc2luKGFuZ3Vsb1ZpbmN1bG8gLSAoMyAqIE1hdGguUEkpIC8gNCksCiAgICAgIH07CiAgICAgIGNvbnN0IHB1bnRhQWxhRGVyZWNoYSA9IHsKICAgICAgICB4OiBjZW50cm8ueCArIGxvbmdpdHVkQWxhICogTWF0aC5jb3MoYW5ndWxvVmluY3VsbyArICgzICogTWF0aC5QSSkgLyA0KSwKICAgICAgICB5OiBjZW50cm8ueSArIGxvbmdpdHVkQWxhICogTWF0aC5zaW4oYW5ndWxvVmluY3VsbyArICgzICogTWF0aC5QSSkgLyA0KSwKICAgICAgfTsKICAgICAgbGFwaXoubW92ZVRvKGNlbnRyby54LCBjZW50cm8ueSk7CiAgICAgIGxhcGl6LmxpbmVUbyhwdW50YUFsYUl6cXVpZXJkYS54LCBwdW50YUFsYUl6cXVpZXJkYS55KTsKICAgICAgbGFwaXoubW92ZVRvKGNlbnRyby54LCBjZW50cm8ueSk7CiAgICAgIGxhcGl6LmxpbmVUbyhwdW50YUFsYURlcmVjaGEueCwgcHVudGFBbGFEZXJlY2hhLnkpOwogICAgfSwKICAgIHRyYXphclZpbmN1bG9zRGVOb2RvUmVjdXJzaXZhbWVudGUoCiAgICAgIGlkTm9kbywKICAgICAgcm9sLAogICAgICBuaXZlbGVzUmVzdGFudGVzLAogICAgICBibGFja2xpc3QKICAgICkgewogICAgICBuaXZlbGVzUmVzdGFudGVzLS07CiAgICAgIGxldCBlc3RlTm9kbyA9IHRoaXMudG9kb3NOb2Rvcy5maW5kKChuKSA9PiBuLmlkID09IGlkTm9kbyk7CgogICAgICBmb3IgKGxldCB2aW5jdWxvIG9mIGVzdGVOb2RvLnZpbmN1bG9zKSB7CiAgICAgICAgaWYgKHZpbmN1bG8ucm9sICE9IHJvbCkgY29udGludWU7CiAgICAgICAgbGV0IG5vZG9SZWYgPSB0aGlzLnRvZG9zTm9kb3MuZmluZCgobikgPT4gbi5pZCA9PSB2aW5jdWxvLmlkUmVmKTsKICAgICAgICBpZiAoIW5vZG9SZWYpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGBBTEVSVEEuIGlkUmVmIGRlbCB2aW5jdWxvIG5vIGVzdGFiYSBlbnRyZSBsb3Mgbm9kb3NgKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBibGFja2xpc3QucHVzaChub2RvUmVmLmlkKTsKICAgICAgICBpZiAocm9sID09ICJ0YXJnZXQiKSB7CiAgICAgICAgICB0aGlzLmRpYnVqYXJMaW5lYUVudHJlTm9kb3Mobm9kb1JlZiwgZXN0ZU5vZG8pOwogICAgICAgICAgYmxhY2tsaXN0LnB1c2gobm9kb1JlZi5pZCk7CiAgICAgICAgfSBlbHNlIGlmIChyb2wgPT0gInNvdXJjZSIpIHsKICAgICAgICAgIHRoaXMuZGlidWphckxpbmVhRW50cmVOb2Rvcyhlc3RlTm9kbywgbm9kb1JlZik7CiAgICAgICAgfQogICAgICAgIGlmICgKICAgICAgICAgIG5pdmVsZXNSZXN0YW50ZXMgPiAwICYmCiAgICAgICAgICAhYmxhY2tsaXN0LnNvbWUoKGlkTikgPT4gaWROID09IG5vZG9SZWYuaWQpCiAgICAgICAgKSB7CiAgICAgICAgICBibGFja2xpc3QgPSB0aGlzLnRyYXphclZpbmN1bG9zRGVOb2RvUmVjdXJzaXZhbWVudGUoCiAgICAgICAgICAgIG5vZG9SZWYuaWQsCiAgICAgICAgICAgIHJvbCwKICAgICAgICAgICAgbml2ZWxlc1Jlc3RhbnRlcywKICAgICAgICAgICAgYmxhY2tsaXN0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYmxhY2tsaXN0OwogICAgfSwKICAgIGRlYlRyYXphclZpbmN1bG9zOmRlYm91bmNlKGZ1bmN0aW9uKCl7CiAgICAgIHRoaXMuY3JlYXJJbWFnZW5Ub2Rvc1ZpbmN1bG9zKCk7CiAgICB9LCAxMDAwKQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcygpewogICAgICB2YXIgbm9kb3NSZWxldmFudGVzPXRoaXMudG9kb3NOb2RvczsKCiAgICAgIGlmICh0aGlzLmlkTm9kb1RhcmdldCkgewogICAgICAgIG5vZG9zUmVsZXZhbnRlcyA9IHRoaXMudG9kb3NOb2Rvcy5maWx0ZXIobj0+dGhpcy5pZHNOZWNlc2FyaW9zUGFyYVRhcmdldC5pbmNsdWRlcyhuLmlkKSB8fCBuLmlkPT10aGlzLmlkTm9kb1RhcmdldCk7CiAgICAgIH0KCiAgICAgIGlmIChub2Rvc1JlbGV2YW50ZXMubGVuZ3RoIDw9IDEpIHJldHVybiB7CiAgICAgICAgeDE6IDAsCiAgICAgICAgeTE6IDAsCiAgICAgICAgeDI6IDAsCiAgICAgICAgeTI6IDAsICAgICAgICAKICAgICAgfTsKCiAgICAgIGxldCBib3JkZXMgPSB7fTsKICAgICAgYm9yZGVzLnRvcCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIC8vY29uc29sZS5sb2coYFJlZHVjaWVuZG8gJHtuLm5vbWJyZX0gY29uIGNvb3JkczogJHtuLnBvc2ljaW9ufWApOwogICAgICAgIHJldHVybiBuLmNvb3Jkcy55ID4gYWNjID8gbi5jb29yZHMueSA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlcy5ib3QgPSBub2Rvc1JlbGV2YW50ZXMucmVkdWNlKChhY2MsIG4pID0+IHsKICAgICAgICByZXR1cm4gbi5jb29yZHMueSA8IGFjYyA/IG4uY29vcmRzLnkgOiBhY2M7CiAgICAgIH0sIDApOwogICAgICBib3JkZXMubGVmdCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIHJldHVybiBuLmNvb3Jkcy54IDwgYWNjID8gbi5jb29yZHMueCA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlcy5yaWdodCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIHJldHVybiBuLmNvb3Jkcy54ID4gYWNjID8gbi5jb29yZHMueCA6IGFjYzsKICAgICAgfSwgMCk7CgogICAgICByZXR1cm4gewogICAgICAgIHgxOiBib3JkZXMubGVmdCp0aGlzLmZhY3Rvclpvb20sCiAgICAgICAgeTE6IGJvcmRlcy5ib3QqdGhpcy5mYWN0b3Jab29tLAogICAgICAgIHgyOiBib3JkZXMucmlnaHQqdGhpcy5mYWN0b3Jab29tLAogICAgICAgIHkyOiBib3JkZXMudG9wKnRoaXMuZmFjdG9yWm9vbQogICAgICB9CiAgICB9LAogICAgb2Zmc2V0Q2FudmFzVG9kb3NWaW5jdWxvcygpewogICAgICByZXR1cm4gewogICAgICAgIGxlZnQ6ICB0aGlzLmVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcy54MSArICJweCIsCiAgICAgICAgdG9wOiB0aGlzLmVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcy55MSArICJweCIsCgogICAgICAgIHdpZHRoOiAodGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueDItdGhpcy5lc3F1aW5hc0NhbnZhc1RvZG9zVmluY3Vsb3MueDEpICsgInB4IiwKICAgICAgICBoZWlnaHQ6ICh0aGlzLmVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcy55Mi10aGlzLmVzcXVpbmFzQ2FudmFzVG9kb3NWaW5jdWxvcy55MSkgKyAicHgiLAogICAgICB9CiAgICB9LAogICAgZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkbygpewogICAgICB2YXIgbm9kb3NSZWxldmFudGVzPXRoaXMudG9kb3NOb2Rvcy5maWx0ZXIobj0+bi5pZD09dGhpcy5ub2RvU2VsZWNjaW9uYWRvLmlkIHx8IG4udmluY3Vsb3Muc29tZSh2PT52LmlkUmVmPT10aGlzLm5vZG9TZWxlY2Npb25hZG8uaWQpKTsKCiAgICAgIGlmICh0aGlzLmlkTm9kb1RhcmdldCkgewogICAgICAgIG5vZG9zUmVsZXZhbnRlcyA9IG5vZG9zUmVsZXZhbnRlcy5maWx0ZXIobj0+dGhpcy5pZHNOZWNlc2FyaW9zUGFyYVRhcmdldC5pbmNsdWRlcyhuLmlkKSB8fCBuLmlkPT10aGlzLmlkTm9kb1RhcmdldCk7CiAgICAgIH0KCiAgICAgIGlmIChub2Rvc1JlbGV2YW50ZXMubGVuZ3RoIDw9IDEpIHJldHVybiB7CiAgICAgICAgeDE6IDAsCiAgICAgICAgeTE6IDAsCiAgICAgICAgeDI6IDAsCiAgICAgICAgeTI6IDAsICAgICAgICAKICAgICAgfTsKCiAgICAgIGxldCBib3JkZXMgPSB7fTsKICAgICAgYm9yZGVzLnRvcCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIC8vY29uc29sZS5sb2coYFJlZHVjaWVuZG8gJHtuLm5vbWJyZX0gY29uIGNvb3JkczogJHtuLnBvc2ljaW9ufWApOwogICAgICAgIHJldHVybiBuLmNvb3Jkcy55ID4gYWNjID8gbi5jb29yZHMueSA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlcy5ib3QgPSBub2Rvc1JlbGV2YW50ZXMucmVkdWNlKChhY2MsIG4pID0+IHsKICAgICAgICByZXR1cm4gbi5jb29yZHMueSA8IGFjYyA/IG4uY29vcmRzLnkgOiBhY2M7CiAgICAgIH0sIDApOwogICAgICBib3JkZXMubGVmdCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIHJldHVybiBuLmNvb3Jkcy54IDwgYWNjID8gbi5jb29yZHMueCA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlcy5yaWdodCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIHJldHVybiBuLmNvb3Jkcy54ID4gYWNjID8gbi5jb29yZHMueCA6IGFjYzsKICAgICAgfSwgMCk7CgogICAgICByZXR1cm4gewogICAgICAgIHgxOiBib3JkZXMubGVmdCp0aGlzLmZhY3Rvclpvb20sCiAgICAgICAgeTE6IGJvcmRlcy5ib3QqdGhpcy5mYWN0b3Jab29tLAogICAgICAgIHgyOiBib3JkZXMucmlnaHQqdGhpcy5mYWN0b3Jab29tLAogICAgICAgIHkyOiBib3JkZXMudG9wKnRoaXMuZmFjdG9yWm9vbQogICAgICB9CiAgICB9LAogICAgb2Zmc2V0Q2FudmFzVmluY3Vsb3NTZWxlY2Npb25hZG8oKXsKICAgICAgcmV0dXJuIHsKICAgICAgICBsZWZ0OiAgdGhpcy5lc3F1aW5hc0NhbnZhc1ZpbmN1bG9zU2VsZWNjaW9uYWRvLngxICsgInB4IiwKICAgICAgICB0b3A6IHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby55MSArICJweCIsCgogICAgICAgIHdpZHRoOiAodGhpcy5lc3F1aW5hc0NhbnZhc1ZpbmN1bG9zU2VsZWNjaW9uYWRvLngyLXRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby54MSkgKyAicHgiLAogICAgICAgIGhlaWdodDogKHRoaXMuZXNxdWluYXNDYW52YXNWaW5jdWxvc1NlbGVjY2lvbmFkby55Mi10aGlzLmVzcXVpbmFzQ2FudmFzVmluY3Vsb3NTZWxlY2Npb25hZG8ueTEpICsgInB4IiwKICAgICAgfQogICAgfSwKICAgIHNpemVDYW52YXNUb2Rvc1ZpbmN1bG9zKCl7CiAgICAgIHZhciBub2Rvc1JlbGV2YW50ZXMgPSB0aGlzLnRvZG9zTm9kb3M7CiAgICAgIGlmICh0aGlzLmlkTm9kb1RhcmdldCkgewogICAgICAgIG5vZG9zUmVsZXZhbnRlcyA9IHRoaXMudG9kb3NOb2Rvcy5maWx0ZXIobj0+dGhpcy5pZHNOZWNlc2FyaW9zUGFyYVRhcmdldC5pbmNsdWRlcyhuLmlkKSB8fCBuLmlkPT10aGlzLmlkTm9kb1RhcmdldCk7CiAgICAgIH0KCiAgICAgIGlmIChub2Rvc1JlbGV2YW50ZXMubGVuZ3RoIDw9IDEpIHJldHVybiB7CiAgICAgICAgd2lkdGg6IjBweCIsCiAgICAgICAgaGVpZ2h0OiIwcHgiLAogICAgICB9OwoKICAgICAgbGV0IGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MgPSB7fTsKCiAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MudG9wID0gbm9kb3NSZWxldmFudGVzLnJlZHVjZSgoYWNjLCBuKSA9PiB7CiAgICAgICAgcmV0dXJuIG4uY29vcmRzTWFudWFsZXMueSA+IGFjYyA/IG4uY29vcmRzTWFudWFsZXMueSA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MuYm90ID0gbm9kb3NSZWxldmFudGVzLnJlZHVjZSgoYWNjLCBuKSA9PiB7CiAgICAgICAgcmV0dXJuIG4uY29vcmRzTWFudWFsZXMueSA8IGFjYyA/IG4uY29vcmRzTWFudWFsZXMueSA6IGFjYzsKICAgICAgfSwgMCk7CiAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MubGVmdCA9IG5vZG9zUmVsZXZhbnRlcy5yZWR1Y2UoKGFjYywgbikgPT4gewogICAgICAgIHJldHVybiBuLmNvb3Jkc01hbnVhbGVzLnggPCBhY2MgPyBuLmNvb3Jkc01hbnVhbGVzLnggOiBhY2M7CiAgICAgIH0sIDApOwogICAgICBib3JkZXNDYW52YXNUb2Rvc1ZpbmN1bG9zLnJpZ2h0ID0gbm9kb3NSZWxldmFudGVzLnJlZHVjZSgoYWNjLCBuKSA9PiB7CiAgICAgICAgcmV0dXJuIG4uY29vcmRzTWFudWFsZXMueCA+IGFjYyA/IG4uY29vcmRzTWFudWFsZXMueCA6IGFjYzsKICAgICAgfSwgMCk7CgogICAgICBsZXQgYW5jaG9EaWFncmFtYSA9IHBhcnNlSW50KAogICAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MucmlnaHQgLSBib3JkZXNDYW52YXNUb2Rvc1ZpbmN1bG9zLmxlZnQKICAgICAgKTsKICAgICAgbGV0IGFsdG9EaWFncmFtYSA9IHBhcnNlSW50KAogICAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MudG9wIC0gYm9yZGVzQ2FudmFzVG9kb3NWaW5jdWxvcy5ib3QKICAgICAgKTsKCiAgICAgIGlmIChhbmNob0RpYWdyYW1hID4gNTAwMCB8fCBhbHRvRGlhZ3JhbWEgPiA1MDAwKSB7CiAgICAgICAgY29uc29sZS5sb2coYEFMRVJUQS4gRGlhZ3JhbWEgZGVtYXNpYWRvIGdyYW5kZWApOwogICAgICB9CgogICAgICB0aGlzLiRzZXQoCiAgICAgICAgdGhpcy5wb3NpY2lvbkNhbnZhc1RvZG9zVmluY3Vsb3MsCiAgICAgICAgInkiLAogICAgICAgIGJvcmRlc0NhbnZhc1RvZG9zVmluY3Vsb3MuYm90CiAgICAgICk7CiAgICAgIHRoaXMuJHNldCgKICAgICAgICB0aGlzLnBvc2ljaW9uQ2FudmFzVG9kb3NWaW5jdWxvcywKICAgICAgICAieCIsCiAgICAgICAgYm9yZGVzQ2FudmFzVG9kb3NWaW5jdWxvcy5sZWZ0CiAgICAgICk7CgogICAgICByZXR1cm4gewogICAgICAgIHdpZHRoOiBhbmNob0RpYWdyYW1hKyJweCIsCiAgICAgICAgaGVpZ2h0OiBhbHRvRGlhZ3JhbWErInB4IgogICAgICB9CiAgICAgIC8vIHRoaXMuJHNldCh0aGlzLnNpemVDYW52YXNUb2Rvc1ZpbmN1bG9zLCAid2lkdGgiLCBhbmNob0RpYWdyYW1hICsgInB4Iik7CiAgICAgIC8vIHRoaXMuJHNldCh0aGlzLnNpemVDYW52YXNUb2Rvc1ZpbmN1bG9zLCAiaGVpZ2h0IiwgYWx0b0RpYWdyYW1hICsgInB4Iik7CiAgICAgIAogICAgICAKICAgIH0sCiAgICBlc3RpbG9Qb3NpY2lvblJlbGF0aXZhQ2FudmFzKCkgewogICAgICBsZXQgdG9wID0gdGhpcy5wb3NpY2lvbkNhbnZhc1RvZG9zVmluY3Vsb3MueSAtIHRoaXMuY2VudHJvVmlzdGEueTsKICAgICAgbGV0IGxlZnQgPSB0aGlzLnBvc2ljaW9uQ2FudmFzVG9kb3NWaW5jdWxvcy54IC0gdGhpcy5jZW50cm9WaXN0YS54OwogICAgICByZXR1cm4gewogICAgICAgIHRvcDogdG9wICsgInB4IiwKICAgICAgICBsZWZ0OiBsZWZ0ICsgInB4IiwKICAgICAgfTsKICAgIH0sCiAgfSwKICB3YXRjaDogewogICAgdG9kb3NOb2RvczogZnVuY3Rpb24gKCkgewogICAgICBpZiAodGhpcy50b2Rvc05vZG9zLmxlbmd0aCA8IDEpIHJldHVybjsKICAgICAgdGhpcy5jcmVhckltYWdlblRvZG9zVmluY3Vsb3MoKTsKICAgICAgaWYodGhpcy5jYWxsaW5nUG9zaWNpb25lcyl0aGlzLmNyZWFySW1hZ2VuUG9zaWNpb25lcygpOwogICAgICB0aGlzLmNyZWFySW1hZ2VuVmluY3Vsb3NTZWxlY2Npb25hZG8oKTsKICAgIH0sCiAgICBub2RvU2VsZWNjaW9uYWRvOiBmdW5jdGlvbiAoKSB7CiAgICAgIGlmKCF0aGlzLmNhbGxpbmdQb3NpY2lvbmVzKXRoaXMuY3JlYXJJbWFnZW5WaW5jdWxvc1NlbGVjY2lvbmFkbygpOwogICAgICBpZih0aGlzLmNhbGxpbmdQb3NpY2lvbmVzKXRoaXMuY3JlYXJJbWFnZW5Qb3NpY2lvbmVzKCk7CgogICAgfSwKICAgIGlkTm9kb1RhcmdldCgpIHsKICAgICAgY29uc29sZS5sb2coYFRyYXphbmRvIHRvZG9zIHbDrW5jdWxvcyB0ZW5pZW5kbyBlbiBjdWVudGEgZWwgdGFyZ2V0YCk7CiAgICAgIHRoaXMuY3JlYXJJbWFnZW5Ub2Rvc1ZpbmN1bG9zKCk7CiAgICB9LAogICAgZmFjdG9yWm9vbSgpewogICAgICB0aGlzLmRlYlRyYXphclZpbmN1bG9zKCk7CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5tb250YWRvID0gdHJ1ZTsKICAgIHRoaXMuY3JlYXJJbWFnZW5Ub2Rvc1ZpbmN1bG9zKCk7CiAgICB0aGlzLmNyZWFySW1hZ2VuUG9zaWNpb25lcygpOwogICAgdGhpcy5jcmVhckltYWdlblZpbmN1bG9zU2VsZWNjaW9uYWRvKCk7CiAgfSwKfTsK"},{"version":3,"sources":["Canvases.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Canvases.vue","sourceRoot":"src/components/atlasConocimiento","sourcesContent":["<template>\n  <div id=\"canvases\">\n    <canvas\n      id=\"canvasTodosVinculos\"\n      ref=\"canvasTodosVinculos\"\n      :style=\"[offsetCanvasTodosVinculos]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasVinculosSeleccionado\"\n      ref=\"canvasVinculosSeleccionado\"\n      :style=\"[offsetCanvasVinculosSeleccionado]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasPosiciones\"\n      ref=\"canvasPosiciones\"\n      :style=\"[estiloPosicionRelativaCanvas, sizeCanvasTodosVinculos]\"\n      class=\"canvas\"\n      v-show=\"callingPosiciones\"\n    >\n\n    </canvas>\n  </div>\n</template>\n\n<script>\nvar debounce =require(\"debounce\");\n\n\nexport default {\n  name: \"Canvases\",\n  data() {\n    return {\n      montado: false,\n\n      lapiz: null,\n      posicionCanvasTodosVinculos: {\n        top: 0,\n        left: 0,\n      },      \n      posicionCanvasActivo: {\n        x: 0,\n        y: 0,\n      },\n    };\n  },\n  props: {\n    nodoSeleccionado: {\n      type: Object,\n      default() {\n        return {\n          id: \"-1\",\n          vinculos: [],\n        };\n      },\n    },\n    idsNecesariosParaTarget:Array,\n    nodoRelevante: [Object],\n    idNodoTarget: String,\n    todosNodos: Array,\n    centroVista: Object,\n    actualizar: Number,\n\n    callingPosiciones:Boolean,\n    factorZoom:Number,\n  },\n  methods: {\n    crearImagenPosiciones(){\n      \n      this.lapiz=this.$refs.canvasPosiciones.getContext(\"2d\")\n      var nodosRelevantes = this.todosNodos;\n\n      if(this.nodoSeleccionado && this.nodoSeleccionado.id.length>4) nodosRelevantes=[this.nodoSeleccionado];\n      if (nodosRelevantes <= 1) return;\n\n      this.lapiz.canvas.width=parseInt(this.sizeCanvasTodosVinculos.width);\n      this.lapiz.canvas.height=parseInt(this.sizeCanvasTodosVinculos.height);\n      \n      this.lapiz.clearRect(\n        0,\n        0,\n        this.lapiz.canvas.width,\n        this.lapiz.canvas.height\n      );\n\n      this.lapiz.lineWidth=2;\n      this.lapiz.beginPath();\n\n      nodosRelevantes.forEach(nodo=>{\n        this.lapiz.beginPath();\n        this.lapiz.strokeStyle = nodo.stuck?'red':\"#9761d2\";\n\n        this.lapiz.moveTo(nodo.coords.x -this.posicionCanvasActivo.x, nodo.coords.y-this.posicionCanvasActivo.y);\n        this.lapiz.lineTo(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y);\n        this.lapiz.arc(nodo.centroMasa.x - this.posicionCanvasActivo.x, nodo.centroMasa.y - this.posicionCanvasActivo.y, 10, 0, Math.PI*2);\n        this.lapiz.stroke();     \n     })\n\n     this.lapiz.beginPath();    \n     nodosRelevantes.forEach(nodo=>{\n       if(!nodo.stuck){\n        this.lapiz.strokeStyle = 'blue';\n        let nodox=nodo.coords.x -this.posicionCanvasActivo.x;\n        let nodoy=nodo.coords.y-this.posicionCanvasActivo.y\n        this.lapiz.moveTo(nodox, nodoy);\n        \n        let vectorx=(Math.cos(nodo.angulo)*100);\n        let vectory=(Math.sin(nodo.angulo)*100);\n        \n        this.lapiz.lineTo(nodox+vectorx, nodoy+vectory);\n       }\n       \n     })\n     this.lapiz.stroke();\n\n    },\n    crearImagenTodosVinculos: function () {\n      var nodosRelevantes=this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return \n\n      var lapiz = this.$refs.canvasTodosVinculos.getContext(\"2d\");\n                        \n      lapiz.canvas.width = this.esquinasCanvasTodosVinculos.x2 - this.esquinasCanvasTodosVinculos.x1;\n      lapiz.canvas.height = this.esquinasCanvasTodosVinculos.y2 - this.esquinasCanvasTodosVinculos.y1;\n\n      const posicionCanvas={\n        x: this.esquinasCanvasTodosVinculos.x1,\n        y: this.esquinasCanvasTodosVinculos.y1,\n      }\n      lapiz.lineWidth = 1;\n      lapiz.clearRect(0, 0, lapiz.canvas.width, lapiz.canvas.height);\n      lapiz.beginPath();\n      lapiz.strokeStyle = \"#b3b3b3\";\n      for (let nodo of nodosRelevantes) {\n        for (let vinculo of nodo.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) continue;\n          if (vinculo.rol == \"source\") {\n            this.dibujarLineaEntreNodos(\n              nodo,\n              nodosRelevantes.find((nodo) => nodo.id == vinculo.idRef),\n              lapiz,\n              posicionCanvas\n            );\n          }\n        }\n      }\n      lapiz.stroke();\n    },\n    crearImagenVinculosSeleccionado: function () {\n\n      var nodosRelevantes = this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes <= 1) return;\n\n      var lapiz = this.$refs.canvasVinculosSeleccionado.getContext(\"2d\");\n\n      lapiz.canvas.width = this.esquinasCanvasVinculosSeleccionado.x2 - this.esquinasCanvasVinculosSeleccionado.x1;\n      lapiz.canvas.height = this.esquinasCanvasVinculosSeleccionado.y2 - this.esquinasCanvasVinculosSeleccionado.y1; \n\n      const posicionCanvas={\n        x: this.esquinasCanvasVinculosSeleccionado.x1,\n        y: this.esquinasCanvasVinculosSeleccionado.y1,\n      }\n\n      lapiz.clearRect(\n        0,\n        0,\n        lapiz.canvas.width,\n        lapiz.canvas.height\n      );\n\n      \n\n      if (nodosRelevantes.some((n) => n.id == this.nodoSeleccionado.id)) {\n        //Lineas verdes de posiblidades\n        lapiz.beginPath();\n        lapiz.lineWidth = 2;\n        lapiz.strokeStyle = \"#008000\";\n\n        //Lineas verdes de salida\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"source\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(this.nodoSeleccionado, otroNodo, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n        //Lineas rojas de dependencias\n\n        lapiz.beginPath();\n        lapiz.strokeStyle = \"#b80e0e\";\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!nodosRelevantes.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n          if (vinculo.rol == \"target\") {\n            let otroNodo = nodosRelevantes.find((n) => n.id == vinculo.idRef);\n            this.dibujarLineaEntreNodos(otroNodo, this.nodoSeleccionado, lapiz, posicionCanvas);\n          }\n        }\n        lapiz.stroke();\n      }\n    },\n    dibujarLineaEntreNodos(nodoFrom, nodoTo, lapiz, posicion) {\n      \n      var anguloVinculo = Math.atan(\n        (nodoTo.coords.y - nodoFrom.coords.y) / (nodoTo.coords.x - nodoFrom.coords.x)\n      );\n\n      if (nodoTo.coords.y - nodoFrom.coords.y < 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n      if (nodoTo.coords.y - nodoFrom.coords.y > 0 && nodoTo.coords.x - nodoFrom.coords.x < 0)\n        anguloVinculo += Math.PI;\n\n      const zonaNodo={\n        x: 25*Math.cos(anguloVinculo),\n        y: 25*Math.sin(anguloVinculo)\n      }\n      \n      let inicio = {\n        x: ((nodoFrom.coords.x+zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoFrom.coords.y+zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n      let final = {\n        x: ((nodoTo.coords.x-zonaNodo.x)*this.factorZoom) - posicion.x,\n        y: ((nodoTo.coords.y-zonaNodo.y)*this.factorZoom) - posicion.y,\n      };\n\n      \n\n      lapiz.moveTo(inicio.x, inicio.y);\n      lapiz.lineTo(final.x, final.y);\n      //ahora la flechita\n      const centro = {\n        x: (final.x + inicio.x) / 2,\n        y: (final.y + inicio.y) / 2,\n      };\n      const longitudAla = parseInt(7*this.factorZoom);\n            \n\n      \n      //anguloVinculo=anguloVinculo*180/Math.PI;\n\n      const puntaAlaIzquierda = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo - (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo - (3 * Math.PI) / 4),\n      };\n      const puntaAlaDerecha = {\n        x: centro.x + longitudAla * Math.cos(anguloVinculo + (3 * Math.PI) / 4),\n        y: centro.y + longitudAla * Math.sin(anguloVinculo + (3 * Math.PI) / 4),\n      };\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaIzquierda.x, puntaAlaIzquierda.y);\n      lapiz.moveTo(centro.x, centro.y);\n      lapiz.lineTo(puntaAlaDerecha.x, puntaAlaDerecha.y);\n    },\n    trazarVinculosDeNodoRecursivamente(\n      idNodo,\n      rol,\n      nivelesRestantes,\n      blacklist\n    ) {\n      nivelesRestantes--;\n      let esteNodo = this.todosNodos.find((n) => n.id == idNodo);\n\n      for (let vinculo of esteNodo.vinculos) {\n        if (vinculo.rol != rol) continue;\n        let nodoRef = this.todosNodos.find((n) => n.id == vinculo.idRef);\n        if (!nodoRef) {\n          console.log(`ALERTA. idRef del vinculo no estaba entre los nodos`);\n          continue;\n        }\n        blacklist.push(nodoRef.id);\n        if (rol == \"target\") {\n          this.dibujarLineaEntreNodos(nodoRef, esteNodo);\n          blacklist.push(nodoRef.id);\n        } else if (rol == \"source\") {\n          this.dibujarLineaEntreNodos(esteNodo, nodoRef);\n        }\n        if (\n          nivelesRestantes > 0 &&\n          !blacklist.some((idN) => idN == nodoRef.id)\n        ) {\n          blacklist = this.trazarVinculosDeNodoRecursivamente(\n            nodoRef.id,\n            rol,\n            nivelesRestantes,\n            blacklist\n          );\n        }\n      }\n      return blacklist;\n    },\n    debTrazarVinculos:debounce(function(){\n      this.crearImagenTodosVinculos();\n    }, 1000)\n  },\n  computed: {\n    esquinasCanvasTodosVinculos(){\n      var nodosRelevantes=this.todosNodos;\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasTodosVinculos(){\n      return {\n        left:  this.esquinasCanvasTodosVinculos.x1 + \"px\",\n        top: this.esquinasCanvasTodosVinculos.y1 + \"px\",\n\n        width: (this.esquinasCanvasTodosVinculos.x2-this.esquinasCanvasTodosVinculos.x1) + \"px\",\n        height: (this.esquinasCanvasTodosVinculos.y2-this.esquinasCanvasTodosVinculos.y1) + \"px\",\n      }\n    },\n    esquinasCanvasVinculosSeleccionado(){\n      var nodosRelevantes=this.todosNodos.filter(n=>n.id==this.nodoSeleccionado.id || n.vinculos.some(v=>v.idRef==this.nodoSeleccionado.id));\n\n      if (this.idNodoTarget) {\n        nodosRelevantes = nodosRelevantes.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: bordes.right*this.factorZoom,\n        y2: bordes.top*this.factorZoom\n      }\n    },\n    offsetCanvasVinculosSeleccionado(){\n      return {\n        left:  this.esquinasCanvasVinculosSeleccionado.x1 + \"px\",\n        top: this.esquinasCanvasVinculosSeleccionado.y1 + \"px\",\n\n        width: (this.esquinasCanvasVinculosSeleccionado.x2-this.esquinasCanvasVinculosSeleccionado.x1) + \"px\",\n        height: (this.esquinasCanvasVinculosSeleccionado.y2-this.esquinasCanvasVinculosSeleccionado.y1) + \"px\",\n      }\n    },\n    sizeCanvasTodosVinculos(){\n      var nodosRelevantes = this.todosNodos;\n      if (this.idNodoTarget) {\n        nodosRelevantes = this.todosNodos.filter(n=>this.idsNecesariosParaTarget.includes(n.id) || n.id==this.idNodoTarget);\n      }\n\n      if (nodosRelevantes.length <= 1) return {\n        width:\"0px\",\n        height:\"0px\",\n      };\n\n      let bordesCanvasTodosVinculos = {};\n\n      bordesCanvasTodosVinculos.top = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y > acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.y < acc ? n.coordsManuales.y : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x < acc ? n.coordsManuales.x : acc;\n      }, 0);\n      bordesCanvasTodosVinculos.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coordsManuales.x > acc ? n.coordsManuales.x : acc;\n      }, 0);\n\n      let anchoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.right - bordesCanvasTodosVinculos.left\n      );\n      let altoDiagrama = parseInt(\n        bordesCanvasTodosVinculos.top - bordesCanvasTodosVinculos.bot\n      );\n\n      if (anchoDiagrama > 5000 || altoDiagrama > 5000) {\n        console.log(`ALERTA. Diagrama demasiado grande`);\n      }\n\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"y\",\n        bordesCanvasTodosVinculos.bot\n      );\n      this.$set(\n        this.posicionCanvasTodosVinculos,\n        \"x\",\n        bordesCanvasTodosVinculos.left\n      );\n\n      return {\n        width: anchoDiagrama+\"px\",\n        height: altoDiagrama+\"px\"\n      }\n      // this.$set(this.sizeCanvasTodosVinculos, \"width\", anchoDiagrama + \"px\");\n      // this.$set(this.sizeCanvasTodosVinculos, \"height\", altoDiagrama + \"px\");\n      \n      \n    },\n    estiloPosicionRelativaCanvas() {\n      let top = this.posicionCanvasTodosVinculos.y - this.centroVista.y;\n      let left = this.posicionCanvasTodosVinculos.x - this.centroVista.x;\n      return {\n        top: top + \"px\",\n        left: left + \"px\",\n      };\n    },\n  },\n  watch: {\n    todosNodos: function () {\n      if (this.todosNodos.length < 1) return;\n      this.crearImagenTodosVinculos();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n      this.crearImagenVinculosSeleccionado();\n    },\n    nodoSeleccionado: function () {\n      if(!this.callingPosiciones)this.crearImagenVinculosSeleccionado();\n      if(this.callingPosiciones)this.crearImagenPosiciones();\n\n    },\n    idNodoTarget() {\n      console.log(`Trazando todos vínculos teniendo en cuenta el target`);\n      this.crearImagenTodosVinculos();\n    },\n    factorZoom(){\n      this.debTrazarVinculos();\n    }\n  },\n  mounted() {\n    this.montado = true;\n    this.crearImagenTodosVinculos();\n    this.crearImagenPosiciones();\n    this.crearImagenVinculosSeleccionado();\n  },\n};\n</script>\n\n<style scoped>\n.canvas {\n  position: absolute;\n}\n\n#canvasTodosVinculos {\n  z-index: 0;\n}\n</style>"]}]}