{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/usuario/RutaGrado.vue?vue&type=style&index=0&id=7059830d&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/usuario/RutaGrado.vue","mtime":1676563818640},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNsYVJ1dGFHcmFkbyB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBnYXA6IDBweDsKICBwYWRkaW5nOiAyMHB4IDBweDsKICBtYXgtaGVpZ2h0OiAxMDB2aDsKICBvdmVyZmxvdy15OiBzY3JvbGw7Cn0KCi5zdWJydXRhIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgZ2FwOiAyMHB4OwogIHBhZGRpbmc6IDBweCAyMHB4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGZsZXgtc2hyaW5rOiAwOwogIG1pbi13aWR0aDogMzAwcHg7Cn0KCi5zdWJydXRhIC5saW5lYVJ1dGEgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDBweDsKICBsZWZ0OiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdyaXMpOwogIHdpZHRoOiAycHg7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["RutaGrado.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RutaGrado.vue","sourceRoot":"src/components/usuario","sourcesContent":["<template>\n  <div class=\"rutaGrado\" @click=\"idNodoSeleccionado = null\">\n    <div id=\"titulo\" class=\"tituloComponente\">Ruta de grado</div>\n\n    <div id=\"laRutaGrado\">\n      <div class=\"subruta\" v-for=\"ruta of subrutas\" :key=\"ruta.id\">\n        <div class=\"lineaRuta\"></div>\n        <nodo-grado\n          v-for=\"nodo of ruta.nodos\"\n          :key=\"nodo.id\"\n          :esteNodo=\"nodo\"\n          :completado=\"nodosCompletados.includes(nodo.id)\"\n          :colorSubruta=\"ruta.color\"\n          :seleccionado=\"idNodoSeleccionado === nodo.id\"\n          :idUsuario=\"idUsuario\"\n          @setColorSubruta=\"setColorSubruta(ruta.id)\"\n          @click.native.stop=\"\n            idNodoSeleccionado = idNodoSeleccionado === nodo.id ? null : nodo.id\n          \"\n          @seleccioname=\"idNodoSeleccionado = nodo.id\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport NodoGrado from \"./NodoGrado.vue\";\n\nexport default {\n  components: { NodoGrado },\n  name: \"RutaGrado\",\n  props: {\n    idUsuario: String,\n  },\n  apollo: {\n    subrutas: {\n      query: gql`\n        query {\n          subrutasGradoMaestraVida {\n            id\n            nombre\n            color\n            nodos {\n              id\n              nombre\n              descripcion\n            }\n          }\n        }\n      `,\n      update({ subrutasGradoMaestraVida }) {\n        return subrutasGradoMaestraVida;\n      },\n    },\n    nodosCompletados: {\n      query: gql`\n        query ($idUsuario: ID!) {\n          Usuario(idUsuario: $idUsuario) {\n            id\n            nodosCompletadosRutaGrado\n          }\n        }\n      `,\n      update({ Usuario }) {\n        return Usuario.nodosCompletadosRutaGrado;\n      },\n      variables() {\n        return {\n          idUsuario: this.idUsuario,\n        };\n      },\n    },\n  },\n  data() {\n    return {\n      subrutas: [],\n      nodosCompletados: [],\n      idNodoSeleccionado: null,\n\n      settingColorSubruta:false,\n    };\n  },\n  methods:{\n    setColorSubruta(idSubruta){\n      let nuevoColor=prompt(\"Introduce el cÃ³digo del nuevo color\");\n\n      this.settingColorSubruta=true;\n      this.$apollo.mutate({\n        mutation: gql`\n          mutation($idSubruta: ID!, $nuevoColor: String!){\n            setColorSubrutaGrado(idSubruta: $idSubruta, nuevoColor: $nuevoColor){\n               id\n               color\n            }\n          }\n          `,\n          variables:{\n            idSubruta,\n            nuevoColor\n          }\n        }).then(()=>{\n          this.settingColorSubruta=false;\n            \n        }).catch((error)=>{\n          console.log('Error: '+ error);\n          this.settingColorSubruta=false;\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n#laRutaGrado {\n  display: flex;\n  justify-content: center;\n  gap: 0px;\n  padding: 20px 0px;\n  max-height: 100vh;\n  overflow-y: scroll;\n}\n\n.subruta {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 0px 20px;\n  align-items: center;\n  position: relative;\n  flex-shrink: 0;\n  min-width: 300px;\n}\n\n.subruta .lineaRuta {\n  position: absolute;\n  top: 0px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: var(--gris);\n  width: 2px;\n  height: 100%;\n}\n</style>"]}]}