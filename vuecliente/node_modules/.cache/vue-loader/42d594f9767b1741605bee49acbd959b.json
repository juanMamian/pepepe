{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/utilidades/DiaCalendario.vue?vue&type=style&index=0&id=3f3ca0cf&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/utilidades/DiaCalendario.vue","mtime":1666802386050},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojY29udGVuZWRvckV2ZW50b3MgewogIG1pbi1oZWlnaHQ6IDEwMHB4OwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdyaXNIb3Zlcik7CiAgcGFkZGluZzogMjBweCAwcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CiNiYXJyYVN1cGVyaW9yIHsKICBkaXNwbGF5OiBmbGV4OwogIGZvbnQtZmFtaWx5OiBTYWxzYSwgY3Vyc2l2ZTsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGhlaWdodDogMjVweDsKfQojY29udGVuZWRvckNvbnRlbmlkbyB7CiAgd2lkdGg6IDEwMCU7CiAgb3ZlcmZsb3c6IHNjcm9sbDsKICBoZWlnaHQ6IDgwdmg7Cn0KI2JhcnJhSG9yYXMgewogIGRpc3BsYXk6IGZsZXg7CiAgb3ZlcmZsb3c6IHZpc2libGU7CiAgcGFkZGluZzogMTRweCAwcHg7Cn0KI2JhcnJhSG9yYXMgLmhvcmEgewogIGZvbnQtc2l6ZTogMTBweDsKICBvcGFjaXR5OiAwLjQ7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIG92ZXJmbG93OiB2aXNpYmxlOwogIGZsZXgtc2hyaW5rOiAwOwp9CiNibG9xdWVUaXR1bG9EaWEgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBtYXJnaW4tbGVmdDogMXZ3Owp9CiNub21icmVEaWEgewogIG1hcmdpbi1yaWdodDogMnZ3OwogIGZvbnQtc2l6ZTogMTBweDsKfQojbm9tYnJlRGlhLmhveSB7CiAgY29sb3I6IHJlZDsKfQojZmVjaGFEaWEgewogIGZvbnQtc2l6ZTogMTBweDsKICBvcGFjaXR5OiAwLjU7Cn0KI2NhbnRpZGFkZXNFdmVudG9zIHsKICBtYXJnaW4tbGVmdDogMTBweDsKICBmb250LXNpemU6IDEwcHg7Cn0K"},{"version":3,"sources":["DiaCalendario.vue"],"names":[],"mappingsrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DiaCalendario.vue","sourceRoot":"src/components/utilidades","sourcesContent":["<template>\n  <div class=\"diaCalendario\" :class=\"{ abierto }\">\n    <div id=\"barraSuperior\">\n      <div id=\"bloqueTituloDia\" @click=\"$emit('regresar')\">\n        <div id=\"nombreDia\" :class=\"{ hoy }\">\n          {{ diaSemana }}\n        </div>\n        <div id=\"fechaDia\">\n          {{ diaYMes }}\n        </div>\n        <div id=\"cantidadesEventos\">\n          {{\n            cantidadEventosRelevantes\n              ? \"(\" + cantidadEventosRelevantes + \")\"\n              : \"\"\n          }}\n        </div>\n      </div>\n    </div>\n\n    <loading texto=\"\" v-show=\"downloadingData\" />\n    <div id=\"contenedorContenido\">\n      <div id=\"barraHoras\">\n        <div\n          ref=\"labelsHoras\"\n          class=\"hora\"\n          :style=\"[estiloSizeHora]\"\n          v-for=\"hora of 24\"\n          :key=\"'hora' + (hora - 1)\"\n        >\n          {{ hora - 1 }}:00\n        </div>\n      </div>\n      <div\n        id=\"contenedorEventos\"\n        ref=\"contenedorEventos\"\n        v-show=\"!downloadingData\"\n        :style=\"[estiloSizeContenedorEventos]\"\n        @click.self=\"clickContenedorEventos\"\n      >\n        <evento-publico-calendario\n          :horaPx=\"horaPx\"\n          v-for=\"eventoPublico of eventosPublicosVisibles\"\n          :key=\"eventoPublico.id\"\n          :esteEvento=\"eventoPublico\"\n          :extranjero=\"(!idParent || idParent != eventoPublico.idParent)\"\n          :idUsuarioTarget=\"idUsuarioTarget\"\n          :seleccionado=\"idEventoSeleccionado === eventoPublico.id\"\n          :infoOffset=\"indiceOffset[eventoPublico.id]\"\n          :diaCalendarioOver=\"esteDia\"\n          :enfasis=\"enfasis\"\n          :idParent=\"idParent\"\n          :tipoParent=\"tipoParent\"\n          @meElimine=\"deleteEventoCache(eventoPublico); $emit('cambioEventos')\"\n          @click.native=\"$emit('clickEnEvento', eventoPublico)\"\n          @meCambiaronDia=\"deleteEventoCache(eventoPublico);$emit('cambioEventos')\"\n          @creadoEventoPersonal=\"addEventoCache($event);$emit('cambioEventos');\"\n        />\n        <evento-personal-calendario\n          :horaPx=\"horaPx\"\n          v-for=\"eventoPersonal of todosEventosPersonalesDia || []\"\n          :key=\"eventoPersonal.id\"\n          :esteEvento=\"eventoPersonal\"\n          :seleccionado=\"idEventoSeleccionado === eventoPersonal.id\"\n          :infoOffset=\"indiceOffset[eventoPersonal.id]\"\n          :diaCalendarioOver=\"esteDia\"\n          :enfasis=\"enfasis\"\n          :extranjero=\"\n            idUsuarioTarget != eventoPersonal.idPersona &&\n            !eventoPersonal.idsParticipantes.includes(idUsuarioTarget)\n          \"          \n          @meElimine=\"deleteEventoCache(eventoPersonal);$emit('cambioEventos')\"\n          @click.native=\"$emit('clickEnEvento', eventoPersonal)\"\n          @meCambiaronDia=\"\n            deleteEventoCache(eventoPersonal);$emit('cambioEventos');            \n          \"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport {\n  fragmentoEventoPersonal,\n  fragmentoEventoPublico,\n} from \"./fragsCalendario.js\";\nimport EventoPublicoCalendario from \"./EventoPublicoCalendario.vue\";\nimport EventoPersonalCalendario from \"./EventoPersonalCalendario.vue\";\nimport Loading from \"./Loading.vue\";\n\nconst QUERY_EVENTOS_PUBLICOS_DIA = gql`\n  query ($dateInicioDia: Date!) {\n    eventosPublicosDia(dateInicioDia: $dateInicioDia) {\n      ...fragEventoPublico\n    }\n  }\n  ${fragmentoEventoPublico}\n`;\n\nconst QUERY_EVENTOS_PERSONALES_DIA = gql`\n  query ($dateInicioDia: Date!, $idUsuario: ID!) {\n    eventosPersonalesDia(dateInicioDia: $dateInicioDia, idUsuario: $idUsuario) {\n      ...fragEventoPersonal\n    }\n  }\n  ${fragmentoEventoPersonal}\n`;\n\nconst QUERY_EVENTOS_COLISIONANTES_DIA = gql`\n  query ($dateInicioDia: Date!, $idParent: ID!, $tipoParent: String!) {\n    eventosPersonalesDeParentDia(\n      dateInicioDia: $dateInicioDia\n      idParent: $idParent\n      tipoParent: $tipoParent\n    ) {\n      ...fragEventoPersonal\n    }\n  }\n  ${fragmentoEventoPersonal}\n`;\n\nexport default {\n  components: { EventoPublicoCalendario, EventoPersonalCalendario, Loading },\n  name: \"DiaCalendario\",\n  apollo: {\n    eventosPublicosDia: {\n      query: QUERY_EVENTOS_PUBLICOS_DIA,\n      variables() {\n        return {\n          dateInicioDia: this.esteDia.date,\n        };\n      },\n      fetchPolicy: \"cache-and-network\",\n    },\n    eventosPersonalesDia: {\n      query: QUERY_EVENTOS_PERSONALES_DIA,\n      variables() {\n        return {\n          dateInicioDia: this.esteDia.date,\n          idUsuario: this.idUsuarioTarget,\n        };\n      },\n      skip() {\n        return !this.usuarioLogeado;\n      },\n      fetchPolicy: \"cache-and-network\",\n    },\n    eventosPersonalesDeParentDia: {\n      query: QUERY_EVENTOS_COLISIONANTES_DIA,\n      variables() {\n        return {\n          dateInicioDia: this.esteDia.date,\n          idParent: this.idParent,\n          tipoParent: this.tipoParent,\n        };\n      },\n      skip() {\n        return (\n          this.tipoParent != \"nodoSolidaridad\" ||\n          !this.usuarioLogeado ||\n          !this.idParent\n        );\n      },\n      fetchPolicy: \"cache-and-network\",\n    },\n  },\n  props: {\n    hoy: Boolean,\n    esteDia: Object,\n    eventoSiendoCreado: Object,\n    horaPx: Number,\n    scrollXCalendario: Number,\n    idParent: String,\n    idEventoSeleccionado: String,\n    idUsuarioTarget: String,\n    tipoParent: String,\n    enfasis: String,\n    modoEventosPublicosExtranjeros: String,\n    usuarioVeEventosPublicos: Boolean,\n  },\n  data() {\n    return {\n      eventosPublicosDia: [],\n      eventosPersonalesDia: [],\n      eventosPersonalesDeParentDia: [],\n\n      abierto: false,\n\n      creandoEvento: false,\n    };\n  },\n  methods: {\n    clickContenedorEventos(e) {\n      console.log(`Click en el contenedor de eventos`);\n      if (this.eventoSiendoCreado) {\n        const margen = 60 * 60000; //60 minutos\n        var infoNuevoEvento = JSON.parse(\n          JSON.stringify(this.eventoSiendoCreado)\n        );\n        this.$emit(\"iniciaCreacionEvento\");\n        const posContenedorEventos =\n          this.$refs.contenedorEventos.getBoundingClientRect();\n        const posX = e.pageX - posContenedorEventos.left;\n\n        const timeClicked = posX / this.horaPx;\n        var minutosClicked = Math.round(\n          (timeClicked - Math.floor(timeClicked)) * 60\n        );\n        minutosClicked = Math.floor(minutosClicked / 15) * 15; ///Set en múltiplos de 15\n\n        const timeClickedFormatted = {\n          horas: Math.floor(timeClicked),\n          minutos: minutosClicked,\n        };\n        const dateClicked =\n          this.esteDia.date.getTime() +\n          timeClickedFormatted.horas * 60 * 60000 +\n          timeClickedFormatted.minutos * 60000;\n        console.log(\n          `En ${posX} -> ${timeClickedFormatted.horas}: ${timeClickedFormatted.minutos}`\n        );\n\n        console.log(\n          `Date centralh: ${\n            this.esteDia.date.getTime() +\n            timeClickedFormatted.horas +\n            timeClickedFormatted.minutos * 60000\n          }`\n        );\n\n        var dateInicio = dateClicked;\n        var dateFinal = dateClicked + margen;\n\n        console.log(\n          `Quedará entre: ${new Date(dateInicio)} y ${new Date(dateFinal)}`\n        );\n\n        infoNuevoEvento.horarioInicio = new Date(dateInicio);\n        infoNuevoEvento.horarioFinal = new Date(dateFinal);\n        if (infoNuevoEvento.tipoEvento === \"eventoPublico\") {\n          delete infoNuevoEvento.tipoEvento;\n          this.crearEventoPublico(infoNuevoEvento);\n        } else if (infoNuevoEvento.tipoEvento === \"eventoPersonal\") {\n          delete infoNuevoEvento.tipoEvento;\n          this.crearEventoPersonal(infoNuevoEvento);\n        } else {\n          console.log(`Tipo ${infoNuevoEvento.tipoEvento} no reconocido`);\n        }\n      } else if (this.idEventoSeleccionado) {\n        this.$emit(\"desSeleccionDeEvento\");\n      }\n    },\n    addEventoCache(evento) {\n      const millisInicioEvento = new Date(evento.horarioInicio).getTime();\n      const millisInicioDia = this.esteDia.date.getTime();\n      const millisFinalDia = this.esteDia.date.getTime() + 86400000;\n\n      if (\n        millisInicioEvento < millisInicioDia ||\n        millisInicioEvento > millisFinalDia\n      ) {\n        return;\n      }\n      const tipoEvento =\n        evento.__typename.charAt(0).toLowerCase() + evento.__typename.slice(1);\n      var infoQuery = null;\n      if (tipoEvento === \"eventoPublico\") {\n        infoQuery = {\n          query: QUERY_EVENTOS_PUBLICOS_DIA,\n          variables: {\n            dateInicioDia: this.esteDia.date,\n          },\n        };\n      } else if (tipoEvento === \"eventoPersonal\") {\n        infoQuery = {\n          query: QUERY_EVENTOS_PERSONALES_DIA,\n          variables: {\n            dateInicioDia: this.esteDia.date,\n            idUsuario: this.idUsuarioTarget,\n          },\n        };\n      } else {\n        console.log(`Tipo evento ${tipoEvento} no reconocido`);\n        return;\n      }\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        ...infoQuery,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      var listaEventosCache = null;\n      if (tipoEvento === \"eventoPublico\") {\n        listaEventosCache = nuevoCache.eventosPublicosDia;\n      } else if (tipoEvento === \"eventoPersonal\") {\n        listaEventosCache = nuevoCache.eventosPersonalesDia;\n      }\n      const indexE = listaEventosCache.findIndex((e) => e.id === evento.id);\n      if (indexE === -1) {\n        listaEventosCache.push(evento);\n\n        store.writeQuery({\n          ...infoQuery,\n          data: nuevoCache,\n        });\n      }\n    },\n    crearEventoPublico(infoNuevoEvento) {\n      console.log(\n        `Creando un evento publico con info ${JSON.stringify(infoNuevoEvento)}`\n      );\n\n      this.creandoEvento = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoNuevoEvento: InputCrearEventoPublico) {\n              crearEventoPublico(infoNuevoEvento: $infoNuevoEvento) {\n                ...fragEventoPublico\n              }\n            }\n            ${fragmentoEventoPublico}\n          `,\n          variables: {\n            infoNuevoEvento,\n          },\n        })\n        .then(({ data: { crearEventoPublico } }) => {\n          this.creandoEvento = false;\n\n          this.addEventoCache(crearEventoPublico);\n           this.$emit(\"cambioEventos\");\n\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.creandoEvento = false;\n        });\n    },\n    crearEventoPersonal(infoNuevoEvento) {\n      console.log(\n        `Creando un evento personal con info ${JSON.stringify(infoNuevoEvento)}`\n      );\n      this.creandoEvento = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoEventoPersonal: InputCrearEventoPersonal) {\n              crearEventoPersonal(infoEventoPersonal: $infoEventoPersonal) {\n                ...fragEventoPersonal\n              }\n            }\n            ${fragmentoEventoPersonal}\n          `,\n          variables: {\n            infoEventoPersonal: {\n              ...infoNuevoEvento,\n              idPersona: this.idUsuarioTarget,\n            },\n          },\n        })\n        .then(({ data: { crearEventoPersonal } }) => {\n          this.creandoEvento = false;\n          this.addEventoCache(crearEventoPersonal);\n           this.$emit(\"cambioEventos\");\n\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.creandoEvento = false;\n        });\n    },\n    deleteEventoCache(evento) {\n      const tipoEvento =\n        evento.__typename.charAt(0).toLowerCase() + evento.__typename.slice(1);\n\n      console.log(`Deleting ${tipoEvento} ${evento.nombre} from cache`);\n\n      var infoQuery = null;\n      if (tipoEvento === \"eventoPublico\") {\n        infoQuery = {\n          query: QUERY_EVENTOS_PUBLICOS_DIA,\n          variables: {\n            dateInicioDia: this.esteDia.date,\n          },\n        };\n      } else if (tipoEvento === \"eventoPersonal\") {\n        infoQuery = {\n          query: QUERY_EVENTOS_PERSONALES_DIA,\n          variables: {\n            dateInicioDia: this.esteDia.date,\n            idUsuario: this.idUsuarioTarget,\n          },\n        };\n      } else {\n        console.log(`Tipo evento ${tipoEvento} no reconocido`);\n        return;\n      }\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        ...infoQuery,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      var listaEventosCache = null;\n      if (tipoEvento === \"eventoPublico\") {\n        listaEventosCache = nuevoCache.eventosPublicosDia;\n      } else if (tipoEvento === \"eventoPersonal\") {\n        listaEventosCache = nuevoCache.eventosPersonalesDia;\n      }\n      const indexE = listaEventosCache.findIndex((e) => e.id === evento.id);\n      if (indexE > -1) {\n        listaEventosCache.splice(indexE, 1);\n        store.writeQuery({\n          ...infoQuery,\n          data: nuevoCache,\n        });\n      }\n    },\n  },\n  computed: {\n    diaSemana() {\n      const nombres = [\n        \"Domingo\",\n        \"Lunes\",\n        \"Martes\",\n        \"Miércoles\",\n        \"Jueves\",\n        \"Viernes\",\n        \"Sábado\",\n        \"Domingo\",\n      ];\n      return nombres[this.esteDia.date.getDay()];\n    },\n    diaYMes() {\n      const meses = [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ];\n\n      return (\n        this.esteDia.date.getDate() +\n        \" de \" +\n        meses[this.esteDia.date.getMonth()]\n      );\n    },\n    eventosPublicosVisibles() {\n      if (this.enfasis === \"eventosPublicos\") {\n        if (this.modoEventosPublicosExtranjeros === \"invisibles\") {\n          return this.eventosPublicosDia.filter(\n            (e) =>\n              e.idParent === this.idParent ||\n              e.idAdministrador === this.idUsuarioTarget\n          );\n        } else {\n          return this.eventosPublicosDia;\n        }\n      } else if (this.enfasis === \"eventosPersonales\") {\n        if (this.usuarioVeEventosPublicos) {\n          return this.eventosPublicosDia;\n        } else {\n          // return this.eventosPublicosDia.filter((ev) =>\n          //   this.eventosPersonalesDia.some((ep) => ep.idEventoMarco === ev.id)\n          // );\n          return this.eventosPublicosDia.filter(\n            (ep) => ep.idAdministrador === this.idUsuarioTarget\n          );\n        }\n      } else {\n        return [];\n      }\n    },\n    eventosPublicosUsuarioTarget() {\n      return this.eventosPublicosDia.filter(\n        (ev) => ev.idAdministrador === this.idUsuarioTarget\n      );\n    },\n    estiloSizeContenedorEventos() {\n      const alturaEventos = Object.values(this.indiceOffset).reduce(\n        (acc, a) => (a.top + a.height > acc ? a.top + a.height : acc),\n        0\n      );\n\n      return {\n        width: this.horaPx * 24 + \"px\",\n        height: alturaEventos + 45 + \"px\",\n      };\n    },\n    cantidadEventosPublicos() {\n      return this.eventosPublicosDia.length;\n    },\n    cantidadEventosRelevantes() {\n      if (this.enfasis === \"eventosPublicos\") {\n        if (!this.idParent) {\n          return this.cantidadEventosPublicos;\n        } else {\n          return this.eventosPublicosDia.filter(\n            (p) => p.idParent === this.idParent\n          ).length;\n        }\n      } else if (this.enfasis === \"eventosPersonales\") {\n        if (this.idParent) {\n          return this.eventosPersonalesDia.filter(\n            (ev) => ev.idParent === this.idParent\n          ).length;\n        }\n        return (\n          this.eventosPersonalesDia.length +\n          this.eventosPublicosUsuarioTarget.length\n        );\n      } else {\n        return 0;\n      }\n    },\n    indiceOffset() {\n      const sizeBarra = 15;\n      const sizeBloque = 160;\n      const marginRows = 5;\n      const lineaEventosPublicosAsistidos = 30;\n      // console.log(\n      //   `%c Iniciando calculo de indice de offset`,\n      //   \"background: #222; color: #bada55\"\n      // );\n      var indice = {};\n\n      if (!this.usuarioLogeado) {\n        console.log(`Cancelando índice offset`);\n        return null;\n      }\n\n      this.todosEventosPersonalesDia.forEach((ev) => {\n        let heightEvento = sizeBloque;\n        let claseEvento = \"bloque\";\n        let top = marginRows;\n\n        if (this.enfasis === \"eventosPersonales\") {\n          if (this.idParent) {\n            if (ev.idParent != this.idParent) {\n              heightEvento = sizeBarra;\n              claseEvento = \"barra\";\n            }\n          }\n        } else {\n          heightEvento = sizeBarra;\n          claseEvento = \"barra\";\n        }\n\n        indice[ev.id] = {\n          evento: ev,\n          top,\n          height: heightEvento,\n          bordeBot: top + heightEvento,\n          clase: claseEvento,\n        };\n      });\n\n      var listaEventosPublicos = JSON.parse(\n        JSON.stringify(this.eventosPublicosVisibles)\n      );\n      listaEventosPublicos.sort((a, b) => {\n        var res = 0;\n        if (a.idAdministrador === this.idUsuarioTarget) {\n          res++;\n        } else if (\n          this.eventosPersonalesDia.some((e) => e.idEventoMarco === a.id)\n        ) {\n          res++;\n        }\n        if (b.idAdministrador === this.idUsuarioTarget) {\n          res--;\n        } else if (\n          this.eventosPersonalesDia.some((e) => e.idEventoMarco === b.id)\n        ) {\n          res--;\n        }\n        return -res;\n      });\n      // console.log(\n      //   `Eventos sorted: ${listaEventosPublicos.map((e) => e.nombre)}`\n      // );\n\n      listaEventosPublicos.forEach((ev) => {\n        // console.log(`Iterando en ${ev.nombre}`);\n        let eventoAsisteUsuarioTarget = this.eventosPersonalesDia.some(\n          (ep) => ep.idEventoMarco === ev.id\n        );\n        let heightEvento = sizeBloque;\n        let claseEvento = \"bloque\";\n        if (\n          this.enfasis === \"eventosPublicos\" &&\n          ev.idParent != this.idParent &&\n          this.modoEventosPublicosExtranjeros != \"full\"\n        ) {\n          heightEvento = sizeBarra;\n          claseEvento = \"barra\";\n        }\n        // console.log(\n        //   `cantidad de entries en el indice ${\n        //     Object.entries(indice).map((e) => e[1]).length\n        //   }`\n        // );\n\n        let top = 0;\n        if (this.enfasis === \"eventosPersonales\" && eventoAsisteUsuarioTarget) {\n          top = lineaEventosPublicosAsistidos;\n        } else {\n          let eventosColision = Object.entries(indice)\n            .map((e) => e[1])\n            .filter((t) => {\n              // console.log(`Comparando con ${t.evento.nombre}`);\n              const inicioDentro =\n                t.evento.horarioInicio > ev.horarioInicio &&\n                t.evento.horarioInicio < ev.horarioFinal;\n              const finalDentro =\n                t.evento.horarioFinal > ev.horarioInicio &&\n                t.evento.horarioFinal < ev.horarioFinal;\n\n              const sobrepone =\n                t.evento.horarioInicio <= ev.horarioInicio &&\n                t.evento.horarioFinal >= ev.horarioFinal;\n\n              // console.log(`Inicio dentro: ${inicioDentro}`);\n              // console.log(`Final dentro: ${finalDentro}`);\n\n              const colision = inicioDentro || finalDentro || sobrepone;\n              // if (colision) {\n              //   console.log(`colision`);\n              // }\n              return colision;\n            });\n\n          // console.log(`${eventosColision.length} eventos en colisión`);\n\n          let bordeBotColision = eventosColision.reduce(\n            (acc, e) => (e.bordeBot > acc ? e.bordeBot : acc),\n            0\n          );\n\n          top = bordeBotColision + marginRows;\n        }\n\n        // console.log(`Queda en ${top} + ${heightEvento}`);\n        indice[ev.id] = {\n          evento: ev,\n          top: top,\n          height: heightEvento,\n          bordeBot: top + heightEvento + sizeBarra,\n          clase: claseEvento,\n        };\n      });\n      return indice;\n    },\n    todosEventosPersonalesDia() {\n      return this.eventosPersonalesDia.concat(\n        this.eventosPersonalesDeParentDia.filter(\n          (epp) =>\n            !this.eventosPersonalesDia.map((ep) => ep.id).includes(epp.id)\n        )\n      );\n    },\n    estiloSizeHora() {\n      return {\n        width: this.horaPx + \"px\",\n      };\n    },\n    downloadingData() {\n      return (\n        (this.$apollo.queries.eventosPersonalesDeParentDia &&\n          this.$apollo.queries.eventosPersonalesDeParentDia.loading) ||\n        (this.$apollo.queries.eventosPublicosDia &&\n          this.$apollo.queries.eventosPublicosDia.loading) ||\n        (this.$apollo.queries.eventosPersonalesDia &&\n          this.$apollo.queries.eventosPersonalesDia.loading)\n      );\n    },\n  },\n  watch: {},\n  mounted() {\n    const horaActual = new Date().getHours();\n    console.log(`Scrolling into ${horaActual}`);\n    this.$nextTick(() => {\n      this.$refs.labelsHoras[8].scrollIntoView({\n        block: \"nearest\",\n        inline: \"start\",\n      });\n    });\n  },\n};\n</script>\n\n<style scoped>\n#contenedorEventos {\n  min-height: 100px;\n  background-color: var(--grisHover);\n  padding: 20px 0px;\n  position: relative;\n}\n#barraSuperior {\n  display: flex;\n  font-family: Salsa, cursive;\n  align-items: center;\n  height: 25px;\n}\n#contenedorContenido {\n  width: 100%;\n  overflow: scroll;\n  height: 80vh;\n}\n#barraHoras {\n  display: flex;\n  overflow: visible;\n  padding: 14px 0px;\n}\n#barraHoras .hora {\n  font-size: 10px;\n  opacity: 0.4;\n  position: relative;\n  overflow: visible;\n  flex-shrink: 0;\n}\n#bloqueTituloDia {\n  display: flex;\n  align-items: center;\n  margin-left: 1vw;\n}\n#nombreDia {\n  margin-right: 2vw;\n  font-size: 10px;\n}\n#nombreDia.hoy {\n  color: red;\n}\n#fechaDia {\n  font-size: 10px;\n  opacity: 0.5;\n}\n#cantidadesEventos {\n  margin-left: 10px;\n  font-size: 10px;\n}\n</style>"]}]}