{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/HomeNodo.vue?vue&type=template&id=32d78d82&scoped=true&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/HomeNodo.vue","mtime":1644587546122},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGtleTogX3ZtLiRyb3V0ZS5wYXJhbXMuaWQsIHN0YXRpY0NsYXNzOiAiaG9tZU5vZG8iIH0sCiAgICBbCiAgICAgIF9jKCJsb2FkaW5nIiwgewogICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgdmFsdWU6IF92bS4kYXBvbGxvLnF1ZXJpZXMuZXN0ZU5vZG8ubG9hZGluZywKICAgICAgICAgICAgZXhwcmVzc2lvbjogIiRhcG9sbG8ucXVlcmllcy5lc3RlTm9kby5sb2FkaW5nIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICB2YWx1ZTogIV92bS4kYXBvbGxvLnF1ZXJpZXMuZXN0ZU5vZG8ubG9hZGluZywKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiISRhcG9sbG8ucXVlcmllcy5lc3RlTm9kby5sb2FkaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJiYXJyYVN1cGVyaW9yIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uZXN0ZU5vZG8ubm9kb1BhcmVudAogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICBfdm0uY2xpZW50ZVVybCArCiAgICAgICAgICAgICAgICAgICAgICAiLyMvaG9tZU5vZG9Tb2xpZGFyaWRhZC8iICsKICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5ub2RvUGFyZW50CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2RvdWJsZVVwLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiVXAiLAogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJOYXZlZ2FyIGFsIG5vZG8gcGFyZW50IiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAiYm90b25Jck5vZG9QYXJlbnQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiem9uYVRpdHVsb05vZG8iIH0gfSwgWwogICAgICAgICAgICBfdm0uZXN0ZU5vZG8udGlwb05vZG8gPT09ICJ0cmFiYWpvIgogICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdmctaW5saW5lLS1mYSBmYS1jb2cgZmEtdy0xNiBpY29ub05vZG8iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGU6ICJmYWxzZSIsCiAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1wcmVmaXgiOiAiZmFzIiwKICAgICAgICAgICAgICAgICAgICAgICJkYXRhLWljb24iOiAiY29nIiwKICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDUxMiA1MTIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBfdm0uY29sb3JJY29ubywKICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAiTTQ4Ny40IDMxNS43bC00Mi42LTI0LjZjNC4zLTIzLjIgNC4zLTQ3IDAtNzAuMmw0Mi42LTI0LjZjNC45LTIuOCA3LjEtOC42IDUuNS0xNC0xMS4xLTM1LjYtMzAtNjcuOC01NC43LTk0LjYtMy44LTQuMS0xMC01LjEtMTQuOC0yLjNMMzgwLjggMTEwYy0xNy45LTE1LjQtMzguNS0yNy4zLTYwLjgtMzUuMVYyNS44YzAtNS42LTMuOS0xMC41LTkuNC0xMS43LTM2LjctOC4yLTc0LjMtNy44LTEwOS4yIDAtNS41IDEuMi05LjQgNi4xLTkuNCAxMS43Vjc1Yy0yMi4yIDcuOS00Mi44IDE5LjgtNjAuOCAzNS4xTDg4LjcgODUuNWMtNC45LTIuOC0xMS0xLjktMTQuOCAyLjMtMjQuNyAyNi43LTQzLjYgNTguOS01NC43IDk0LjYtMS43IDUuNC42IDExLjIgNS41IDE0TDY3LjMgMjIxYy00LjMgMjMuMi00LjMgNDcgMCA3MC4ybC00Mi42IDI0LjZjLTQuOSAyLjgtNy4xIDguNi01LjUgMTQgMTEuMSAzNS42IDMwIDY3LjggNTQuNyA5NC42IDMuOCA0LjEgMTAgNS4xIDE0LjggMi4zbDQyLjYtMjQuNmMxNy45IDE1LjQgMzguNSAyNy4zIDYwLjggMzUuMXY0OS4yYzAgNS42IDMuOSAxMC41IDkuNCAxMS43IDM2LjcgOC4yIDc0LjMgNy44IDEwOS4yIDAgNS41LTEuMiA5LjQtNi4xIDkuNC0xMS43di00OS4yYzIyLjItNy45IDQyLjgtMTkuOCA2MC44LTM1LjFsNDIuNiAyNC42YzQuOSAyLjggMTEgMS45IDE0LjgtMi4zIDI0LjctMjYuNyA0My42LTU4LjkgNTQuNy05NC42IDEuNS01LjUtLjctMTEuMy01LjYtMTQuMXpNMjU2IDMzNmMtNDQuMSAwLTgwLTM1LjktODAtODBzMzUuOS04MCA4MC04MCA4MCAzNS45IDgwIDgwLTM1LjkgODAtODAgODB6IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICBfdm0uZXN0ZU5vZG8udGlwb05vZG8gPT09ICJvYmpldGl2byIKICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic3ZnLWlubGluZS0tZmEgZmEtc3RhciBmYS13LTE4IGljb25vTm9kbyIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZTogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXByZWZpeCI6ICJmYXMiLAogICAgICAgICAgICAgICAgICAgICAgImRhdGEtaWNvbiI6ICJzdGFyIiwKICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDU3NiA1MTIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBfdm0uY29sb3JJY29ubywKICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAiTTI1OS4zIDE3LjhMMTk0IDE1MC4yIDQ3LjkgMTcxLjVjLTI2LjIgMy44LTM2LjcgMzYuMS0xNy43IDU0LjZsMTA1LjcgMTAzLTI1IDE0NS41Yy00LjUgMjYuMyAyMy4yIDQ2IDQ2LjQgMzMuN0wyODggNDM5LjZsMTMwLjcgNjguN2MyMy4yIDEyLjIgNTAuOS03LjQgNDYuNC0zMy43bC0yNS0xNDUuNSAxMDUuNy0xMDNjMTktMTguNSA4LjUtNTAuOC0xNy43LTU0LjZMMzgyIDE1MC4yIDMxNi43IDE3LjhjLTExLjctMjMuNi00NS42LTIzLjktNTcuNCAweiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvTm9tYnJlLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhZWRpdGFuZG9Ob21icmUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInRpdHVsbyIgfSwKICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0udG9nZ2xlRWRpdGFuZG9Ob21icmUgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLmVzdGVOb2RvLm5vbWJyZSkgKyAiICIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubnVldm9Ob21icmUsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b05vbWJyZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9Ob21icmUsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0YW5kb05vbWJyZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9Ob21icmUiLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXROb21icmVDb3NhIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjI1MHB4IiB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgaWQ6ICJpbnB1dE51ZXZvTm9tYnJlIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubnVldm9Ob21icmUgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9rKCRldmVudC5rZXlDb2RlLCAiZW50ZXIiLCAxMywgJGV2ZW50LmtleSwgIkVudGVyIikKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b05vbWJyZSgkZXZlbnQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIF92bS5lZGl0YW5kb05vbWJyZSA9IGZhbHNlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAga2V5ZG93bjogX3ZtLmtleWRvd25JbnB1dE51ZXZvTm9tYnJlLAogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0ubnVldm9Ob21icmUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ6b25hQ29udHJvbGVzTm9kbyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibG9xdWVDb250cm9sTm9kbyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6ICJ6b25hUG9yY2VudGFqZUNvbXBsZXRhZG8iLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdm0udXN1YXJpb1Jlc3BvbnNhYmxlCiAgICAgICAgICAgICAgICAgICAgICA/ICJEZWZpbmlyIHByb2dyZXNvIGRlbCBub2RvIgogICAgICAgICAgICAgICAgICAgICAgOiAiUHJvZ3Jlc28gZGVsIG5vZG8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAicG9yY2VudGFqZUNvbXBsZXRhZG8iIH0gfSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiBib3RvbkNvbnRyb2xOb2RvIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvcmVsb2pBcmVuYS5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlByb2dyZXNvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmxvcXVlQ29udHJvbE5vZG8iLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiAiem9uYVRpZW1wb0VzdGltYWRvIiwKICAgICAgICAgICAgICAgICAgICB0aXRsZTogX3ZtLnVzdWFyaW9SZXNwb25zYWJsZQogICAgICAgICAgICAgICAgICAgICAgPyAiRGVmaW5pciB0aWVtcG8gZXN0aW1hZG8gcGFyYSBjb21wbGV0YXIgZXN0ZSBub2RvIgogICAgICAgICAgICAgICAgICAgICAgOiAiVGllbXBvIGVzdGltYWRvIHBhcmEgY29tcGxldGFyIGVzdGUgbm9kbyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ0aWVtcG9Fc3RpbWFkbyIgfSB9KSwKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIGJvdG9uQ29udHJvbE5vZG8iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9jYWxlbmRhci5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkNhbGVuZGFyaW8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibG9xdWVDb250cm9sTm9kbyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiYmxvcXVlTWFyY2FyTm9kb0NvbXBsZXRhZG8iIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS50b2dnbGluZ0VzdGFkbywKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiF0b2dnbGluZ0VzdGFkbyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gYm90b25Db250cm9sTm9kbyIsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjoKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVzdGVOb2RvLmVzdGFkb0Rlc2Fycm9sbG8gPT09ICJjb21wbGV0YWRvIgogICAgICAgICAgICAgICAgICAgICAgICAgID8gInZhcigtLWF0bGFzRmlsdGVyVmVyZGUpIgogICAgICAgICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9jaGVjay5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkNoZWNrIiwKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOgogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZXN0ZU5vZG8uZXN0YWRvRGVzYXJyb2xsbyA9PT0gImNvbXBsZXRhZG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiRGVzbWFyY2FyIGVzdGUgbm9kbyBjb21vIGNvbXBsZXRhZG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiTWFyY2FyIGVzdGUgbm9kbyBjb21vIGNvbXBsZXRhZG8iLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJib3Rvbk1hcmNhck5vZG9Db21wbGV0YWRvIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS50b2dnbGVFc3RhZG9Ob2RvIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJsb2FkaW5nIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udG9nZ2xpbmdFc3RhZG8sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRvZ2dsaW5nRXN0YWRvIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICIiIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uJGFwb2xsby5xdWVyaWVzLmVzdGVOb2RvLmxvYWRpbmcsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiEkYXBvbGxvLnF1ZXJpZXMuZXN0ZU5vZG8ubG9hZGluZyIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29udGVuaWRvTm9kbyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJwcmltZXJhUm93IiB9IH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibG9xdWVDb250ZW5pZG8iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJibG9xdWVJbmZvcm1hY2lvbiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYXJyYVN1cGVyaW9yR2VuZXJhbCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgImJvdG9uIGJvdG9uQmFycmFTdXBlcmlvckdlbmVyYWwgYm90b25TZWxlY3RvckNvbnRlbmlkb05vZG8iLAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAoIV92bS5lc3RlTm9kby5kZXNjcmlwY2lvbiB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVzdGVOb2RvLmRlc2NyaXBjaW9uLmxlbmd0aCA8IDEgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5kZXNjcmlwY2lvbiA9PT0gIlNpbiBkZXNjcmlwY2lvbiIgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5kZXNjcmlwY2lvbiA9PT0gIlNpbiBkZXNjcmlwY2nDs24iKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICFfdm0udXN1YXJpb0FkbWluaXN0cmFkb3IKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAiZGVzY3JpcGNpb24iID8gIndoaXRlIiA6ICJibGFjayIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAiZGVzY3JpcGNpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJNb3N0cmFyIGRlc2NyaXBjacOzbiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9ICJkZXNjcmlwY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9pbmZvLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkRlc2NyaXBjacOzbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiYm90b24gYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCBib3RvblNlbGVjdG9yQ29udGVuaWRvTm9kbyIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAicmVzcG9uc2FibGVzIiA/ICJ3aGl0ZSIgOiAiYmxhY2siCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9PT0gInJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIk1vc3RyYXIgcmVzcG9uc2FibGVzIGRlbCBub2RvIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID0gInJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy91c2VyLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAiYm90b24gYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCBib3RvblNlbGVjdG9yQ29udGVuaWRvTm9kbyIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOgogICAgICAgICAgICAgICAgICAgICAgICAgICghX3ZtLmVzdGVOb2RvLmtleXdvcmRzIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZXN0ZU5vZG8ua2V5d29yZHMubGVuZ3RoIDwgMSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAhX3ZtLnVzdWFyaW9BZG1pbmlzdHJhZG9yCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9PT0gImtleXdvcmRzIiA/ICJ3aGl0ZSIgOiAiYmxhY2siCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9PT0gImtleXdvcmRzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiTW9zdHJhciBwYWxhYnJhcyBjbGF2ZSIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9ICJrZXl3b3JkcyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy90YWcuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiS2V5d29yZHMiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tb3N0cmFuZG8gPT09ICJkZXNjcmlwY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtb3N0cmFuZG8gPT09ICdkZXNjcmlwY2lvbiciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInpvbmFJbmZvcm1hY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ6b25hRGVzY3JpcGNpb24iIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvRGVzY3JpcGNpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvRGVzY3JpcGNpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJkZXNjcmlwY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udGVuaWRvVGV4dG8iLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImRlc2NyaXBjaW9uIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvRGVzY3JpcGNpb24gfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5lc3RlTm9kby5kZXNjcmlwY2lvbikgKyAiICIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b0Rlc2NyaXBjaW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b0Rlc2NyaXBjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9EZXNjcmlwY2lvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGFuZG9EZXNjcmlwY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9EZXNjcmlwY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0VGV4dG9Ob2RvIiwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGxldHJhc1JvamFzOiBfdm0ubnVldm9EZXNjcmlwY2lvbklsZWdhbCB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpbnB1dE51ZXZvRGVzY3JpcGNpb24iIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51ZXZvRGVzY3JpcGNpb24gfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubnVldm9EZXNjcmlwY2lvbiA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9EZXNjcmlwY2lvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0YW5kb0Rlc2NyaXBjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW5lZG9yQm90b25lc0NhbXBvIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIGJvdG9uR3VhcmRhckNhbXBvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3Mvc2F2ZS5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkd1YXJkYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJHdWFyZGFyIGRlc2NyaXBjacOzbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImJvdG9uR3VhcmRhckRlc2NyaXBjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5ndWFyZGFyTnVldm9EZXNjcmlwY2lvbiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gYm90b25HdWFyZGFyQ2FtcG8iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9lcXVpcy5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkNhbmNlbGFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ2FuY2VsYXIgZWRpY2nDs24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJib3RvbkNhbmNlbGFyRWRpY2lvbkRlc2NyaXBjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVkaXRhbmRvRGVzY3JpcGNpb24gPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJsb2FkaW5nIiwgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZW52aWFuZG9OdWV2b0Rlc2NyaXBjaW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlbnZpYW5kb051ZXZvRGVzY3JpcGNpb24iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0ZXh0bzogIkVudmlhbmRvLi4uIiB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tb3N0cmFuZG8gPT09ICJrZXl3b3JkcyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtb3N0cmFuZG8gPT09ICdrZXl3b3JkcyciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInpvbmFJbmZvcm1hY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ6b25hS2V5d29yZHMiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvS2V5d29yZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvS2V5d29yZHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJrZXl3b3JkcyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udGVuaWRvVGV4dG8iLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImtleXdvcmRzIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvS2V5d29yZHMgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5lc3RlTm9kby5rZXl3b3JkcykgKyAiICIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b0tleXdvcmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b0tleXdvcmRzIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9LZXl3b3JkcywKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGFuZG9LZXl3b3JkcyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9LZXl3b3JkcyIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0VGV4dG9Ob2RvIiwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGxldHJhc1JvamFzOiBfdm0ubnVldm9LZXl3b3Jkc0lsZWdhbCB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpbnB1dE51ZXZvS2V5d29yZHMiIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51ZXZvS2V5d29yZHMgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd246IFsKICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVzYyIsIDI3LCAkZXZlbnQua2V5LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVzYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVzY2FwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9LZXl3b3JkcyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5faygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQua2V5Q29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZW50ZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5rZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ3VhcmRhck51ZXZvS2V5d29yZHMoJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5udWV2b0tleXdvcmRzID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb0tleXdvcmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvS2V5d29yZHMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbmVkb3JCb3RvbmVzQ2FtcG8iCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gYm90b25HdWFyZGFyQ2FtcG8iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9zYXZlLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiR3VhcmRhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkd1YXJkYXIgcGFsYWJyYXMgY2xhdmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJib3Rvbkd1YXJkYXJLZXl3b3JkcyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uZ3VhcmRhck51ZXZvS2V5d29yZHMgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIGJvdG9uR3VhcmRhckNhbXBvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvZXF1aXMuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJDYW5jZWxhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkNhbmNlbGFyIGVkaWNpw7NuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiYm90b25DYW5jZWxhckVkaWNpb25LZXl3b3JkcyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lZGl0YW5kb0tleXdvcmRzID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVudmlhbmRvTnVldm9LZXl3b3JkcywKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW52aWFuZG9OdWV2b0tleXdvcmRzIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICJFbnZpYW5kby4uLiIgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9zdHJhbmRvID09PSAicmVzcG9uc2FibGVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1vc3RyYW5kbyA9PT0gJ3Jlc3BvbnNhYmxlcyciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInpvbmFJbmZvcm1hY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ6b25hUmVzcG9uc2FibGVzIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbmVkb3JCb3RvbmVzWm9uYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29udGVuZWRvckJvdG9uZXNSZXNwb25zYWJsZXMiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhX3ZtLnVzdWFyaW9SZXNwb25zYWJsZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdm0udXN1YXJpb1Bvc2libGVSZXNwb25zYWJsZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIXVzdWFyaW9SZXNwb25zYWJsZSAmJiAhdXN1YXJpb1Bvc2libGVSZXNwb25zYWJsZSAmJiAhaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvdG9uIGJvdG9uQ29udHJvbFpvbmEgYm90b25Db250cm9sUmVzcG9uc2FibGVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLmVudmlhbmRvUXVlcnlSZXNwb25zYWJsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9tYXMuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJFbnRyYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5yZXNwb25zYWJsZXMubGVuZ3RoIDwgMSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udXN1YXJpb1BhcmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIkFzdW1pciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJTb2xpY2l0YXIgcGFydGljaXBhY2nDs24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJib3RvbkVudHJhclJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmVudHJhclJlc3BvbnNhYmxlcygkZXZlbnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfdm0udXN1YXJpb1Jlc3BvbnNhYmxlIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udXN1YXJpb1Bvc2libGVSZXNwb25zYWJsZSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIV92bS5pZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbyA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW8uaWQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAodXN1YXJpb1Jlc3BvbnNhYmxlIHx8IHVzdWFyaW9Qb3NpYmxlUmVzcG9uc2FibGUpICYmXG4gICAgICAgICAgICAgICAgKCFpZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvIHx8XG4gICAgICAgICAgICAgICAgICBpZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvID09PSB1c3VhcmlvLmlkKVxuICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJib3RvbiBib3RvbkNvbnRyb2xab25hIGJvdG9uQ29udHJvbFJlc3BvbnNhYmxlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb1F1ZXJ5UmVzcG9uc2FibGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvbWludXMuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJTYWxpciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkFiYW5kb25hciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImJvdG9uQWJhbmRvbmFyUmVzcG9uc2FibGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYWJhbmRvbmFyTGlzdGFSZXNwb25zYWJsZXMoJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfdm0udXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvciB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW9QYXJlbnQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvICYmICh1c3VhcmlvU3VwZXJhZG1pbmlzdHJhZG9yIHx8IHVzdWFyaW9QYXJlbnQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYm90b24gYm90b25Db250cm9sWm9uYSBib3RvbkNvbnRyb2xSZXNwb25zYWJsZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9RdWVyeVJlc3BvbnNhYmxlcwogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL21pbnVzLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiU2FjYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJSZXRpcmFyIHVzdWFyaW8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJib3RvblJldGlyYXJVc3VhcmlvRnJvbVJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnJldGlyYXJVc3VhcmlvRnJvbUxpc3RhUmVzcG9uc2FibGVzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW9SZXNwb25zYWJsZUFtcGxpbyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIV92bS5lc3RlTm9kby5yZXNwb25zYWJsZXMuaW5jbHVkZXMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgIHVzdWFyaW9SZXNwb25zYWJsZUFtcGxpbyAmJlxuICAgICAgICAgICAgICAgIGlkUmVzcG9uc2FibGVTZWxlY2Npb25hZG8gJiZcbiAgICAgICAgICAgICAgICAhZXN0ZU5vZG8ucmVzcG9uc2FibGVzLmluY2x1ZGVzKGlkUmVzcG9uc2FibGVTZWxlY2Npb25hZG8pXG4gICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvdG9uIGJvdG9uQ29udHJvbFpvbmEgYm90b25Db250cm9sUmVzcG9uc2FibGVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLmVudmlhbmRvUXVlcnlSZXNwb25zYWJsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9oYW5kc2hha2Uuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJBY2VwdGFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQWNlcHRhciBjb21vIHJlc3BvbnNhYmxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiYm90b25BY2VwdGFyUmVzcG9uc2FibGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5hY2VwdGFyUmVzcG9uc2FibGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlkUmVzcG9uc2FibGVTZWxlY2Npb25hZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsb2FkaW5nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lbnZpYW5kb1F1ZXJ5UmVzcG9uc2FibGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW52aWFuZG9RdWVyeVJlc3BvbnNhYmxlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRleHRvOiAiIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJsaXN0YVJlc3BvbnNhYmxlcyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pZFJlc3BvbnNhYmxlU2VsZWNjaW9uYWRvID0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5yZXNwb25zYWJsZXMuY29uY2F0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVzdGVOb2RvLnBvc2libGVzUmVzcG9uc2FibGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihpZFJlc3BvbnNhYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImljb25vLXBlcnNvbmEtYXV0b25vbW8iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaWRSZXNwb25zYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBfdm0uZXN0ZU5vZG8ucG9zaWJsZXNSZXNwb25zYWJsZXMuaW5jbHVkZXMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFJlc3BvbnNhYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAwLjUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkUGVyc29uYTogaWRSZXNwb25zYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY2Npb25hZG86CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbyA9PQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRSZXNwb25zYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWN0b3JFc2NhbGE6ICIwLjciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZXNwb25zYWJsZVNlbGVjY2lvbmFkbyA9IGlkUmVzcG9uc2FibGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiYnVzY2Fkb3ItcGVyc29uYXMiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX3ZtLnVzdWFyaW9QYXJlbnQgJiYgX3ZtLnVzdWFyaW9Qcm9mZSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKHVzdWFyaW9QYXJlbnQgJiYgdXN1YXJpb1Byb2ZlKSB8fCB1c3VhcmlvU3VwZXJhZG1pbmlzdHJhZG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrRW5SZXN1bHRhZG86IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFkZFJlc3BvbnNhYmxlTWFudWFsbHkoJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJsb3F1ZUNvbnRlbmlkbyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImJsb3F1ZVN1Yk5vZG9zIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kb09wY2lvbmVzQ3JlYXJTdWJOb2RvID0gZmFsc2UKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYXJyYVN1cGVyaW9yR2VuZXJhbCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdHVsb0Jsb3F1ZSIgfSwgW192bS5fdigiTm9kb3MiKV0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRyb2xlc0Jsb3F1ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNvbnRyb2xlc1JlY3Vyc29zRXh0ZXJub3MiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIV92bS5tb3N0cmFuZG9PcGNpb25lc0NyZWFyU3ViTm9kbyAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS51c3VhcmlvUmVzcG9uc2FibGVBbXBsaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICFtb3N0cmFuZG9PcGNpb25lc0NyZWFyU3ViTm9kbyAmJiB1c3VhcmlvUmVzcG9uc2FibGVBbXBsaW9cbiAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiBib3RvbkJhcnJhU3VwZXJpb3JHZW5lcmFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvT3BjaW9uZXNDcmVhclN1Yk5vZG8gPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5jcmVhbmRvU3ViTm9kbyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvcGx1c0NpcmNsZS5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiTnVldm8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkNyZWFyIG51ZXZvIG5vZG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxvYWRpbmciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jcmVhbmRvU3ViTm9kbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3JlYW5kb1N1Yk5vZG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0ZXh0bzogIiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9zdHJhbmRvT3BjaW9uZXNDcmVhclN1Yk5vZG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtb3N0cmFuZG9PcGNpb25lc0NyZWFyU3ViTm9kbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5jcmVhbmRvU3ViTm9kbyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29udGVuZWRvck9wY2lvbmVzQ3JlYXIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lc3RlTm9kby50aXBvTm9kbyA9PT0gIm9iamV0aXZvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZXN0ZU5vZG8udGlwb05vZG8gPT09ICdvYmpldGl2byciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvdG9uIGJvdG9uQmFycmFTdXBlcmlvckdlbmVyYWwgb3BjaW9uQ3JlYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3Mvc3RhclNvbGlkLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJPYmpldGl2byIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ3JlYXIgbnVldm8gb2JqZXRpdm8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY3JlYXJOdWV2b05vZG9VbmRlcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGlwb05vZG86ICJvYmpldGl2byIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJvdG9uIGJvdG9uQmFycmFTdXBlcmlvckdlbmVyYWwgb3BjaW9uQ3JlYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvY29nLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJUcmFiYWpvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDcmVhciBudWV2byB0cmFiYWpvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNyZWFyTnVldm9Ob2RvVW5kZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRpcG9Ob2RvOiAidHJhYmFqbyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lc3RlTm9kby5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsb2FkaW5nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3JlYW5kb1N1Yk5vZG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNyZWFuZG9TdWJOb2RvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJ2ZW50YW5hLWxpc3RhIiwgewogICAgICAgICAgICAgICAgICByZWY6ICJ2ZW50YW5hTGlzdGEiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkTm9kb1Jvb3Q6IF92bS4kcm91dGUucGFyYW1zLmlkLAogICAgICAgICAgICAgICAgICAgIHRpcG9Ob2RvUm9vdDogIm5vZG9Tb2xpZGFyaWRhZCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibG9xdWVDb250ZW5pZG8iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJibG9xdWVSZWN1cnNvc0V4dGVybm9zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhcnJhU3VwZXJpb3JHZW5lcmFsIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0dWxvQmxvcXVlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSZWN1cnNvcyBleHRlcm5vcyIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRyb2xlc0Jsb3F1ZSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNvbnRyb2xlc1JlY3Vyc29zRXh0ZXJub3MiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uY3JlYW5kb1JlY3Vyc29FeHRlcm5vLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWNyZWFuZG9SZWN1cnNvRXh0ZXJubyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgZGVzaGFiaWxpdGFkbzogX3ZtLmNyZWFuZG9SZWN1cnNvRXh0ZXJubyB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udXN1YXJpb1Jlc3BvbnNhYmxlQW1wbGlvLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ1c3VhcmlvUmVzcG9uc2FibGVBbXBsaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9wbHVzQ2lyY2xlLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJOdWV2byIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ3JlYXIgbnVldm8gcmVjdXJzbyBleHRlcm5vIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uY3JlYXJOdWV2b1JlY3Vyc29FeHRlcm5vIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoImxvYWRpbmciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3JlYW5kb1JlY3Vyc29FeHRlcm5vLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNyZWFuZG9SZWN1cnNvRXh0ZXJubyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRleHRvOiAiIiB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogImxpc3RhUmVjdXJzb3NFeHRlcm5vcyIgfSB9LAogICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmVzdGVOb2RvLnJlY3Vyc29zRXh0ZXJub3MsIGZ1bmN0aW9uKHJlY3Vyc28pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInJlY3Vyc28tZXh0ZXJuby1ub2RvIiwgewogICAgICAgICAgICAgICAgICAgICAga2V5OiByZWN1cnNvLmlkLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgZXN0ZVJlY3Vyc286IHJlY3Vyc28sCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjY2lvbmFkbzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZWN1cnNvRXh0ZXJub1NlbGVjY2lvbmFkbyA9PT0gcmVjdXJzby5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgdXN1YXJpb1Jlc3BvbnNhYmxlQW1wbGlvOiBfdm0udXN1YXJpb1Jlc3BvbnNhYmxlQW1wbGlvLAogICAgICAgICAgICAgICAgICAgICAgICBpZE5vZG86IF92bS5lc3RlTm9kby5pZAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRSZWN1cnNvRXh0ZXJub1NlbGVjY2lvbmFkbyA9IHJlY3Vyc28uaWQKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbWVFbGltaW5lOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmVsaW1pbmFyUmVjdXJzb0V4dGVybm9DYWNoZShyZWN1cnNvLmlkKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvcXVlQ29udGVuaWRvIiwgYXR0cnM6IHsgaWQ6ICJibG9xdWVEYXRvcyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJiYXJyYUxhdGVyYWxEYXRvcyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhcnJhU3VwZXJpb3JHZW5lcmFsIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0dWxvQmxvcXVlIiB9LCBbX3ZtLl92KCJEYXRvcyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udHJvbGVzQmxvcXVlIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29udHJvbGVzUmVjdXJzb3NFeHRlcm5vcyIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJib3RvbkJhcnJhU3VwZXJpb3JHZW5lcmFsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9wbHVzQ2lyY2xlLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiTnVldm8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDcmVhciBudWV2byBkYXRvIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibGlzdGFEYXRvcyIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWREYXRvU2VsZWNjaW9uYWRvID0gbnVsbAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGF0b1NlbGVjY2lvbmFkbyA9IG51bGwKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNlbGVjdG9yRGF0byIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWNjaW9uYWRvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlkRGF0b1NlbGVjY2lvbmFkbyA9PT0gImFkbWluaXN0cmFjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmlkRGF0b1NlbGVjY2lvbmFkbyA9ICJhZG1pbmlzdHJhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm9tYnJlRGF0byIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQWRtaW5pc3RyYWNpw7NuIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0uZXN0ZU5vZG8uZGF0b3MsIGZ1bmN0aW9uKGRhdG8pIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRhdG8uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWxlY3RvckRhdG8iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY2Npb25hZG86IF92bS5pZERhdG9TZWxlY2Npb25hZG8gPT09IGRhdG8uaWQKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWREYXRvU2VsZWNjaW9uYWRvID0gZGF0by5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGF0b1NlbGVjY2lvbmFkbyA9IGRhdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vbWJyZURhdG8iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoZGF0by5ub21icmUpKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgwLCB0cnVlKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiem9uYURldGFsbGVzRGF0byIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhcnJhU3VwZXJpb3JHZW5lcmFsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBkZXNoYWJpbGl0YWRvOiBfdm0uZGF0b1ZlciA9PT0gImdyYWZpY2EiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9jaGFydC5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiR3JhZmljYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiVmVyIGdyw6FmaWNhIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGF0b1ZlciA9ICJncmFmaWNhIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBkZXNoYWJpbGl0YWRvOiBfdm0uZGF0b1ZlciA9PT0gInRhYmxhIiB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvdGhMaXN0LnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJUYWJsYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiVmVyIHRhYmxhIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGF0b1ZlciA9ICJ0YWJsYSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogImdyYWZpY2FEYXRvU2VsZWNjaW9uYWRvIiB9IH0pLAogICAgICAgICAgICAgICAgICBfdm0uaWREYXRvU2VsZWNjaW9uYWRvICYmCiAgICAgICAgICAgICAgICAgIF92bS5pZERhdG9TZWxlY2Npb25hZG8gIT0gImFkbWluaXN0cmFjaW9uIgogICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRhdG9WZXIgPT09ICJ0YWJsYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkYXRvVmVyID09PSAndGFibGEnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ0YWJsYURhdG9TZWxlY2Npb25hZG8iIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udHJvbGVzQmxvcXVlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjb250cm9sZXNUYWJsYURhdG9zIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYm90b25CYXJyYVN1cGVyaW9yR2VuZXJhbCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL3BsdXNDaXJjbGUuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiTnVldm8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ3JlYXIgbnVldm8gaXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY3JlYXJOdWV2b0l0ZW1EYXRvKCRldmVudCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidGFibGEtZGF0byIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogInRhYmxhRGUiICsgX3ZtLmRhdG9TZWxlY2Npb25hZG8uaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBlc3RlRGF0bzogX3ZtLmRhdG9TZWxlY2Npb25hZG8gfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICBfYygidGFibGEtYWRtaW5pc3RyYWNpb24iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGF0b1ZlciA9PT0gInRhYmxhIiAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pZERhdG9TZWxlY2Npb25hZG8gPT09ICJhZG1pbmlzdHJhY2lvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgZGF0b1ZlciA9PT0gJ3RhYmxhJyAmJiBpZERhdG9TZWxlY2Npb25hZG8gPT09ICdhZG1pbmlzdHJhY2lvbidcbiAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZXZlbnRvczogX3ZtLmVzdGVOb2RvLmV2ZW50b3MsCiAgICAgICAgICAgICAgICAgICAgICBtb3ZpbWllbnRvczogX3ZtLmVzdGVOb2RvLm1vdmltaWVudG9zRGluZXJvLAogICAgICAgICAgICAgICAgICAgICAgaWROb2RvOiBfdm0uZXN0ZU5vZG8uaWQsCiAgICAgICAgICAgICAgICAgICAgICB1c3VhcmlvUmVzcG9uc2FibGVBbXBsaW9Ob2RvOgogICAgICAgICAgICAgICAgICAgICAgICBfdm0udXN1YXJpb1Jlc3BvbnNhYmxlQW1wbGlvLAogICAgICAgICAgICAgICAgICAgICAgc3ViTm9kb3M6IF92bS5zdWJOb2RvcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygicm91dGVyLXZpZXciKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udHJvbGVzRGF0byIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b25Db250cm9sRWxlbWVudG9MaXN0YSIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL3RyYXNoLnN2ZyIpLAogICAgICAgICAgYWx0OiAiRWxpbWluYXIiLAogICAgICAgICAgdGl0bGU6ICJFbGltaW5hciBkYXRvIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}