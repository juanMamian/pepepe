{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/RecursoExternoNodo.vue?vue&type=template&id=78714eb4&scoped=true&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/RecursoExternoNodo.vue","mtime":1643654906499},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAicmVjdXJzb0V4dGVybm9Ob2RvIiwKICAgICAgY2xhc3M6IHsgZGVzaGFiaWxpdGFkbzogX3ZtLmVsaW1pbmFuZG8sIGVkaXRhbmRvc2U6IF92bS5lZGl0YW5kb1JlY3Vyc28gfQogICAgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImJhcnJhU3VwZXJpb3IiIH0sIG9uOiB7IGNsaWNrOiBfdm0uY2xpY2tFblJlY3Vyc28gfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5lc3RlUmVjdXJzby50aXBvID09PSAiZW5sYWNlIgogICAgICAgICAgICA/IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBpZDogImljb25vVGlwb1JlY3Vyc28iLAogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9saW5rLnN2ZyIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgOiBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaWQ6ICJpY29ub1RpcG9SZWN1cnNvIiwKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvZmlsZS5zdmciKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ6b25hTm9tYnJlIiB9IH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvTm9tYnJlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibnVldm9Ob21icmUiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRhbmRvUmVjdXJzbywKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvUmVjdXJzbyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9Ob21icmUiLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXROdWV2b05vbWJyZSBpbnB1dE5vbWJyZUNvc2EiLAogICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb051ZXZvTm9tYnJlIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5udWV2b05vbWJyZSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBrZXlwcmVzczogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJlbnRlciIsIDEzLCAkZXZlbnQua2V5LCAiRW50ZXIiKQogICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ3VhcmRhck51ZXZvTm9tYnJlKCRldmVudCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLm51ZXZvTm9tYnJlID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5lZGl0YW5kb1JlY3Vyc28sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFlZGl0YW5kb1JlY3Vyc28iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVsTm9tYnJlIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uZXN0ZVJlY3Vyc28ubm9tYnJlKSArICIgIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnVzdWFyaW9SZXNwb25zYWJsZUFtcGxpbywKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInVzdWFyaW9SZXNwb25zYWJsZUFtcGxpbyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiem9uYUJvdG9uZXNDb250cm9sIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvUmVjdXJzbywKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvUmVjdXJzbyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b25Db250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2xhcGl6LnN2ZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJFZGl0YXIiLAogICAgICAgICAgICAgICAgICB0aXRsZTogIkVkaXRhciByZWN1cnNvIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmluaWNpYXJFZGl0YW5kb1JlY3Vyc28oJGV2ZW50KQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVkaXRhbmRvUmVjdXJzbywKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGFuZG9SZWN1cnNvIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbkNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvZXF1aXMuc3ZnIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIkNhbmNlbGFyIiwKICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDYW5jZWxhciBlZGljacOzbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgX3ZtLmVkaXRhbmRvUmVjdXJzbyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvUmVjdXJzbywKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvUmVjdXJzbyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b25Db250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL3RyYXNoLnN2ZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJFbGltaW5hciIsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiAiRWxpbWluYXIgcmVjdXJzbyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5lbGltaW5hcnNlKCRldmVudCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lbGltaW5hbmRvLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVsaW1pbmFuZG8iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBhdHRyczogeyB0ZXh0bzogIiIgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9SZWN1cnNvLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0YW5kb1JlY3Vyc28iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBhdHRyczogeyBpZDogInpvbmFFZGljaW9uUmVjdXJzbyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJibG9xdWVCb3RvbmVzU2V0VGFyZ2V0IiB9IH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiBib3RvblNldFRhcmdldCIsCiAgICAgICAgICAgICAgICBzdHlsZTogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6CiAgICAgICAgICAgICAgICAgICAgICBfdm0uc2V0dGluZ1RhcmdldCA9PT0gImZpbGUiID8gIndoaXRlIiA6ICJ0cmFuc3BhcmVudCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiU3ViaXIgYXJjaGl2byIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy91cGxvYWRDbG91ZC5zdmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJVcGxvYWQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIGJvdG9uU2V0VGFyZ2V0IiwKICAgICAgICAgICAgICAgIHN0eWxlOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjoKICAgICAgICAgICAgICAgICAgICAgIF92bS5zZXR0aW5nVGFyZ2V0ID09PSAibGluayIgPyAid2hpdGUiIDogInRyYW5zcGFyZW50IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJJbnRyb2R1Y2lyIGVubGFjZSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmluaWNpYXJJbnB1dExpbmsoJGV2ZW50KQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2xpbmsuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiRW5sYWNlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInpvbmFJbnB1dE51ZXZvTGluayIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2V0dGluZ1RhcmdldCA9PT0gImxpbmsiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2V0dGluZ1RhcmdldCA9PT0gJ2xpbmsnIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvTGluaywKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvTGluayIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9MaW5rIiwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0TnVldm9MaW5rIiwKICAgICAgICAgICAgICBjbGFzczogeyBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9OdWV2b0xpbmsgfSwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjkwJSIgfSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIHBsYWNlaG9sZGVyOiAiSW50cm9kdWNlIGVsIGVubGFjZSIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51ZXZvTGluayB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGtleXByZXNzOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICEkZXZlbnQudHlwZS5pbmRleE9mKCJrZXkiKSAmJgogICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVudGVyIiwgMTMsICRldmVudC5rZXksICJFbnRlciIpCiAgICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFyTnVldm9MaW5rKCRldmVudCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5udWV2b0xpbmsgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}