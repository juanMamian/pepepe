{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/usuario/personaVistaLista.vue?vue&type=template&id=c8787e7e&scoped=true&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/usuario/personaVistaLista.vue","mtime":1665493812556},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAicGVyc29uYVZpc3RhTGlzdGEiLAogICAgICBjbGFzczogeyBzZWxlY2Npb25hZG86IF92bS5zZWxlY2Npb25hZG8gfQogICAgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdHlsZTogW192bS5jb2xvckJhcnJhU3VwZXJpb3JdLCBhdHRyczogeyBpZDogImJhcnJhU3VwZXJpb3IiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25vUGVyc29uYSIgfSwgWwogICAgICAgICAgICBfdm0uZXN0YVBlcnNvbmEucGVybWlzb3MuaW5jbHVkZXMoIm1hZXN0cmFWaWRhLXByb2Zlc29yIikKICAgICAgICAgICAgICA/IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvdGVhY2hlci5zdmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJQcm9mZXNvciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICBfdm0uZXN0YVBlcnNvbmEucGVybWlzb3MuaW5jbHVkZXMoIm1hZXN0cmFWaWRhLWVzdHVkaWFudGUiKQogICAgICAgICAgICAgID8gX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9ncmFkdWF0aW9uQ2FwLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIkNhcEdyYWR1YWNpb24iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW9TdXBlcmFkbWluaXN0cmFkb3IKICAgICAgICAgICAgICAgICAgICAgICAgPyBfdm0udG9nZ2xlUGVybWlzbygibWFlc3RyYVZpZGEtZXN0dWRpYW50ZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgIV92bS5lc3RhUGVyc29uYS5wZXJtaXNvcy5pbmNsdWRlcygibWFlc3RyYVZpZGEtcHJvZmVzb3IiKSAmJgogICAgICAgICAgICAhX3ZtLmVzdGFQZXJzb25hLnBlcm1pc29zLmluY2x1ZGVzKCJtYWVzdHJhVmlkYS1lc3R1ZGlhbnRlIikKICAgICAgICAgICAgICA/IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvdXNlci5zdmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJVc3VhcmlvIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS51c3VhcmlvU3VwZXJhZG1pbmlzdHJhZG9yCiAgICAgICAgICAgICAgICAgICAgICAgID8gX3ZtLnRvZ2dsZVBlcm1pc28oIm1hZXN0cmFWaWRhLWVzdHVkaWFudGUiKQogICAgICAgICAgICAgICAgICAgICAgICA6ICIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ6b25hTm9tYnJlcyIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAibm9tYnJlcyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZXN0YVBlcnNvbmEubm9tYnJlcykpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiem9uYUFwZWxsaWRvcyIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYXBlbGxpZG9zIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5lc3RhUGVyc29uYS5hcGVsbGlkb3MpKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWNjaW9uYWRvLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWNjaW9uYWRvIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW5lZG9yQ29udHJvbGVzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNvbnRlbmVkb3JDb250cm9sZXNQZXJzb25hIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW8gJiYKICAgICAgICAgICAgICAgICAgICAgICAgKF92bS51c3VhcmlvUHJvZmUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udXN1YXJpby5pZCA9PT0gX3ZtLmVzdGFQZXJzb25hLmlkIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnVzdWFyaW9TdXBlcmFkbWluaXN0cmFkb3IpLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgIHVzdWFyaW8gJiZcbiAgICAgICAgICAodXN1YXJpb1Byb2ZlIHx8XG4gICAgICAgICAgICB1c3VhcmlvLmlkID09PSBlc3RhUGVyc29uYS5pZCB8fFxuICAgICAgICAgICAgdXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvcilcbiAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiBzZWxlY3RvciIsCiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGFjdGl2bzogX3ZtLm1vc3RyYW5kbyA9PT0gImNhbGVuZGFyaW8iIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6CiAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAiY2FsZW5kYXJpbyIKICAgICAgICAgICAgICAgICAgICAgICAgPyAiT2N1bHRhciBjYWxlbmRhcmlvIgogICAgICAgICAgICAgICAgICAgICAgICA6ICJNb3N0cmFyIGNhbGVuZGFyaW8iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG8gPT09ICJjYWxlbmRhcmlvIiA/IG51bGwgOiAiY2FsZW5kYXJpbyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2NhbGVuZGFyLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiY2FsZW5kYXJpbyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0udXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvciB8fCBfdm0udXN1YXJpb1Byb2ZlCiAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gc2VsZWN0b3IiLAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZvOiBfdm0ubW9zdHJhbmRvID09PSAibm9kb3NTb2xpZGFyaWRhZFB1YmxpY2l0YWRvcyIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAibm9kb3NTb2xpZGFyaWRhZFB1YmxpY2l0YWRvcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIk9jdWx0YXIgbm9kb3NTb2xpZGFyaWRhZFB1YmxpY2l0YWRvcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIk1vc3RyYXIgbm9kb3NTb2xpZGFyaWRhZFB1YmxpY2l0YWRvcyIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAibm9kb3NTb2xpZGFyaWRhZFB1YmxpY2l0YWRvcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIm5vZG9zU29saWRhcmlkYWRQdWJsaWNpdGFkb3MiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvcHJvZHVjdEh1bnQuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiUCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgX3ZtLnVzdWFyaW9TdXBlcmFkbWluaXN0cmFkb3IKICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiBzZWxlY3RvciIsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3Rpdm86IF92bS5tb3N0cmFuZG8gPT09ICJhZG1pbmlzdHJhY2lvbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG8gPT09ICJhZG1pbmlzdHJhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIk9jdWx0YXIgYWRtaW5pc3RyYWNpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJNb3N0cmFyIGFkbWluaXN0cmFjaW9uIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG8gPT09ICJhZG1pbmlzdHJhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogImFkbWluaXN0cmFjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2NvZy5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJDb2ciCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udXN1YXJpb1Byb2ZlIHx8IF92bS51c3VhcmlvQWRtaW5pc3RyYWRvciwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ1c3VhcmlvUHJvZmUgfHwgdXN1YXJpb0FkbWluaXN0cmFkb3IiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJhbGllbmFyIiB9LAogICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFsaWVuYXIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvYWxpZW5hci5zdmciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIlZpcnVzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS51c3VhcmlvTG9nZWFkbyAmJiBfdm0udXN1YXJpb1Byb2ZlCiAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gc2VsZWN0b3IiLAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZvOiBfdm0ubW9zdHJhbmRvID09PSAiaW5mb3JtZSIgfSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwcHgiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAiaW5mb3JtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIk9jdWx0YXIgaW5mb3JtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIk1vc3RyYXIgaW5mb3JtZSIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vc3RyYW5kbyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID09PSAiaW5mb3JtZSIgPyBudWxsIDogImluZm9ybWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBJbmZvcm1lIElJICIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgIF92bS51c3VhcmlvTG9nZWFkbwogICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIHNlbGVjdG9yIiwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGFjdGl2bzogX3ZtLm1vc3RyYW5kbyA9PT0gIm9iamV0aXZvcyIgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG8gPT09ICJvYmpldGl2b3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICJPY3VsdGFyIG9iamV0aXZvcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIk1vc3RyYXIgb2JqZXRpdm9zIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG8gPT09ICJvYmpldGl2b3MiID8gbnVsbCA6ICJvYmpldGl2b3MiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3Mvc3RhclNvbGlkLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkNvZyIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ6b25hQ29udGVuaWRvc01vc3RyYW5kbyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tb3N0cmFuZG8gPT09ICJhZG1pbmlzdHJhY2lvbiIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibW9zdHJhbmRvID09PSAnYWRtaW5pc3RyYWNpb24nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ6b25hQWRtaW5pc3RyYWNpb24iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNlbGVjY2lvbmFkbywKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWNjaW9uYWRvIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJiYXJyYUluZm9BZGljaW9uYWwiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS51c3VhcmlvU3VwZXJhZG1pbmlzdHJhZG9yCiAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ1c2VybmFtZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5lc3RhUGVyc29uYS51c2VybmFtZSkgKyAiICIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW5lZG9yQ29udHJvbGVzIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29udGVuZWRvckFjY2lvbmVzIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0udXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvcgogICAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24gc2VsZWN0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3Rpdm86IF92bS5tb3N0cmFuZG9QZXJtaXNvcyB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdm0ubW9zdHJhbmRvUGVybWlzb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIk9jdWx0YXIgcGVybWlzb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJNb3N0cmFyIHBlcm1pc29zIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3N0cmFuZG9QZXJtaXNvcyA9ICFfdm0ubW9zdHJhbmRvUGVybWlzb3MKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2lkQmFkZ2Uuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJJZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5yZXNldGVhbmRvUGFzc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhcmVzZXRlYW5kb1Bhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3RvbiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJSZXN0YXVyYXIgcGFzc3dvcmQgKDEyMzQ1NikiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZXNldGVhclBhc3N3b3JkIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9rZXkuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkxsYXZlIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5yZXNldGVhbmRvUGFzc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicmVzZXRlYW5kb1Bhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICIiIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS51c3VhcmlvU3VwZXJhZG1pbmlzdHJhZG9yCiAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9zdHJhbmRvUGVybWlzb3MsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtb3N0cmFuZG9QZXJtaXNvcyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS50b2dnbGluZ1Blcm1pc28gfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImxpc3RhUGVybWlzb3MiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wZXJtaXNvc1Bvc2libGVzLCBmdW5jdGlvbihwZXJtaXNvKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogcGVybWlzbyArICJwZXJtaXNvIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhY3RpdmFkb3JQZXJtaXNvIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNvR3JhbnRlZDogX3ZtLmVzdGFQZXJzb25hLnBlcm1pc29zLmluY2x1ZGVzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVybWlzbwogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRvZ2dsZVBlcm1pc28ocGVybWlzbykKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhwZXJtaXNvKSArICIgIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9zdHJhbmRvID09PSAiaW5mb3JtZSIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibW9zdHJhbmRvID09PSAnaW5mb3JtZSciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBhdHRyczogeyBpZDogInpvbmFJbmZvcm1lIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbmVkb3JTZWNjaW9uSW5mb3JtZSIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGVuZWRvckNvbnRyb2xlcyIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmNyZWFuZG9Eb2N1bWVudG9JbmZvcm1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhY3JlYW5kb0RvY3VtZW50b0luZm9ybWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIiwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uZGVzY2FyZ2FyQXJjaGl2b0luZm9ybWUgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9maWxlLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogImFyY2hpdm8iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3JlYW5kb0RvY3VtZW50b0luZm9ybWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjcmVhbmRvRG9jdW1lbnRvSW5mb3JtZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRleHRvOiAiIiB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXR1bG9TZWNjaW9uSW5mb3JtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJTb2JyZSBvYmpldGl2b3MiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubnVldm9JbmZvcm1lT2JqZXRpdm9zLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b0luZm9ybWVPYmpldGl2b3MiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICByZWY6ICJpbnB1dEluZm9ybWVDYXRlZ29yaWFPYmpldGl2b3MiLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWNjaW9uSW5mb3JtZSIsCiAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOiBfdm0uZ3VhcmRhbmRvSW5mb3JtZU9iamV0aXZvcywKICAgICAgICAgICAgICAgICAgZ3VhcmRhZG86CiAgICAgICAgICAgICAgICAgICAgX3ZtLm51ZXZvSW5mb3JtZU9iamV0aXZvcyA9PQogICAgICAgICAgICAgICAgICAgIF92bS5taXNJbmZvcm1lc0FjdGl2b3Mub2JqZXRpdm9zCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ0ZXh0QXJlYUluZm9ybWVPYmpldGl2b3MiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51ZXZvSW5mb3JtZU9iamV0aXZvcyB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFySW5mb3JtZSgib2JqZXRpdm9zIikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS5udWV2b0luZm9ybWVPYmpldGl2b3MgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdHVsb1NlY2Npb25JbmZvcm1lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlNvYnJlIHByb3llY3RvcyIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b0luZm9ybWVQcm95ZWN0b3MsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvSW5mb3JtZVByb3llY3RvcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZjogImlucHV0SW5mb3JtZUNhdGVnb3JpYVByb3llY3RvcyIsCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNlY2Npb25JbmZvcm1lIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgIGRlc2hhYmlsaXRhZG86IF92bS5ndWFyZGFuZG9JbmZvcm1lUHJveWVjdG9zLAogICAgICAgICAgICAgICAgICBndWFyZGFkbzoKICAgICAgICAgICAgICAgICAgICBfdm0ubnVldm9JbmZvcm1lUHJveWVjdG9zID09CiAgICAgICAgICAgICAgICAgICAgX3ZtLm1pc0luZm9ybWVzQWN0aXZvcy5wcm95ZWN0b3MKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInRleHRBcmVhSW5mb3JtZVByb3llY3RvcyIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubnVldm9JbmZvcm1lUHJveWVjdG9zIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBibHVyOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJJbmZvcm1lKCJwcm95ZWN0b3MiKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLm51ZXZvSW5mb3JtZVByb3llY3RvcyA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0dWxvU2VjY2lvbkluZm9ybWUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiU29icmUgZXNwYWNpb3MiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubnVldm9JbmZvcm1lRXNwYWNpb3MsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvSW5mb3JtZUVzcGFjaW9zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVmOiAiaW5wdXRJbmZvcm1lQ2F0ZWdvcmlhRXNwYWNpb3MiLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWNjaW9uSW5mb3JtZSIsCiAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOiBfdm0uZ3VhcmRhbmRvSW5mb3JtZUVzcGFjaW9zLAogICAgICAgICAgICAgICAgICBndWFyZGFkbzoKICAgICAgICAgICAgICAgICAgICBfdm0ubnVldm9JbmZvcm1lRXNwYWNpb3MgPT0gX3ZtLm1pc0luZm9ybWVzQWN0aXZvcy5lc3BhY2lvcwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAidGV4dEFyZWFJbmZvcm1lUHJveWVjdG9zIiB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5udWV2b0luZm9ybWVFc3BhY2lvcyB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFySW5mb3JtZSgiZXNwYWNpb3MiKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLm51ZXZvSW5mb3JtZUVzcGFjaW9zID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXR1bG9TZWNjaW9uSW5mb3JtZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDb21lbnRhcmlvIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvSW5mb3JtZUNvbWVudGFyaW8sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvSW5mb3JtZUNvbWVudGFyaW8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICByZWY6ICJpbnB1dEluZm9ybWVDYXRlZ29yaWFDb21lbnRhcmlvIiwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VjY2lvbkluZm9ybWUiLAogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLmd1YXJkYW5kb0luZm9ybWVDb21lbnRhcmlvLAogICAgICAgICAgICAgICAgICBndWFyZGFkbzoKICAgICAgICAgICAgICAgICAgICBfdm0ubnVldm9JbmZvcm1lQ29tZW50YXJpbyA9PQogICAgICAgICAgICAgICAgICAgIF92bS5taXNJbmZvcm1lc0FjdGl2b3MuY29tZW50YXJpbwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAidGV4dEFyZWFJbmZvcm1lQ29tZW50YXJpbyIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubnVldm9JbmZvcm1lQ29tZW50YXJpbyB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFySW5mb3JtZSgiY29tZW50YXJpbyIpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdm0ubnVldm9JbmZvcm1lQ29tZW50YXJpbyA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1vc3RyYW5kbyA9PT0gIm5vZG9zU29saWRhcmlkYWRQdWJsaWNpdGFkb3MiLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1vc3RyYW5kbyA9PT0gJ25vZG9zU29saWRhcmlkYWRQdWJsaWNpdGFkb3MnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ6b25hUHJpbWVyTml2ZWwiLAogICAgICAgICAgICBhdHRyczogeyBpZDogInpvbmFOb2Rvc1NvbGlkYXJpZGFkUHVibGljaXRhZG9zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgX3ZtLl9sKF92bS5ub2Rvc1NvbGlkYXJpZGFkUHVibGljaXRhZG9zLCBmdW5jdGlvbigKICAgICAgICAgICAgbm9kb1NvbGlkYXJpZGFkUHVibGljaXRhZG8KICAgICAgICAgICkgewogICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAga2V5OiBub2RvU29saWRhcmlkYWRQdWJsaWNpdGFkby5pZCwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VsZWN0b3JOb2RvU29saWRhcmlkYWQiLAogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLnNldHRpbmdQcmVzZW5jaWFOb2RvU29saWRhcmlkYWQsCiAgICAgICAgICAgICAgICAgIGFjdGl2bzogbm9kb1NvbGlkYXJpZGFkUHVibGljaXRhZG8ucmVzcG9uc2FibGVzLmluY2x1ZGVzKAogICAgICAgICAgICAgICAgICAgIF92bS5lc3RhUGVyc29uYS5pZAogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udG9nZ2xlUmVzcG9uc2FibGVOb2RvU29saWRhcmlkYWQoCiAgICAgICAgICAgICAgICAgICAgICBub2RvU29saWRhcmlkYWRQdWJsaWNpdGFkbwogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3Mobm9kb1NvbGlkYXJpZGFkUHVibGljaXRhZG8ubm9tYnJlKSArICIgIildCiAgICAgICAgICAgICkKICAgICAgICAgIH0pLAogICAgICAgICAgMAogICAgICAgICksCiAgICAgICAgX3ZtLm1vc3RyYW5kbyA9PT0gImNhbGVuZGFyaW8iCiAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiem9uYVByaW1lck5pdmVsIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiem9uYUNhbGVuZGFyaW8iIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJjYWxlbmRhcmlvIiwgewogICAgICAgICAgICAgICAgICByZWY6ICJjYWxlbmRhcmlvIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZFVzdWFyaW9UYXJnZXQ6IF92bS5lc3RhUGVyc29uYS5pZCwKICAgICAgICAgICAgICAgICAgICBlbmZhc2lzOiAiZXZlbnRvc1BlcnNvbmFsZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX3ZtLm1vc3RyYW5kbyA9PT0gIm9iamV0aXZvcyIKICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ6b25hUHJpbWVyTml2ZWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ6b25hT2JqZXRpdm9zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidmVudGFuYS1saXN0YSIsIHsKICAgICAgICAgICAgICAgICAgcmVmOiAidmVudGFuYUxpc3RhIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZE5vZG9Sb290OiBfdm0uZXN0YVBlcnNvbmEuaWQsCiAgICAgICAgICAgICAgICAgICAgdGlwb05vZG9Sb290OiAidXN1YXJpbyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}