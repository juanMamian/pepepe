{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/proyecto/CanvasDiagramaFlujo.vue?vue&type=style&index=0&id=b4555e88&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/proyecto/CanvasDiagramaFlujo.vue","mtime":1643654906503},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojY2FudmFzRGlhZ3JhbWFGbHVqb3sKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmNhbnZhc3sKICBwb3NpdGlvbjogYWJzb2x1dGUKfQo="},{"version":3,"sources":["CanvasDiagramaFlujo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmOA;AACA;AACA;AACA;AACA;AACA","file":"CanvasDiagramaFlujo.vue","sourceRoot":"src/components/proyecto","sourcesContent":["<template>\n  <div id=\"canvasDiagramaFlujo\">\n    <canvas\n      id=\"canvasTodosVinculos\"\n      ref=\"canvasTodosVinculos\"\n      :style=\"[offsetCanvasTodosVinculos]\"\n      class=\"canvas\"\n    ></canvas>\n    <canvas\n      id=\"canvasVinculosSeleccionado\"\n      ref=\"canvasVinculosSeleccionado\"\n      :style=\"[sizeCanvasTodosVinculos]\"\n      class=\"canvas\"\n    ></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CanvasDiagramaFlujo\",\n  props: {\n    todosNodos: Array,\n    factorZoom:Number,\n    nodoSeleccionado: {\n      type: Object,\n      default() {\n        return {};\n      },\n    },\n  },\n  data() {\n    return {\n      sizeCanvasTodosVinculos: {\n        width: 0,\n        height: 0,\n      },\n    };\n  },\n  methods: {\n    crearImagenTodosVinculos: function () {\n      console.log(`Creando imagen todos vínculos`);\n      if (this.todosNodos.length <= 1) return;\n      var lapiz = this.$refs.canvasTodosVinculos.getContext(\"2d\");\n      //Calcular el tamaño del diagrama      \n      const posicionCanvas={\n        x: this.esquinasCanvasTodosVinculos.x1,\n        y: this.esquinasCanvasTodosVinculos.y1,\n      }\n\n      lapiz.canvas.width = this.esquinasCanvasTodosVinculos.x2 - this.esquinasCanvasTodosVinculos.x1;\n      lapiz.canvas.height = this.esquinasCanvasTodosVinculos.y2 - this.esquinasCanvasTodosVinculos.y1;   \n\n      lapiz.lineWidth = 1;\n      lapiz.clearRect(0, 0, lapiz.canvas.width, lapiz.canvas.height);\n      lapiz.beginPath();\n      lapiz.strokeStyle = \"#b3b3b3\";\n      for (let nodo of this.todosNodos) {\n        for (let vinculo of nodo.vinculos) {\n          if (!this.todosNodos.some((n) => n.id == vinculo.idRef)) continue;\n\n          this.dibujarLineaEntreNodos(\n            this.todosNodos.find((nodo) => nodo.id == vinculo.idRef),\n            nodo,\n            lapiz,\n            posicionCanvas\n          );\n        }\n      }\n      lapiz.stroke();\n    },\n    crearImagenVinculosSeleccionado: function () {\n      this.lapiz = this.$refs.canvasVinculosSeleccionado.getContext(\"2d\");\n      this.lapiz.clearRect(\n        0,\n        0,\n        this.lapiz.canvas.width,\n        this.lapiz.canvas.height\n      );\n\n      if (this.todosNodos.some((n) => n.id == this.nodoSeleccionado.id)) {\n        //Lineas verdes de posiblidades\n        this.lapiz.beginPath();\n        this.lapiz.lineWidth = 2;\n        this.lapiz.strokeStyle = \"#008000\";\n\n        //Lineas verdes de salida\n        for (let vinculo of this.nodoSeleccionado.vinculos) {\n          if (!this.todosNodos.some((n) => n.id == vinculo.idRef)) {\n            console.log(`ALERTA. Vinculo a ${vinculo.idRef} huerfano`);\n            continue;\n          }\n\n          let otroNodo = this.todosNodos.find((n) => n.id == vinculo.idRef);\n          this.dibujarLineaEntreNodos(otroNodo, this.nodoSeleccionado);\n        }\n        this.lapiz.stroke();\n        //Lineas rojas de dependencias\n\n        \n      }\n    },\n    dibujarLineaEntreNodos(nodoFrom, nodoTo, lapiz, posicionCanvas) {\n      let inicio = {\n        x: (nodoFrom.coords.x*this.factorZoom)-posicionCanvas.x,\n        y: (nodoFrom.coords.y*this.factorZoom)-posicionCanvas.y,\n      };\n      let final = {\n        x: (nodoTo.coords.x*this.factorZoom)-posicionCanvas.x,\n        y: (nodoTo.coords.y*this.factorZoom)-posicionCanvas.y,\n      };\n\n      const distanciaVertical=final.y-inicio.y;\n      const largoCodo=Math.round(distanciaVertical*0.5);\n\n      const primeraEsquina={\n        x:inicio.x,\n        y:inicio.y+largoCodo\n      }\n\n      const segundaEsquina={\n        x:final.x,\n        y:final.y-largoCodo\n      }\n\n      lapiz.moveTo(inicio.x, inicio.y);\n      lapiz.lineTo(primeraEsquina.x, primeraEsquina.y);\n      lapiz.lineTo(segundaEsquina.x, segundaEsquina.y);\n      lapiz.lineTo(final.x, final.y);\n      //ahora la flechita\n      // let centro = {\n      //   x: (final.x + inicio.x) / 2,\n      //   y: (final.y + inicio.y) / 2,\n      // };\n      // let longitudAla = 7;\n      // let anguloVinculo = Math.atan(\n      //   (final.y - inicio.y) / (final.x - inicio.x)\n      // );\n      // if (final.y - inicio.y < 0 && final.x - inicio.x < 0)\n      //   anguloVinculo += Math.PI;\n      // if (final.y - inicio.y > 0 && final.x - inicio.x < 0)\n      //   anguloVinculo += Math.PI;\n      // //anguloVinculo=anguloVinculo*180/Math.PI;\n\n      // let puntaAlaIzquierda = {\n      //   x: centro.x + longitudAla * Math.cos(anguloVinculo - (3 * Math.PI) / 4),\n      //   y: centro.y + longitudAla * Math.sin(anguloVinculo - (3 * Math.PI) / 4),\n      // };\n      // let puntaAlaDerecha = {\n      //   x: centro.x + longitudAla * Math.cos(anguloVinculo + (3 * Math.PI) / 4),\n      //   y: centro.y + longitudAla * Math.sin(anguloVinculo + (3 * Math.PI) / 4),\n      // };\n      // this.lapiz.moveTo(centro.x, centro.y);\n      // this.lapiz.lineTo(puntaAlaIzquierda.x, puntaAlaIzquierda.y);\n      // this.lapiz.moveTo(centro.x, centro.y);\n      // this.lapiz.lineTo(puntaAlaDerecha.x, puntaAlaDerecha.y);\n    },\n  },\n  computed:{\n    esquinasCanvasTodosVinculos(){\n      var nodosRelevantes=this.todosNodos;\n\n      if (nodosRelevantes.length <= 1) return {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0,        \n      };\n\n      let bordes = {};\n      bordes.top = nodosRelevantes.reduce((acc, n) => {\n        //console.log(`Reduciendo ${n.nombre} con coords: ${n.posicion}`);\n        return n.coords.y > acc ? n.coords.y : acc;\n      }, 0);\n      bordes.bot = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.y < acc ? n.coords.y : acc;\n      }, 0);\n      bordes.left = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x < acc ? n.coords.x : acc;\n      }, 0);\n      bordes.right = nodosRelevantes.reduce((acc, n) => {\n        return n.coords.x > acc ? n.coords.x : acc;\n      }, 0);\n\n      return {\n        x1: bordes.left*this.factorZoom,\n        y1: bordes.bot*this.factorZoom,\n        x2: (bordes.right+2)*this.factorZoom,\n        y2: (bordes.top+2)*this.factorZoom\n      }\n    },\n    offsetCanvasTodosVinculos(){\n      return {\n        left:  this.esquinasCanvasTodosVinculos.x1 + \"px\",\n        top: this.esquinasCanvasTodosVinculos.y1 + \"px\",\n\n        width: (this.esquinasCanvasTodosVinculos.x2-this.esquinasCanvasTodosVinculos.x1) + \"px\",\n        height: (this.esquinasCanvasTodosVinculos.y2-this.esquinasCanvasTodosVinculos.y1) + \"px\",\n      }\n    }\n\n  },\n  watch: {\n    todosNodos: function () {\n      if (this.todosNodos.length < 1) return;\n      this.crearImagenTodosVinculos();\n      this.crearImagenVinculosSeleccionado();\n    },\n    nodoSeleccionado: function () {\n      this.crearImagenVinculosSeleccionado();\n    },\n    factorZoom(){\n      this.crearImagenTodosVinculos();\n      this.crearImagenVinculosSeleccionado();\n    },\n\n  },\n  mounted() {\n    this.montado = true;\n    this.crearImagenTodosVinculos();\n    this.crearImagenVinculosSeleccionado();    \n  },\n  \n\n};\n</script>\n\n<style scoped>\n#canvasDiagramaFlujo{\n  position: relative;\n}\n.canvas{\n  position: absolute\n}\n</style>"]}]}