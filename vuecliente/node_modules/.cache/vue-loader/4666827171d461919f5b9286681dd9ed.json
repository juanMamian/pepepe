{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/SelectorConjunto.vue?vue&type=style&index=0&id=3f069821&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/SelectorConjunto.vue","mtime":1676034838357},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNlbGVjdG9yQ29uanVudG8gewogIGRpc3BsYXk6IGZsZXg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGdhcDogMTBweDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIHdpZHRoOiBtaW4oMjAwcHgsIDkwdncpOwogIG1pbi1oZWlnaHQ6IDEwMHB4OwogIHBhZGRpbmc6IDEwcHggMjBweDsKICBib3JkZXItcmFkaXVzOiAxNXB4OwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWF0bGFzQ29ub2NpbWllbnRvQXZhaWxhYmxlKTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Ci5zZWxlY3RvckNvbmp1bnRvLnNlbGVjY2lvbmFkbyB7CiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYXRsYXNDb25vY2ltaWVudG9TZWxlY2Npb24pOwp9CiNtZW51Q29udGV4dHVhbHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01JSwgLTUlKTsKfQoKI3pvbmFJbmZvcm1hY2lvbiB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGZsZXgtZ3JvdzogMTsKfQo="},{"version":3,"sources":["SelectorConjunto.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"SelectorConjunto.vue","sourceRoot":"src/components/atlasConocimiento","sourcesContent":["<template>\n  <div class=\"selectorConjunto\" :class=\"{ seleccionado, deshabilitado:eliminandose }\">\n    <div class=\"menuContextual\" id=\"menuContextual\" v-show=\"menuCx\" @click.stop=\"\">\n      <div class=\"botonMenuCx\" @click.stop=\"eliminarse\">Eliminar</div>\n    </div>\n    <div id=\"zonaIcono\">\n      <img\n        src=\"@/assets/iconos/userNodes.png\"\n        alt=\"Coleccion\"\n        style=\"height: 30px\"\n        v-show=\"!eliminandose\"\n      />\n      <loading v-show=\"eliminandose\" />\n    </div>\n\n    <div id=\"zonaInformacion\">\n      <div id=\"nombre\">\n        {{ estaColeccion.nombre }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gql from 'graphql-tag';\nimport { QUERY_DATOS_USUARIO_NODOS } from './AtlasConocimiento.vue';\nimport Loading from '../utilidades/Loading.vue';\nexport default {\n  components: { Loading },\n  name: \"SelectorConjunto\",\n  props: {\n    seleccionado: Boolean,\n    estaColeccion: Object,\n    menuCx:Boolean,\n  },\n  data() {\n    return {\n      eliminandose: false,\n    };\n  },\n  methods: {\n    eliminarse() {\n      if (\n        !confirm(\n          \"Confirmar eliminación de colección? (Esta acción no se puede deshacer)\"\n        )\n      ) {\n        return;\n      }\n\n      this.eliminandose=true;\n\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idColeccion: ID!) {\n              eliminarColeccionNodosAtlasConocimientoUsuario(\n                idColeccion: $idColeccion\n              ) \n            }\n          `,\n          variables: {\n            idColeccion: this.estaColeccion.id,\n          },\n        })\n        .then(() => {\n          this.eliminandose = false;\n\n          const store=this.$apollo.provider.defaultClient;\n          const cache=store.readQuery({\n            query: QUERY_DATOS_USUARIO_NODOS,\n          });\n\n          var nuevoCache=JSON.parse(JSON.stringify(cache));\n\n          var colecciones=nuevoCache.yo.atlas.colecciones;\n\n          const indexC=colecciones.findIndex(col=>col.id===this.estaColeccion.id);\n\n          if(indexC>-1){\n            console.log(`Retirando colección de caché`);\n            colecciones.splice(indexC, 1);\n\n            store.writeQuery({\n              query: QUERY_DATOS_USUARIO_NODOS,\n              data: nuevoCache\n            })\n          }\n          else{\n            console.log(`La colección a borrar no estaba en caché`);\n          }\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.eliminandose = false;\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.selectorConjunto {\n  display: flex;\n  position: relative;\n  gap: 10px;\n  align-items: center;\n  width: min(200px, 90vw);\n  min-height: 100px;\n  padding: 10px 20px;\n  border-radius: 15px;\n  background-color: var(--atlasConocimientoAvailable);\n  box-sizing: border-box;\n}\n.selectorConjunto.seleccionado {\n  border: 2px solid var(--atlasConocimientoSeleccion);\n}\n#menuContextual{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-5%, -5%);\n}\n\n#zonaInformacion {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n}\n</style>"]}]}