{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/AtlasConocimiento.vue?vue&type=style&index=0&id=f41c2084&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/AtlasConocimiento.vue","mtime":1644587546118},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYXRsYXNDb25vY2ltaWVudG8gewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBvdmVyZmxvdzogaGlkZGVuOwp9CiNtZW51Q29udGV4dHVhbCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGJhY2tncm91bmQtY29sb3I6IGdyYXk7CiAgei1pbmRleDogMTAwOwp9Ci5ib3Rvbk1lbnVDb250ZXh0dWFsIHsKICBmb250LXNpemU6IDEycHg7CiAgY29sb3I6IHJnYigyMjEsIDIyMSwgMjIxKTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcGFkZGluZzogMTBweDsKfQouYm90b25NZW51Q29udGV4dHVhbDpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDY4LCA2OCwgNjgpOwp9CgojY2FudmFzZXMgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQojY29udGVuZWRvck5vZG9zIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIHVzZXItc2VsZWN0OiBub25lOwoKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQojYnVzY2Fkb3JOb2Rvc0Nvbm9jaW1pZW50byB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMSU7CiAgbGVmdDogMSU7CiAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOyAqLwogIHotaW5kZXg6IDE7Cn0KI3BhbmVsQ29uanVudG9zTm9kb3MgewogIHotaW5kZXg6IDEwMDsKfQojcGFuZWxDb25maWd1cmFjaW9uQXRsYXMgewogIHotaW5kZXg6IDEwMDsKfQojcGFuZWxPYmpldGl2b3MgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDIlOwogIGxlZnQ6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7CiAgb3BhY2l0eTogMC4yOwogIHotaW5kZXg6IDEwMDsKfQojcGFuZWxPYmpldGl2b3M6aG92ZXIgewogIG9wYWNpdHk6IDE7Cn0KI2luZm9ab29tIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAyJTsKICBsZWZ0OiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOwogIHBhZGRpbmc6IDEwcHg7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGZvbnQtd2VpZ2h0OiBib2xkOwogIGNvbG9yOiByZ2IoMTAyLCAxMDIsIDEwMik7Cn0KI2JvdG9uQ2FsbGluZ1Bvc2ljaW9uZXMgewogIHdpZHRoOiAyMHB4OwogIGhlaWdodDogMjBweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMSU7CiAgcmlnaHQ6IDElOwogIGN1cnNvcjogcG9pbnRlcjsKfQoKI3NpbWJvbG9EZXNjYXJnYW5kb05vZG9zIHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiA1MCU7CiAgbGVmdDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIHotaW5kZXg6IDEwMDsKfQoKLmZhZGVPdXQtbGVhdmUtdG8gewogIG9wYWNpdHk6IDA7Cn0KLmZhZGVPdXQtbGVhdmUtYWN0aXZlIHsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDFzOwp9Ci5mYWRlT3V0LWxlYXZlIHsKICBvcGFjaXR5OiAxOwp9Cg=="},{"version":3,"sources":["AtlasConocimiento.vue"],"names":[],"mappingsmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AtlasConocimiento.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    class=\"atlasConocimiento\"\n    @mousedown.left.exact.stop=\"panningVista = true\"\n    @mouseenter=\"hovered = true\"\n    @mouseleave=\"hovered = false\"\n    @click=\"\n      idNodoMenuCx = '-1';\n      cerrarBusqueda++;\n    \"\n    @mousemove=\"panVista($event)\"\n    @mouseup.left=\"clickFondoAtlas\"\n    @touchmove.prevent.stop=\"movimientoMobile\"\n    @touchstart=\"iniciaMovimientoTouch\"\n    @touchend=\"finTouch\"\n    @contextmenu.self.exact.prevent=\"abrirMenuContextual\"\n  >\n    <transition name=\"fadeOut\">\n      <div v-show=\"showingZoomInfo\" id=\"infoZoom\">x{{ factorZoom }}</div>\n    </transition>\n    <div\n      id=\"menuContextual\"\n      :style=\"[offsetMenuContextual]\"\n      v-show=\"mostrandoMenuContextual\"\n    >\n      <div\n        class=\"botonMenuContextual\"\n        id=\"botonCrearNuevoNodo\"\n        @click=\"crearNodoEnMenuContextual\"\n      >\n        Crear Nodo de conocimiento\n      </div>\n    </div>\n    <div\n      id=\"botonCallingPosiciones\"\n      v-if=\"usuarioSuperadministrador && usuario.username == 'juanMamian'\"\n      @click.stop=\"iniciarCallingPosiciones\"\n      :class=\"{ deshabilitado: callingPosiciones }\"\n      :style=\"[\n        { backgroundColor: callingPosiciones ? 'green' : 'transparent' },\n      ]\"\n    ></div>\n    <buscador-nodos-conocimiento\n      @nodoSeleccionado=\"centrarEnNodo\"\n      ref=\"buscadorNodos\"\n      :cerrarBusqueda=\"cerrarBusqueda\"\n    />\n\n    <panel-conjuntos-nodos\n      ref=\"panelConjuntosNodos\"\n      :yo=\"yo\"\n      :todosNodos=\"todosNodos\"\n      :idNodoTarget=\"idNodoTarget\"\n      @targetSeleccionado=\"setNodoTargetCache\"\n      @centrarEnNodo=\"centrarEnNodo(todosNodos.find((n) => n.id == $event))\"\n    />\n    <panel-configuracion-atlas ref=\"panelConfiguracionAtlas\" :yo=\"yo\" />\n    <canvases\n      :todosNodos=\"todosNodos\"\n      :nodoSeleccionado=\"nodoSeleccionado\"\n      :idNodoTarget=\"idNodoTarget\"\n      :idsNecesariosParaTarget=\"idsNecesariosParaTarget\"\n      :centroVista=\"centroVista\"\n      :callingPosiciones=\"callingPosiciones\"\n      :factorZoom=\"factorZoom\"\n      :style=\"[offsetContenedorNodos]\"\n      ref=\"canvases\"\n      v-if=\"todosNodos.length > 1\"\n    />\n    <div id=\"contenedorNodos\" :style=\"[offsetContenedorNodos]\">\n      <nodo-conocimiento\n        :nodoSeleccionado=\"nodoSeleccionado\"\n        :todosNodos=\"todosNodos\"\n        :idNodoMenuCx=\"idNodoMenuCx\"\n        :usuarioAdministradorAtlas=\"usuarioAdministradorAtlas\"\n        :yo=\"yo\"\n        :key=\"nodo.id\"\n        v-for=\"nodo of todosNodos\"\n        :esteNodo=\"nodo\"\n        :centroVista=\"centroVista\"\n        :esNodoObjetivo=\"idsNodosObjetivos.includes(nodo.id)\"\n        :esTarget=\"idNodoTarget == nodo.id\"\n        :idsNodosAprendidos=\"idsNodosAprendidos\"\n        :factorZoom=\"factorZoom\"\n        :escondido=\"\n          idNodoTarget &&\n          !idsNecesariosParaTarget.includes(nodo.id) &&\n          idNodoTarget != nodo.id\n        \"\n        :configuracionAtlas=\"configuracionAtlas\"\n        :callingPosiciones=\"callingPosiciones\"\n        @click.right.native.exact.stop.prevent=\"idNodoMenuCx = nodo.id\"\n        @click.native.stop=\"seleccionNodo(nodo)\"\n        @creacionVinculo=\"crearVinculo\"\n        @eliminacionVinculo=\"eliminarVinculo\"\n        @cambioDePosicionManual=\"cambiarCoordsManualesNodo\"\n        @eliminar=\"eliminarNodo\"\n        @cambieEstadoObjetivo=\"setEstadoObjetivoNodoCache($event, nodo.id)\"\n        @tengoNuevoValorAprendido=\"setNodoAprendidoCache($event, nodo.id)\"\n      />\n    </div>\n\n    <loading\n      id=\"simboloDescargandoNodos\"\n      v-show=\"!nodosDescargados\"\n      texto=\"descargando nodos de conocimiento\"\n    />\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport NodoConocimiento from \"./atlasConocimiento/NodoConocimiento.vue\";\nimport Canvases from \"./atlasConocimiento/Canvases.vue\";\nimport BuscadorNodosConocimiento from \"./atlasConocimiento/BuscadorNodosConocimiento.vue\";\nimport Loading from \"./utilidades/Loading.vue\";\nimport PanelConjuntosNodos from \"./atlasConocimiento/PanelConjuntosNodos.vue\";\nimport PanelConfiguracionAtlas from \"./atlasConocimiento/PanelConfiguracionAtlas.vue\";\nconst debounce = require(\"debounce\");\n\nconst fragmentoNodoConocimiento = gql`\n  fragment fragNodoConocimiento on NodoConocimiento {\n    id\n    nombre\n    descripcion\n    expertos\n    clases {\n      id\n      nombre\n      idExperto\n      interesados\n    }\n    coordsManuales {\n      x\n      y\n    }\n    coords {\n      x\n      y\n    }\n    autoCoords {\n      x\n      y\n    }\n    centroMasa {\n      x\n      y\n    }\n    stuck\n    angulo\n    puntaje\n    vinculos {\n      idRef\n      rol\n      tipo\n    }\n    fuerzaCentroMasa {\n      fuerza\n      direccion\n    }\n    fuerzaColision {\n      fuerza\n      direccion\n    }\n  }\n`;\n\nconst QUERY_NODOS = gql`\n  query {\n    todosNodos {\n      ...fragNodoConocimiento\n    }\n  }\n  ${fragmentoNodoConocimiento}\n`;\n\nconst QUERY_DATOS_USUARIO_NODOS = gql`\n  query {\n    yo {\n      id\n      atlas {\n        datosNodos {\n          idNodo\n          objetivo\n          aprendido\n        }\n        configuracion {\n          modo\n        }\n        idNodoTarget\n        colecciones {\n          id\n          nombre\n          idsNodos\n          nodos {\n            id\n            nombre\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default {\n  components: {\n    NodoConocimiento,\n    Canvases,\n    BuscadorNodosConocimiento,\n    Loading,\n    PanelConjuntosNodos,\n    PanelConfiguracionAtlas,\n  },\n  name: \"AtlasConocimiento\",\n  apollo: {\n    todosNodos: {\n      query: QUERY_NODOS,\n      result: function () {\n        this.dibujarVinculosGrises();\n      },\n      pollInterval() {\n        return this.callingPosiciones ? 5000 : null;\n      },\n      update({ todosNodos }) {\n        this.nodosDescargados = true;\n        var nuevoTodosNodos = JSON.parse(JSON.stringify(todosNodos));\n        nuevoTodosNodos.forEach((nodo) => {\n          nodo.coordsManuales = nodo.autoCoords;\n          nodo.coords = nodo.autoCoords;\n        });\n        return nuevoTodosNodos;\n      },\n      fetchPolicy: \"cache-and-network\",\n    },\n    yo: {\n      query: QUERY_DATOS_USUARIO_NODOS,\n      skip() {\n        return !this.usuarioLogeado || this.todosNodos.length < 1;\n      },\n    },\n    configuracionAtlas: {\n      query: gql`\n        query ($nombreAtlas: String!) {\n          configuracionAtlas(nombreAtlas: $nombreAtlas) {\n            id\n            posicionando\n          }\n        }\n      `,\n      variables: {\n        nombreAtlas: \"conocimiento\",\n      },\n      fetchPolicy: \"network-only\",\n    },\n  },\n  data() {\n    return {\n      configuracionAtlas: {\n        posicionando: false,\n      },\n      hovered: false,\n      todosNodos: [],\n      nodosDescargados: false,\n      idNodoSeleccionado: \"-1\",\n      idNodoMenuCx: \"-1\",\n      idsNecesariosParaTarget: [],\n\n      yo: {\n        atlas: {\n          datosNodos: [],\n          configuracion: {\n            modo: \"estudiante\",\n          },\n        },\n      },\n\n      centroVistaDecimal: {\n        x: 218,\n        y: 39,\n      },\n      showingZoomInfo: false,\n      zoom: 80,\n      minZoom: 20,\n      maxZoom: 200,\n      pinching: false,\n      lastPinchDistance: 0,\n      actualizarTrazos: 0,\n      panningVista: false,\n      vistaPanned: false,\n      nodosConectadosAlSeleccionado: {\n        listaCompleta: [],\n        listaPorNiveles: [],\n      },\n      profundidadNodosConectadosAlSeleccionado: 1,\n      actualizarVinculosGrises: 0,\n\n      ultimoTouchX: 0,\n      ultimoTouchY: 0,\n\n      cerrarBusqueda: 0,\n\n      callingPosiciones: false,\n\n      mostrandoMenuContextual: false,\n      offsetMenuContextual: {\n        top: \"0px\",\n        left: \"0px\",\n      },\n      enviandoQueryConfiguracionAtlas: false,\n    };\n  },\n  computed: {\n    idsNodosObjetivos() {\n      if (!this.yo || !this.yo.atlas || !this.yo.atlas.datosNodos) {\n        return [];\n      }\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.objetivo == true)\n        .map((n) => n.idNodo);\n    },\n    nodosObjetivo() {\n      if (!this.todosNodos) return [];\n      return this.todosNodos.filter((n) =>\n        this.idsNodosObjetivos.includes(n.id)\n      );\n    },\n    nodoSeleccionado: function () {\n      if (!this.todosNodos) {\n        console.log(`NO HAY NODOS`);\n        return false;\n      }\n      if (this.todosNodos.some((n) => n.id == this.idNodoSeleccionado)) {\n        let indexSeleccionado = this.todosNodos.findIndex(\n          (n) => n.id == this.idNodoSeleccionado\n        );\n        return this.todosNodos[indexSeleccionado];\n      }\n      return {\n        id: \"-1\",\n        vinculos: [],\n      };\n    },\n    idUsuario: function () {\n      return this.$store.state.usuario.id;\n    },\n    usuarioAdministradorAtlas: function () {\n      if (!this.$store.state.usuario.permisos) return false;\n      return this.$store.state.usuario.permisos.includes(\"atlasAdministrador\")\n        ? true\n        : false;\n    },\n    idNodoTarget() {\n      if (!this.yo || !this.yo.atlas) return null;\n      return this.yo.atlas.idNodoTarget;\n    },\n    idsNodosAprendidos() {\n      return this.yo.atlas.datosNodos\n        .filter((n) => n.aprendido == true)\n        .map((n) => n.idNodo);\n    },\n    centroVista() {\n      return {\n        x: Math.round(this.centroVistaDecimal.x),\n        y: Math.round(this.centroVistaDecimal.y),\n      };\n    },\n    factorZoom() {\n      return Number((this.zoom / 100).toFixed(2));\n    },\n    offsetContenedorNodos() {\n      return {\n        left: -(this.centroVista.x * this.factorZoom) + \"px\",\n        top: -(this.centroVista.y * this.factorZoom) + \"px\",\n      };\n    },\n  },\n  methods: {\n    iniciarCallingPosiciones() {\n      var ciclos = prompt(\"¿Cuantos ciclos?\");\n      if (isNaN(ciclos)) {\n        return;\n      }\n\n      ciclos = Math.round(ciclos);\n      if (ciclos < 1) {\n        return;\n      }\n      console.log(`Enviando reposicionamiento de ${ciclos} ciclos`);\n      this.callingPosiciones = true;\n\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($ciclos: Int!) {\n              posicionarNodosConocimientoByFuerzas(ciclos: $ciclos)\n            }\n          `,\n          variables: {\n            ciclos,\n          },\n        })\n        .then(() => {\n          this.callingPosiciones = false;\n        })\n        .catch((error) => {\n          this.callingPosiciones = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    togglePosicionamiento() {\n      this.enviandoQueryConfiguracionAtlas = true;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($nombreAtlas: String!) {\n              togglePosicionamientoAutomaticoAtlas(nombreAtlas: $nombreAtlas) {\n                id\n                posicionando\n              }\n            }\n          `,\n          variables: {\n            nombreAtlas: \"conocimiento\",\n          },\n        })\n        .then(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        })\n        .catch(() => {\n          this.enviandoQueryConfiguracionAtlas = false;\n        });\n    },\n    abrirMenuContextual(e) {\n      let posCalendario = this.$el.getBoundingClientRect();\n\n      let topClick = Math.round(e.pageY - posCalendario.top);\n      let leftClick = Math.round(e.pageX - posCalendario.left);\n\n      this.$set(this.offsetMenuContextual, \"top\", topClick + \"px\");\n      this.$set(this.offsetMenuContextual, \"left\", leftClick + \"px\");\n      this.mostrandoMenuContextual = true;\n      //this.crearNodo({x: leftClick, y: topClick});\n    },\n    crearNodoEnMenuContextual() {\n      let posContenedor = document\n        .getElementById(\"contenedorNodos\")\n        .getBoundingClientRect();\n\n      console.log(`Offset menú cx: ${this.offsetMenuContextual.top}`);\n      console.log(`Offset menú cx: ${parseInt(this.offsetMenuContextual.top)}`);\n\n      var posicionNuevoNodo = {\n        x: parseInt(\n          (parseInt(this.offsetMenuContextual.left) - posContenedor.left) /\n            this.factorZoom\n        ),\n        y: parseInt(\n          (parseInt(this.offsetMenuContextual.top) - posContenedor.top) /\n            this.factorZoom\n        ),\n      };\n\n      console.log(`Creando nuevo nodo en ${JSON.stringify(posicionNuevoNodo)}`);\n\n      this.crearNodo(posicionNuevoNodo);\n    },\n    encontrarNodosNecesariosDeNodo(idNodo, listaTotal) {\n      const elNodo = this.todosNodos.find((n) => n.id == idNodo);\n      if (!elNodo) {\n        return listaTotal;\n      }\n      const necesarios = elNodo.vinculos\n        .filter((v) => v.rol == \"target\")\n        .map((v) => v.idRef);\n      necesarios.forEach((necesario) => {\n        if (!listaTotal.includes(necesario)) {\n          listaTotal.push(necesario);\n          listaTotal = this.encontrarNodosNecesariosDeNodo(\n            necesario,\n            listaTotal\n          );\n        }\n      });\n      return listaTotal;\n    },\n    clickFondoAtlas() {\n      console.log(`Click en el fondo del atlas`);\n      if (!this.vistaPanned) this.idNodoSeleccionado = \"-1\";\n      this.panningVista = false;\n      this.vistaPanned = false;\n      this.$refs.panelConjuntosNodos.abierto = false;\n      this.$refs.panelConfiguracionAtlas.abierto = false;\n      this.mostrandoMenuContextual = false;\n    },\n    setEstadoObjetivoNodoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado objetivo: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].objetivo = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: nuevoEstado,\n          aprendido: false,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoAprendidoCache(nuevoEstado, idNodo) {\n      console.log(\n        `Seting en cache al nodo ${idNodo} con estado aprendido: ${nuevoEstado}`\n      );\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      var indexN = nuevoCache.yo.atlas.datosNodos.findIndex(\n        (n) => n.idNodo == idNodo\n      );\n      if (indexN > -1) {\n        nuevoCache.yo.atlas.datosNodos[indexN].aprendido = nuevoEstado;\n      } else {\n        console.log(`No estaba en caché. Pushing`);\n        nuevoCache.yo.atlas.datosNodos.push({\n          __typename: \"DatoNodoUsuario\",\n          idNodo,\n          objetivo: false,\n          aprendido: nuevoEstado,\n        });\n      }\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n    setNodoTargetCache(idNodo) {\n      console.log(`Seting en cache al nodo ${idNodo} como target`);\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n      });\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n      nuevoCache.yo.atlas.idNodoTarget = idNodo;\n      store.writeQuery({\n        query: QUERY_DATOS_USUARIO_NODOS,\n        data: nuevoCache,\n      });\n    },\n\n    centrarEnNodo(n) {\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        n.coords.x - this.$el.offsetWidth / (2 * this.factorZoom)\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        n.coords.y - this.$el.offsetHeight / (2 * this.factorZoom)\n      );\n      this.seleccionNodo(n);\n      //this.centroVista=e;\n    },\n    iniciaMovimientoTouch(e) {\n      if (e.touches.length === 2) {\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        this.lastPinchDistance = dist;\n        this.pinching = true;\n        return;\n      }\n\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n    },\n    movimientoMobile(e) {\n      if (this.pinching) {\n        var contenedor = this.$el;\n        let posContenedor = contenedor.getBoundingClientRect();\n\n        const posZoom = {\n          x:\n            Math.round(posContenedor.width / 2 / this.factorZoom) +\n            this.centroVista.x,\n          y:\n            Math.round(posContenedor.height / 2 / this.factorZoom) +\n            this.centroVista.y,\n        };\n\n        const proporciones = {\n          x:\n            (posZoom.x - this.centroVistaDecimal.x) /\n            (posContenedor.width / this.factorZoom),\n          y:\n            (posZoom.y - this.centroVistaDecimal.y) /\n            (posContenedor.height / this.factorZoom),\n        };\n\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        var pinch = dist - this.lastPinchDistance;\n        pinch = pinch * 0.5;\n        this.zoomVista(pinch);\n        this.lastPinchDistance = dist;\n\n        this.$set(\n          this.centroVistaDecimal,\n          \"x\",\n          posZoom.x - (posContenedor.width / this.factorZoom) * proporciones.x\n        );\n        this.$set(\n          this.centroVistaDecimal,\n          \"y\",\n          posZoom.y - (posContenedor.height / this.factorZoom) * proporciones.y\n        );\n        return;\n      }\n\n      const deltaX = e.changedTouches[0].clientX - this.ultimoTouchX;\n      const deltaY = e.changedTouches[0].clientY - this.ultimoTouchY;\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n\n      this.desplazarVista(deltaX, deltaY);\n    },\n    finTouch() {\n      this.pinching = false;\n    },\n    cambiarCoordsManualesNodo(idNodo, coordsManuales) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      this.todosNodos[this.todosNodos.findIndex((n) => n.id == idNodo)].coords =\n        coordsManuales;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: String, $coordsManuales: CoordsInput) {\n              setCoordsManuales(\n                idNodo: $idNodo\n                coordsManuales: $coordsManuales\n              ) {\n                modificados {\n                  id\n                  coordsManuales {\n                    x\n                    y\n                  }\n                  coords {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodo,\n            coordsManuales,\n          },\n        })\n        .then(() => {\n          this.$refs.canvases.crearImagenTodosVinculos();\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n        });\n    },\n    eliminarNodo(idNodo) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      if (!confirm(\"¿Seguro de que quieres eliminar este nodo?\")) return;\n      console.log(`enviando mutacion de eliminar nodo`);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodo: ID!) {\n              eliminarNodo(idNodo: $idNodo)\n            }\n          `,\n          variables: {\n            idNodo,\n          },\n          update(store, { data: { eliminarNodo } }) {\n            if (!eliminarNodo) {\n              console.log(`Nodo no fue eliminado`);\n              return;\n            }\n            const cache = store.readQuery({\n              query: QUERY_NODOS,\n            });\n            var nuevoCache = JSON.parse(JSON.stringify(cache));\n            const indexN = nuevoCache.todosNodos.findIndex(\n              (n) => n.id == idNodo\n            );\n            if (indexN > -1) {\n              nuevoCache.todosNodos.splice(indexN, 1);\n              store.writeQuery({\n                query: QUERY_NODOS,\n                data: nuevoCache,\n              });\n            } else {\n              console.log(`El nodo no estaba presente`);\n            }\n          },\n        })\n        .then((data) => {\n          console.log(`quitando el objeto del array. ${data}`);\n        });\n    },\n    crearNodo(posicion) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`Error usuario no autorizado`);\n        return;\n      }\n      console.log(`enviando una mutación de crear nodo`);\n\n      let infoNodo = {\n        coordsManuales: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        coords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        autoCoords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n      };\n      console.log(`en las coordenadas: ${posicion.x}, ${posicion.y} `);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoNodo: NodoConocimientoInput) {\n              crearNodo(infoNodo: $infoNodo) {\n                ...fragNodoConocimiento\n              }\n            }\n            ${fragmentoNodoConocimiento}\n          `,\n          variables: {\n            infoNodo,\n          },\n        })\n        .then(({ data: { crearNodo } }) => {\n          console.log(`Creado ${crearNodo.id}`);\n          const store = this.$apollo.provider.defaultClient;\n          const cache = store.readQuery({\n            query: QUERY_NODOS,\n          });\n          var nuevoCache = JSON.parse(JSON.stringify(cache));\n          var losNodos = nuevoCache.todosNodos;\n          const indexN = losNodos.findIndex((n) => n.id === crearNodo.id);\n          if (indexN > -1) {\n            console.log(`El nodo ya estaba en caché`);\n          } else {\n            losNodos.push(crearNodo);\n            store.writeQuery({\n              query: QUERY_NODOS,\n              data: nuevoCache,\n            });\n          }\n\n          //this.$router.push(\"/nodoConocimiento/\"+crearNodo.id);\n        })\n        .catch((error) => {\n          console.log(`Error. E: ${error}`);\n        });\n    },\n    descargarCentroVista() {\n      let dis = this;\n      this.$apollo\n        .query({\n          query: gql`\n            query {\n              yo {\n                id\n                atlas {\n                  centroVista {\n                    x\n                    y\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idUsuario: this.$store.state.usuario.id,\n          },\n          fetchPolicy: \"network-only\",\n        })\n        .then(function ({ data: { yo } }) {\n          let coords = yo.atlas.centroVista;\n          dis.$set(dis.centroVista, \"x\", coords.x);\n          dis.$set(dis.centroVista, \"y\", coords.y);\n          dis.$store.commit(\"setCentroVistaAtlas\", coords);\n        })\n        .catch(function (error) {\n          console.log(`error fetching centro vista: ${error}`);\n        });\n    },\n    desplazarVista(deltaX, deltaY) {\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        Math.round(this.centroVistaDecimal.x - deltaX / this.factorZoom)\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        Math.round(this.centroVistaDecimal.y - deltaY / this.factorZoom)\n      );\n      this.actualizarTrazos++;\n    },\n    panVista(e) {\n      if (!this.panningVista) {\n        return;\n      }\n      this.desplazarVista(e.movementX, e.movementY);\n      e.preventDefault();\n      this.vistaPanned = true;\n\n      /*this.centroVista.x -= e.movementX;\n      this.centroVista.y -= e.movementY;\n      */\n    },\n    seleccionNodo(nodo) {\n      this.idNodoSeleccionado = nodo.id;\n      if (!this.todosNodos.some((n) => n.id == this.idNodoSeleccionado)) {\n        console.log(`No encontrado`);\n        return null;\n      }\n\n      let profundidad = parseInt(this.profundidadNodosConectadosAlSeleccionado);\n      let listaPorNiveles = [];\n      let idNodoSel = this.idNodoSeleccionado;\n      let listaCompleta = [idNodoSel];\n      if (profundidad > 0) {\n        for (let i = 0; i < profundidad; i++) {\n          listaPorNiveles[i] = [];\n        }\n        ({ listaCompleta, listaPorNiveles } =\n          this.encontrarNodosConectadosRecursivamente(\n            idNodoSel,\n            [\"target\", \"source\"],\n            [\"continuacion\"],\n            listaCompleta,\n            listaPorNiveles,\n            0,\n            profundidad\n          ));\n      }\n      this.nodosConectadosAlSeleccionado = {\n        listaCompleta,\n        listaPorNiveles,\n      };\n    },\n    async eliminarVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(\n        `eliminando un vinculo entre ${args.idNodoFrom} y ${args.idNodoTo} `\n      );\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idNodoFrom: ID!, $idNodoTo: ID!) {\n              eliminarVinculoFromTo(\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    tipo\n                    rol\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n    dibujarVinculosGrises() {\n      this.actualizarVinculosGrises++;\n    },\n    async crearVinculo(args) {\n      if (!this.usuarioSuperadministrador && !this.usuarioAdministradorAtlas) {\n        console.log(`No autorizado`);\n        return;\n      }\n      console.log(`creando un vinculo ${JSON.stringify(args)} `);\n      await this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($tipo: String!, $idNodoFrom: ID!, $idNodoTo: ID!) {\n              crearVinculo(\n                tipo: $tipo\n                idSource: $idNodoFrom\n                idTarget: $idNodoTo\n              ) {\n                modificados {\n                  id\n                  vinculos {\n                    idRef\n                    rol\n                    tipo\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            tipo: \"continuacion\",\n            idNodoFrom: args.idNodoFrom,\n            idNodoTo: args.idNodoTo,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`error: ${error}`);\n        });\n    },\n    encontrarNodosConectadosRecursivamente(\n      idNodo,\n      roles,\n      tipos,\n      listaCompleta,\n      listaPorNiveles,\n      nivel,\n      profundidad\n    ) {\n      // Rol debe ser un array que incluye los roles validos en esta búsqueda.\n      // Tipo deber ser un array que incluye todos los tipos válidos en esta búsqueda\n      let nodo = this.todosNodos.find((n) => n.id == idNodo);\n      for (let vinculo of nodo.vinculos) {\n        if (\n          this.todosNodos.some((n) => n.id == vinculo.idRef) &&\n          roles.some((r) => r == vinculo.rol) &&\n          tipos.some((t) => t == vinculo.tipo) &&\n          !listaCompleta.some((idN) => idN == vinculo.idRef)\n        ) {\n          listaPorNiveles[nivel].push(vinculo.idRef);\n          listaCompleta.push(vinculo.idRef);\n\n          if (nivel + 1 < profundidad) {\n            ({ listaCompleta, listaPorNiveles } =\n              this.encontrarNodosConectadosRecursivamente(\n                vinculo.idRef,\n                roles,\n                tipos,\n                listaCompleta,\n                listaPorNiveles,\n                nivel + 1,\n                profundidad\n              ));\n          }\n        } else {\n          console.log(`No`);\n        }\n      }\n      return { listaCompleta, listaPorNiveles };\n    },\n    zoomVista(deltaZoom) {\n      var nuevoZoom = this.zoom + deltaZoom;\n      if (nuevoZoom < this.minZoom) {\n        this.zoom = this.minZoom;\n      } else if (nuevoZoom > this.maxZoom) {\n        this.zoom = this.maxZoom;\n      } else {\n        this.zoom = nuevoZoom;\n      }\n\n      //Pan vista de acuerdo con la posición del mouse respecto del atlas\n    },\n    zoomWheel(e) {\n      if (!this.hovered || !e.ctrlKey) {\n        return;\n      }\n      e.preventDefault();\n\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const posZoom = {\n        x:\n          Math.round((e.clientX - posContenedor.left) / this.factorZoom) +\n          this.centroVista.x,\n        y:\n          Math.round((e.clientY - posContenedor.top) / this.factorZoom) +\n          this.centroVista.y,\n      };\n\n      const proporciones = {\n        x:\n          (posZoom.x - this.centroVistaDecimal.x) /\n          (posContenedor.width / this.factorZoom),\n        y:\n          (posZoom.y - this.centroVistaDecimal.y) /\n          (posContenedor.height / this.factorZoom),\n      };\n\n      const factorZoom = 0.2;\n      this.zoomVista(-Math.round(e.deltaY * factorZoom), {\n        x: posZoom.x,\n        y: posZoom.y,\n      });\n\n      this.$set(\n        this.centroVistaDecimal,\n        \"x\",\n        posZoom.x - (posContenedor.width / this.factorZoom) * proporciones.x\n      );\n      this.$set(\n        this.centroVistaDecimal,\n        \"y\",\n        posZoom.y - (posContenedor.height / this.factorZoom) * proporciones.y\n      );\n    },\n    hideZoomInfo: debounce(function () {\n      this.showingZoomInfo = false;\n    }, 1000),\n  },\n  watch: {\n    nodoSeleccionado: function () {\n      this.actualizarTrazos++;\n    },\n    route: function (to) {\n      console.log(`cambio de navegación a ${to.path}`);\n    },\n    idNodoTarget(idNodoTarget) {\n      if (!idNodoTarget) {\n        this.idsNecesariosParaTarget = [];\n        return;\n      }\n      console.log(`iniciando busqueda de requeridos de nodo ${idNodoTarget}`);\n      this.idsNecesariosParaTarget = this.encontrarNodosNecesariosDeNodo(\n        idNodoTarget,\n        []\n      );\n    },\n    zoom() {\n      this.showingZoomInfo = true;\n      this.hideZoomInfo();\n    },\n  },\n  mounted() {\n    // if (!this.usuario.atlas || !this.usuario.atlas.centroVista) {\n    //   console.log(`No había info de centro vista en la store. Descargando`);\n    //   this.descargarCentroVista();\n    //   return;\n    // }\n    // this.$set(this.centroVistaDecimal, \"x\", this.usuario.atlas.centroVista.x);\n    // this.$set(this.centroVistaDecimal, \"y\", this.usuario.atlas.centroVista.y);\n\n    if (screen.width < 600) {\n      this.zoom = 70;\n    }\n  },\n  created() {\n    window.addEventListener(\"wheel\", this.zoomWheel, { passive: false });\n  },\n  removed() {\n    window.removeEventListener(\"wheel\", this.zoomWheel);\n  },\n  // beforeRouteLeave(_, __, next) {\n  //   console.log(\n  //     `enviando nuevo centroVista para el usuario ${\n  //       this.usuario.id\n  //     }. Centro vista: ${JSON.stringify(this.centroVista)}`\n  //   );\n  //   this.$store.commit(\"setCentroVistaAtlas\", this.centroVista);\n\n  //   this.$apollo\n  //     .mutate({\n  //       mutation: gql`\n  //         mutation($idUsuario: ID, $centroVista: CoordsInput) {\n  //           setCentroVista(idUsuario: $idUsuario, centroVista: $centroVista)\n  //         }\n  //       `,\n  //       variables: {\n  //         idUsuario: this.$store.state.usuario.id,\n  //         centroVista: this.centroVista,\n  //       },\n  //     })\n  //     .then(function () {\n  //       next();\n  //     })\n  //     .catch(function (error) {\n  //       console.log(`error: ${error}`);\n  //       next();\n  //     });\n  // },\n};\n</script>\n\n<style scoped>\n.atlasConocimiento {\n  position: relative;\n  overflow: hidden;\n}\n#menuContextual {\n  position: absolute;\n  background-color: gray;\n  z-index: 100;\n}\n.botonMenuContextual {\n  font-size: 12px;\n  color: rgb(221, 221, 221);\n  cursor: pointer;\n  padding: 10px;\n}\n.botonMenuContextual:hover {\n  background-color: rgb(68, 68, 68);\n}\n\n#canvases {\n  position: absolute;\n  pointer-events: none;\n}\n#contenedorNodos {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n\n  pointer-events: none;\n}\n#buscadorNodosConocimiento {\n  position: absolute;\n  top: 1%;\n  left: 1%;\n  /* transform: translateX(-50%); */\n  z-index: 1;\n}\n#panelConjuntosNodos {\n  z-index: 100;\n}\n#panelConfiguracionAtlas {\n  z-index: 100;\n}\n#panelObjetivos {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.2;\n  z-index: 100;\n}\n#panelObjetivos:hover {\n  opacity: 1;\n}\n#infoZoom {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 10px;\n  display: inline-block;\n  font-weight: bold;\n  color: rgb(102, 102, 102);\n}\n#botonCallingPosiciones {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n  position: absolute;\n  top: 1%;\n  right: 1%;\n  cursor: pointer;\n}\n\n#simboloDescargandoNodos {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.fadeOut-leave-to {\n  opacity: 0;\n}\n.fadeOut-leave-active {\n  transition: opacity 1s;\n}\n.fadeOut-leave {\n  opacity: 1;\n}\n</style>"]}]}