{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/AtlasSolidaridad.vue?vue&type=template&id=1e5da6cf&scoped=true&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/AtlasSolidaridad.vue","mtime":1643654906499},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}