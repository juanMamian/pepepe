{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/proyecto/DiagramaFlujo.vue?vue&type=style&index=0&id=98c2bde8&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/proyecto/DiagramaFlujo.vue","mtime":1643654906503},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kaWFncmFtYUZsdWpvIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDgwMHB4OwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBvdmVyZmxvdzogc2Nyb2xsOwogIGJhY2tncm91bmQtY29sb3I6IHJnYigyMjUsIDIyOSwgMjQxKTsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDA7Cn0KI2NhbnZhc0RpYWdyYW1hRmx1am8gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDAlOwogIGxlZnQ6IDAlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQojZHVtbXkgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMzBweDsKICBoZWlnaHQ6IDMwcHg7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KCiNtZW51Q3ggewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAxMDA7Cn0KCi5pdGVtTWVudUN4IHsKICBwYWRkaW5nOiA1cHggMTBweDsKICBmb250LXNpemU6IDE1cHg7CiAgY3Vyc29yOiBwb2ludGVyOwogIGJhY2tncm91bmQtY29sb3I6IGF6dXJlOwp9Ci5pdGVtTWVudUN4OmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQxLCAxNTgsIDE1OCk7Cn0KCiNjb250ZW5lZG9yTm9kb3N7CiAgei1pbmRleDogMDsKfQoKLnZlbnRhbml0YU5vZG8gewogIHdpZHRoOiBtaW4oNDAwcHgsIDkwJSk7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTBweDsKICBsZWZ0OiA1MHB4OwogIHotaW5kZXg6IDEwMDA7Cn0K"},{"version":3,"sources":["DiagramaFlujo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAscA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DiagramaFlujo.vue","sourceRoot":"src/components/proyecto","sourcesContent":["<template> \n  <div\n    class=\"diagramaFlujo\"\n    :class=\"{ deshabilitado: deshabilitar }\"\n    id=\"diagramaFlujo\"\n    :style=\"[opacidad, {backgroundColor:hovered?'rgb(225, 229, 241)':'white'}]\"\n    @mouseenter=\"hovered=true\"\n    @mouseleave=\"hovered=false\"\n    @click.right.self.prevent=\"abrirMenuCx\"\n    @mousedown.left.self=\"panningVista=true\"\n    @mouseup.left.self=\"mouseUpFondo\"\n    @mousemove=\"panVista\"\n    \n  >\n    <canvas-diagrama-flujo :todosNodos=\"todosNodos\" :style=\"[posicionCanvasFlechas]\" :factorZoom=\"factorZoom\" />\n    <div id=\"contenedorNodos\">\n    <nodo-trabajo\n      v-for=\"trabajo of trabajos\"\n      :key=\"trabajo.id\"      \n      :esteTrabajo=\"trabajo\"\n      :idProyecto=\"idProyecto\"\n      :usuarioResponsableProyecto=\"usuarioResponsableProyecto\"\n      :seleccionado=\"idNodoSeleccionado == trabajo.id\"\n      :posDummy=\"posDummy\"\n      :menuCx=\"idNodoClickDerecho === trabajo.id\"\n      :idNodoSeleccionado=\"idNodoSeleccionado\"\n      :centroVista=\"centroVista\"\n      :factorZoom=\"Number(factorZoom.toFixed(2))\"\n      @click.native=\"\n        idNodoSeleccionado = trabajo.id;\n        tipoNodoSeleccionado = 'trabajo';\n      \"\n      @dblclick.native=\"idNodoPaVentanita=trabajo.id\"\n      @meAbrieron=\"$emit('nodoAbierto', trabajo.id)\"            \n      @miInfo=\"actualizarInfoTrabajos(trabajo.id, $event)\"\n      @crearRequerimento=\"crearRequerimento('trabajo', $event)\"\n      @eliminarVinculo=\"eliminarVinculo('trabajo', $event)\"\n      @click.right.native.prevent=\"idNodoClickDerecho = trabajo.id\"\n    />\n    <nodo-objetivo\n      v-for=\"objetivo of objetivos\"\n      :key=\"objetivo.id\"\n      :idProyecto=\"idProyecto\"\n      :esteObjetivo=\"objetivo\"\n      :usuarioResponsableProyecto=\"usuarioResponsableProyecto\"\n      :seleccionado=\"idNodoSeleccionado == objetivo.id\"\n      :idNodoSeleccionado=\"idNodoSeleccionado\"\n      :posDummy=\"posDummy\"\n      :menuCx=\"idNodoClickDerecho === objetivo.id\"\n      :centroVista=\"centroVista\"\n      :factorZoom=\"factorZoom\"\n      @click.native=\"\n        idNodoSeleccionado = objetivo.id;\n        tipoNodoSeleccionado = 'objetivo';\n      \"      \n      @dblclick.native=\"idNodoPaVentanita=objetivo.id\"\n      @meAbrieron=\"$emit('nodoAbierto', objetivo.id)\"      \n      @crearRequerimento=\"crearRequerimento('objetivo', $event)\"\n      @eliminarVinculo=\"eliminarVinculo('objetivo', $event)\"\n      @click.right.native.prevent.stop=\"idNodoClickDerecho = objetivo.id\"\n    />       \n    </div>\n\n    <ventanita-objetivo\n      v-if=\"idNodoPaVentanita && objetivoEnVentanita\"\n      class=\"ventanitaNodo\"\n      :usuarioResponsableProyecto=\"usuarioResponsableProyecto\"\n      :key=\"'ventanita'+objetivoEnVentanita.id\"\n      :esteObjetivo=\"objetivoEnVentanita\"\n      :idProyecto=\"idProyecto\"\n    />\n    <ventanita-trabajo\n      v-if=\"idNodoPaVentanita && trabajoEnVentanita\"\n      class=\"ventanitaNodo\"\n      :usuarioResponsableProyecto=\"usuarioResponsableProyecto\"\n      :key=\"'ventanita'+trabajoEnVentanita.id\"\n      :esteTrabajo=\"trabajoEnVentanita\"\n      :idProyecto=\"idProyecto\"\n    />\n\n    <div id=\"menuCx\" :style=\"posMenuCx\" v-show=\"mostrandoMenuCx\">\n      <div class=\"itemMenuCx\" @click=\"crearTrabajoAqui\">Crear trabajo aquí</div>\n      <div class=\"itemMenuCx\" @click=\"crearObjetivoAqui\">\n        Crear objetivo aquí\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport CanvasDiagramaFlujo from \"./CanvasDiagramaFlujo.vue\";\nimport NodoObjetivo from \"./NodoObjetivo.vue\";\nimport NodoTrabajo from \"./NodoTrabajo.vue\";\nimport VentanitaObjetivo from \"./VentanitaObjetivo.vue\"\nimport VentanitaTrabajo from \"./VentanitaTrabajo.vue\"\n\nexport default {\n  components: { NodoObjetivo, NodoTrabajo, CanvasDiagramaFlujo, VentanitaObjetivo, VentanitaTrabajo },\n  name: \"DiagramaFlujo\",\n  props: {\n    trabajos: Array,\n    objetivos: Array,\n    idProyecto: String,\n    usuarioResponsableProyecto: Boolean,\n    activo: Boolean,\n    deshabilitar: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      posicionMenuCx: {\n        x: 0,\n        y: 0,\n      },\n      mostrandoMenuCx: false,\n      idNodoSeleccionado: null,\n      idNodoPaVentanita:null,\n      tipoNodoSeleccionado: null,\n      posDummy: {\n        x: 300,\n        y: 300,\n      },\n      infoTrabajos: [],\n      idNodoClickDerecho: null,\n\n      centroVistaDecimal:{\n        x:0,\n        y:0\n      },      \n\n      hovered:false,\n\n      zoom:100,\n      maxZoom:200,\n      minZoom:50,\n    };\n  },\n  computed: {\n    posMenuCx() {\n      return {\n        top: this.posicionMenuCx.y + \"px\",\n        left: this.posicionMenuCx.x + \"px\",\n      };\n    },\n    opacidad() {\n      return {\n        opacity: this.activo ? 1 : 0.4,\n      };\n    },\n    infoObjetivos() {\n      return this.objetivos.map((objetivo) => {\n        return {\n          id: objetivo.id,\n          posicion: objetivo.coords,\n          vinculos: objetivo.vinculos,\n        };\n      });\n    },    \n    posicionCanvasFlechas(){\n      return {\n        top: Math.round(-this.centroVista.y*this.factorZoom)+\"px\",\n        left: Math.round(-this.centroVista.x*this.factorZoom)+\"px\"\n      }\n    },\n    centroVista(){\n      return {\n        x: Math.round(this.centroVistaDecimal.x),\n        y: Math.round(this.centroVistaDecimal.y),\n      }\n    },\n    factorZoom(){\n      return Number((this.zoom/100).toFixed(2));\n    },\n    todosNodos(){\n      return this.objetivos.concat(this.trabajos);\n    },\n    objetivoEnVentanita() {\n      if (!this.idNodoPaVentanita) return null;\n      return this.objetivos.find((o) => o.id == this.idNodoPaVentanita);\n    },\n    trabajoEnVentanita() {\n      if (!this.idNodoPaVentanita) return null;\n      return this.trabajos.find((t) => t.id == this.idNodoPaVentanita);\n    },\n    nodoSeleccionado() {\n      return this.todosNodos.find((n) => n.id === this.idNodoSeleccionado);\n    },\n  },\n  methods: {\n    abrirMenuCx(e) {\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n      this.$set(\n        this.posicionMenuCx,\n        \"x\",\n        Math.round(e.clientX - posContenedor.left + contenedor.scrollLeft)\n      );\n      this.$set(\n        this.posicionMenuCx,\n        \"y\",\n        Math.round(e.clientY - posContenedor.top + contenedor.scrollTop)\n      );\n\n      this.mostrandoMenuCx = true;\n    },\n    crearTrabajoAqui(e) {\n      var posicion = {\n        x: 0,\n        y: 0,\n      };\n\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();      \n\n      posicion.x = Math.round(\n        ((e.clientX - posContenedor.left)/this.factorZoom)+this.centroVista.x                \n      );\n      posicion.y = Math.round(\n        ((e.clientY - posContenedor.top)/this.factorZoom)+this.centroVista.y\n      );\n      this.mostrandoMenuCx=false;\n      this.$emit(\"crearTrabajoEnPosicion\", posicion);\n    },\n    crearObjetivoAqui(e) {\n      var posicion = {\n        x: 0,\n        y: 0,\n      };\n\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n      posicion.x = Math.round(\n        e.clientX + this.centroVista.x - posContenedor.left \n      );\n      posicion.y = Math.round(\n        e.clientY + this.centroVista.y - posContenedor.top \n      );\n      this.mostrandoMenuCx=false;\n      this.$emit(\"crearObjetivoEnPosicion\", posicion);\n    },   \n    actualizarInfoTrabajos(idTrabajo, info) {\n      const indexT = this.infoTrabajos.findIndex((t) => t.id === idTrabajo);\n      if (indexT > -1) {\n        this.infoTrabajos.splice(indexT, 1);\n      }\n      this.infoTrabajos.push(info);\n    },\n    crearRequerimento(tipoNodoRequerido, { idNodoRequiere, idNodoRequerido }) {\n      console.log(\n        `Preparando mutación para setear que ${idNodoRequiere} requiere a ${idNodoRequerido} de tipo ${tipoNodoRequerido}`\n      );\n      const tipoNodoRequiere = this.tipoNodoSeleccionado;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation(\n              $idProyecto: ID!\n              $idNodoRequiere: ID!\n              $idNodoRequerido: ID!\n              $tipoNodoRequiere: String!\n              $tipoNodoRequerido: String!\n            ) {\n              crearRequerimentoEntreNodosProyecto(\n                idProyecto: $idProyecto\n                idNodoRequiere: $idNodoRequiere\n                idNodoRequerido: $idNodoRequerido\n                tipoNodoRequiere: $tipoNodoRequiere\n                tipoNodoRequerido: $tipoNodoRequerido\n              ) {\n                nodo {\n                  ... on ObjetivoDeProyecto {\n                    id\n                    vinculos {\n                      idRef\n                      tipoRef\n                      tipo\n                    }\n                  }\n                  ... on TrabajoDeProyecto {\n                    id\n                    vinculos {\n                      idRef\n                      tipoRef\n                      tipo\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idProyecto: this.idProyecto,\n            idNodoRequiere,\n            idNodoRequerido,\n            tipoNodoRequiere,\n            tipoNodoRequerido,\n          },\n        })\n        .then(({ data: { crearRequerimentoEntreNodosProyecto } }) => {\n          console.log(\n            `Requerimento creado: ${JSON.stringify(\n              crearRequerimentoEntreNodosProyecto\n            )}`\n          );\n        })\n        .catch((error) => {\n          console.log(`Error`, error.message);\n        });\n    },\n    eliminarVinculo(tipoNodoRequerido, { idNodoRequiere, idNodoRequerido }) {\n      console.log(\n        `Preparando mutación para setear que ${idNodoRequiere} ya no está vinculado a ${idNodoRequerido} de tipo ${tipoNodoRequerido}`\n      );\n      const tipoNodoRequiere = this.tipoNodoSeleccionado;\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation(\n              $idProyecto: ID!\n              $idNodoRequiere: ID!\n              $idNodoRequerido: ID!\n              $tipoNodoRequiere: String!\n              $tipoNodoRequerido: String!\n            ) {\n              desvincularNodosProyecto(\n                idProyecto: $idProyecto\n                idNodoRequiere: $idNodoRequiere\n                idNodoRequerido: $idNodoRequerido\n                tipoNodoRequiere: $tipoNodoRequiere\n                tipoNodoRequerido: $tipoNodoRequerido\n              ) {\n                nodo {\n                  ... on ObjetivoDeProyecto {\n                    id\n                    vinculos {\n                      idRef\n                      tipoRef\n                      tipo\n                    }\n                  }\n                  ... on TrabajoDeProyecto {\n                    id\n                    vinculos {\n                      idRef\n                      tipoRef\n                      tipo\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            idProyecto: this.idProyecto,\n            idNodoRequiere,\n            idNodoRequerido,\n            tipoNodoRequiere,\n            tipoNodoRequerido,\n          },\n        })\n        .then(() => {\n          console.log(`Vinculo eliminado`);\n        })\n        .catch((error) => {\n          console.log(`Error`, error.message);\n        });\n    },  \n    desplazarVista(deltaX, deltaY) {\n      this.$set(this.centroVistaDecimal, \"x\",this.centroVistaDecimal.x - deltaX);\n      this.$set(this.centroVistaDecimal, \"y\",this.centroVistaDecimal.y - deltaY);\n      //this.actualizarTrazos++;\n    },\n    panVista(e){\n      if(!this.panningVista){\n        return\n      }      \n      this.desplazarVista((e.movementX/this.factorZoom), (e.movementY/this.factorZoom));\n      e.preventDefault();\n      this.vistaPanned = true;\n    },\n    mouseUpFondo(){\n      if(!this.vistaPanned){    \n        this.idNodoSeleccionado = null;\n        this.idNodoPaVentanita=null;\n        this.mostrandoMenuCx = false;\n        this.idNodoClickDerecho = null;\n      }\n      this.vistaPanned=false;\n      this.panningVista=false;\n    },\n    zoomVista(e){\n      if(!this.hovered || !e.ctrlKey){\n        return\n      }\n      e.preventDefault();      \n      \n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const proporciones={\n        x: (e.clientX-posContenedor.left)/posContenedor.width,\n        y: (e.clientY-posContenedor.top)/posContenedor.height,\n      }\n\n      const posZoom={\n        x: Math.round((e.clientX-posContenedor.left)/this.factorZoom)+this.centroVista.x,\n        y: Math.round((e.clientY-posContenedor.top)/this.factorZoom)+this.centroVista.y\n      }\n\n\n      const factorZoom=0.2;\n      var nuevoZoom=this.zoom-Math.round(e.deltaY*factorZoom);\n      if(nuevoZoom<this.minZoom){\n        this.zoom=this.minZoom;\n      }\n      else if(nuevoZoom>this.maxZoom){\n        this.zoom=this.maxZoom\n      }\n      else{\n        this.zoom=nuevoZoom;\n      }\n\n      //Pan vista de acuerdo con la posición del mouse respecto del atlas                       \n\n      this.$set(this.centroVistaDecimal, \"x\", posZoom.x-((posContenedor.width/this.factorZoom)*proporciones.x) );\n      this.$set(this.centroVistaDecimal, \"y\", posZoom.y-((posContenedor.height/this.factorZoom)*proporciones.y) );\n\n    }\n  },\n  mount() {\n    this.$set(\n      this.sizeDiagrama,\n      \"w\",\n      this.$$parent.$refs.zonaDiagramaFlujo.offsetWidth\n    );\n    this.$set(\n      this.sizeDiagrama,\n      \"h\",\n      this.$$parent.$refs.zonaDiagramaFlujo.offsetHeight\n    );\n  },\n  created(){\n    window.addEventListener(\"wheel\", this.zoomVista, {passive:false});\n  },\n  removed(){\n    window.removeEventListener(\"wheel\", this.zoomVista);\n  }\n};\n</script>\n\n<style scoped>\n.diagramaFlujo {\n  width: 100%;\n  height: 800px;\n  position: relative;\n  overflow: scroll;\n  background-color: rgb(225, 229, 241);\n  overflow: hidden;\n  z-index: 0;\n}\n#canvasDiagramaFlujo {\n  position: absolute;\n  top: 0%;\n  left: 0%;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n#dummy {\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  pointer-events: none;\n}\n\n#menuCx {\n  position: absolute;\n  z-index: 100;\n}\n\n.itemMenuCx {\n  padding: 5px 10px;\n  font-size: 15px;\n  cursor: pointer;\n  background-color: azure;\n}\n.itemMenuCx:hover {\n  background-color: rgb(141, 158, 158);\n}\n\n#contenedorNodos{\n  z-index: 0;\n}\n\n.ventanitaNodo {\n  width: min(400px, 90%);\n  position: absolute;\n  top: 50px;\n  left: 50px;\n  z-index: 1000;\n}\n</style>"]}]}