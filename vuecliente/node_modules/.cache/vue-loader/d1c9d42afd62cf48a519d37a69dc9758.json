{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/ventanaLista/ListaNodos.vue?vue&type=style&index=0&id=8845e602&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/ventanaLista/ListaNodos.vue","mtime":1643654906499},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNsaXN0YU5vZG9zIHsKICBsZWZ0OiAwJTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgb3ZlcmZsb3c6IHNjcm9sbDsKfQojYm90b25BYnJpciB7CiAgY3Vyc29yOiBwb2ludGVyOwogIG9wYWNpdHk6IDAuNTsKfQojYm90b25BYnJpcjpob3ZlciB7CiAgb3BhY2l0eTogMTsKfQoKI2FjdGl2YXJOb2Rvc1VzdWFyaW9SZXNwb25zYWJsZSB7CiAgd2lkdGg6IDE2cHg7CiAgaGVpZ2h0OiAxNnB4OwogIGJvcmRlci1yYWRpdXM6IDUwJTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KI2JhcnJhQ29uZmlndXJhY2lvbkxpc3RhTm9kb3MgewogIHBhZGRpbmc6IDNweCAxMHB4Owp9Ci5ib3RvbkNvbmZpZ3VyYWNpb24gewogIHdpZHRoOiAxNnB4OwogIGhlaWdodDogMTZweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47CiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47CiAgY3Vyc29yOiBwb2ludGVyOwp9CgoudW5mb2xkVmVydGljYWwtZW50ZXIsCi51bmZvbGRWZXJ0aWNhbC1sZWF2ZS10byB7CiAgaGVpZ2h0OiAwcHg7Cn0KLnVuZm9sZFZlcnRpY2FsLWVudGVyLWFjdGl2ZSwKLnVuZm9sZFZlcnRpY2FsLWxlYXZlLWFjdGl2ZSB7CiAgdHJhbnNpdGlvbjogaGVpZ2h0IDAuMXM7Cn0K"},{"version":3,"sources":["ListaNodos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ListaNodos.vue","sourceRoot":"src/components/atlasSolidaridad/ventanaLista","sourcesContent":["<template>\n  <div\n    id=\"listaNodos\"\n    @mousedown.stop=\"\"\n    @touchmove.stop=\"\"\n    @touchstart.stop=\"\"\n    @touchend.stop=\"\"\n    @mouseleave.stop=\"idNodoEnArrastre = null; tipoNodoSourceArrastre=null;\"\n    @mouseup.stop=\"idNodoEnArrastre = null; tipoNodoSourceArrastre=null;\"\n  >\n    <transition-group name=\"unfoldVertical\" tag=\"div\" id=\"laListaNodos\">\n      <nodo-vista-lista\n        v-for=\"(nodoPrimerNivel, index) of nodosPrimerNivel\"\n        ref=\"nodosEnLista\"\n        :id=\"'nodoEnLista' + nodoPrimerNivel.id\"\n        :key=\"'nodoLista' + nodoPrimerNivel.id\"\n        :esteNodo=\"nodoPrimerNivel\"\n        :idNodoSeleccionado=\"idNodoSeleccionado\"\n        :verCompletados=\"verCompletados\"\n        :verAsumidos=\"verAsumidos\"\n        :verVacios=\"verVacios\"\n        :modoLista=\"modoLista\"\n        :indiceNodosUnder=\"indiceNodosUnder\"\n        :idsNodosNeedingFetchMore=\"idsNodosNeedingFetchMore\"\n        :nodoSiendoArrastrado=\"idNodoEnArrastre\"\n        :usuarioResponsableAmplioNodoOver=\"usuarioResponsableAmplioNodoRoot\"\n        :idNodoOver=\"idNodoRoot\"\n        :tipoNodoOver=\"tipoNodoRoot\"\n        :index=\"index\"\n        @nodoSeleccionado=\"$emit('nodoSeleccionado', $event)\"\n        @nodosRenderizados=\"$emit('nodosRenderizados', $event)\"\n        @inicioArrastre=\"iniciarArrastre($event)\"\n        @finDeArrastre=\"finalizarArrastre\"\n        @toggleContenidoTodos=\"toggleContenidoTodos\"\n        @nodoEliminado=\"$emit('nodoEliminado', $event)\"\n        @meElimine=\"$emit('nodoEliminado', nodoPrimerNivel.id)\"\n        @nodoSolidaridadCreado=\"$emit('nodoSolidaridadCreado', $event)\"\n      />\n    </transition-group>\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\nimport { fragmentoNodoSolidaridad, fragmentoPersonaAtlas } from \"../frags\";\nimport NodoVistaLista from \"./NodoVistaLista.vue\";\nexport default {\n  components: { NodoVistaLista },\n  name: \"ListaNodos\",\n  props: {\n    usuarioResponsableAmplioNodoRoot: Boolean,\n    idNodoSeleccionado: String,\n    todosNodos: Array,\n    verCompletados: Boolean,\n    verAsumidos: Boolean,\n    verVacios: Boolean,\n    idNodoRoot: String,\n    tipoNodoRoot:String,\n    nodoRoot:Object,\n    indiceNodosUnder: Object,\n    modoLista: {\n      type: String,\n      default: \"todo\",\n    },\n    idsNodosNeedingFetchMore: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      idNodoEnArrastre: null,\n      idNodoSourceArrastre: null,\n      tipoNodoSourceArrastre:null,\n    };\n  },\n  methods: {\n    guardarChildren(nodo) {\n      nodo.children = this.nodosTodos.filter((n) => n.nodoParent === nodo.id);\n    },\n    desplegarCascadaHaciaNodo(idNodoTarget) {\n      this.$refs.nodosEnLista.forEach((nodo) => {\n        nodo.desplegarIfTargetUnder(idNodoTarget);\n      });\n    },\n    scrollToNodo(idNodo) {\n      const domSeleccionado = document.getElementById(\"nodoEnLista\" + idNodo);\n      const topSeleccionado =\n        domSeleccionado.getBoundingClientRect().top -\n        this.$el.getBoundingClientRect().top;\n      this.$el.scrollTop = topSeleccionado;\n    },\n    centrarEnItem(idNodo) {\n      this.desplegarCascadaHaciaNodo(idNodo);\n      this.$nextTick(() => {\n        this.scrollToNodo(idNodo);\n        if (this.idNodoSeleccionado != idNodo) {\n          this.$emit(\"nodoSeleccionado\", idNodo);\n        }\n      });\n    },\n    iniciarArrastre({ idNodoArrastrado, idNodoSource, tipoNodoSource }) {\n      this.idNodoEnArrastre = idNodoArrastrado;\n      this.idNodoSourceArrastre = idNodoSource;\n      this.tipoNodoSourceArrastre=tipoNodoSource;\n    },\n    finalizarArrastre({ idNodoTarget, tipoNodoTarget, index }) {\n      if (!this.idNodoEnArrastre || !this.tipoNodoSourceArrastre) {\n        return;\n      }\n\n      const infoArrastre = {\n        idNodoRequerido: this.idNodoEnArrastre,\n        idNodoSource: this.idNodoSourceArrastre,\n        tipoNodoSource: this.tipoNodoSourceArrastre,\n        idNodoTarget,\n        tipoNodoTarget,\n        index,\n      };\n      this.idNodoEnArrastre = null;\n      this.tipoNodoSourceArrastre=null;\n      \n\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation (\n              $idNodoRequerido: ID!\n              $idNodoSource: ID!\n              $tipoNodoSource: String!\n              $idNodoTarget: ID!\n              $tipoNodoTarget: String!\n              $index: Int\n            ) {\n              transferirRequerimentoBetweenNodosSolidaridad(\n                idNodoRequerido: $idNodoRequerido\n                idNodoSource: $idNodoSource\n                tipoNodoSource: $tipoNodoSource\n                idNodoTarget: $idNodoTarget\n                tipoNodoTarget: $tipoNodoTarget\n                index: $index\n              ) {\n                nodosModificados{\n                  ...fragNodoSolidaridad                \n                }\n                usuariosModificados{\n                  ...fragPersonaAtlas\n                }\n              }\n            }\n            ${fragmentoNodoSolidaridad}\n            ${fragmentoPersonaAtlas}\n          `,\n          variables: infoArrastre,\n        })\n        .then(() => {\n          this.$emit(\"nodoSeleccionado\", infoArrastre.idNodoRequerido);\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n        });\n    },\n    toggleContenidoTodos({ contenido, estado }) {\n      console.log(`Setting en todos ${contenido}. Mostrar: ${estado}`);\n      this.$refs.nodosEnLista.forEach((n) =>\n        n.globalSetMostrarContenido(contenido, estado)\n      );\n    },\n  },\n  computed: {    \n    nodosPrimerNivel() {\n      var nodosPrimerNivel = this.todosNodos.filter(\n        (n) =>\n          this.nodoRoot.vinculos.map(v=>v.idRef).includes(n.id)\n      ).sort((a, b)=>this.nodoRoot.vinculos.findIndex(v=>v.idRef===a.id) - this.nodoRoot.vinculos.findIndex(v=>v.idRef===b.id));      \n      return nodosPrimerNivel;\n    },\n  },\n  watch: {\n    idNodoEnArrastre(idNodoEnArrastre) {\n      if (!idNodoEnArrastre) {\n        this.idNodoSourceArrastre = null;\n        this.tipoNodoSourceArrastre=null;\n      }\n    },\n    nodosPrimerNivel(nodos){\n      this.$emit(\"nodosRenderizados\", nodos.map(n=>n.id))\n    }\n  },\n};\n</script>\n\n<style scoped>\n#listaNodos {\n  left: 0%;\n  position: relative;\n  overflow: scroll;\n}\n#botonAbrir {\n  cursor: pointer;\n  opacity: 0.5;\n}\n#botonAbrir:hover {\n  opacity: 1;\n}\n\n#activarNodosUsuarioResponsable {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n#barraConfiguracionListaNodos {\n  padding: 3px 10px;\n}\n.botonConfiguracion {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  border: 1px solid green;\n  background-color: green;\n  cursor: pointer;\n}\n\n.unfoldVertical-enter,\n.unfoldVertical-leave-to {\n  height: 0px;\n}\n.unfoldVertical-enter-active,\n.unfoldVertical-leave-active {\n  transition: height 0.1s;\n}\n</style>"]}]}