{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/calendario/OrganizadorHorarioSemanal.vue?vue&type=style&index=0&id=f4eaf318&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/calendario/OrganizadorHorarioSemanal.vue","mtime":1674484905026},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoub3JnYW5pemFkb3JIb3JhcmlvU2VtYW5hbCB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9CgoKLnZlbnRhbmFCbG9xdWVIb3JhcmlvIHsKICB6LWluZGV4OiAxMDAwMDA7Cn0KCiNzZWxlY2Npb25Fc3BhY2lvIHsKICBkaXNwbGF5OiBmbGV4OwogIGdhcDogMTBweDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9Cgojc2VsZWN0RXNwYWNpb0NyZWFyIHsKICBmb250LXNpemU6IDE3cHg7CiAgcGFkZGluZzogNXB4IDEwcHg7CiAgbWFyZ2luLWxlZnQ6IDEwcHg7Cn0KCiNjb250ZW5lZG9yRGlhcyB7CiAgd2lkdGg6IG1pbigxOTAwcHgsIDEwMHZ3KTsKICBvdmVyZmxvdy14OiBzY3JvbGw7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGdhcDogNDBweDsKfQo="},{"version":3,"sources":["OrganizadorHorarioSemanal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwbA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OrganizadorHorarioSemanal.vue","sourceRoot":"src/components/calendario","sourcesContent":["<template>\n  <div\n    class=\"organizadorHorarioSemanal\"\n    @click.left.exact=\"idBloqueMenuContextual = null\"\n  >\n    <ventana-bloque-horario\n      v-if=\"bloqueEnVentana\"\n      :esteBloque=\"bloqueEnVentana\"\n      @cerrarme=\"idBloqueEnVentana = null\"\n    />\n    <div class=\"barraComponente\">\n      Organizador de horario\n      <div class=\"contenedorControles\" style=\"margin-left: auto\">\n        <div class=\"boton\">\n          <img\n            src=\"@/assets/iconos/cog.svg\"\n            @click.stop=\"mostrandoConfiguracion = !mostrandoConfiguracion\"\n            alt=\"configrurar\"\n            style=\"\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"zonaConfiguracion\" v-show=\"mostrandoConfiguracion\">\n      <div class=\"barraSeccion\">Configuración.</div>\n\n      <div id=\"contenedorBloquesConfiguracion\">\n        <div\n          id=\"configuracionAdministradoresEspacios\"\n          class=\"bloqueConfiguracion\"\n        >\n          <div class=\"campoConfiguracion\">\n            <label for=\"checkAdministradorYo\">Mostrar mis bloques</label>\n            <input\n              type=\"checkbox\"\n              name=\"checkAdministradorYo\"\n              v-model=\"configuracionAdministradoresEspacios\"\n              value=\"yo\"\n              id=\"\"\n            />\n          </div>\n          <div class=\"campoConfiguracion\">\n            <label for=\"checkAdministradorYo\">Mostrar bloques de profes</label>\n            <input\n              type=\"checkbox\"\n              v-model=\"configuracionAdministradoresEspacios\"\n              value=\"profesorxs\"\n              id=\"\"\n            />\n          </div>\n        </div>\n\n        <div class=\"bloqueConfiguracion\">\n          <div class=\"campoConfiguracion\">\n            <label for=\"checkMostrarBloquesNiñosPequeños\"\n              >Mostrar bloques dirigidos a niñxs pequeñxs</label\n            >\n            <input\n              type=\"checkbox\"\n              name=\"checkMostrarBloquesNiñosPequeños\"\n              ref=\"checkMostrarBloquesNiñosPequeños\"\n              id=\"checkMostrarBloquesNiñosPequeños\"\n              v-model=\"mostrarBloquesParaChiquis\"\n            />\n          </div>\n          <div class=\"campoConfiguracion\">\n            <label for=\"checkMostrarBloquesTodos\"\n              >Mostrar bloques dirigidos a todxs</label\n            >\n            <input\n              type=\"checkbox\"\n              name=\"checkMostrarBloquesTodos\"\n              ref=\"checkMostrarBloquesTodos\"\n              id=\"checkMostrarBloquesTodos\"\n              v-model=\"mostrarBloquesParaTodos\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"zonaCheckAdministradorEspacios\"\n      v-for=\"profe of usuariosSeleccionables\"\n      :key=\"profe.id\"\n      v-show=\"false\"\n    >\n      <div class=\"nombreProfe\">{{ profe.nombres }}</div>\n      <input\n        type=\"checkbox\"\n        :value=\"profe.id\"\n        ref=\"checkProfe\"\n        id=\"checkProfe\"\n        v-model=\"idsUsuariosSeleccionados\"\n      />\n    </div>\n\n    <div id=\"contenedorDias\">\n      <dia-organizador-horario\n        v-for=\"(dia, index) of diasSemana\"\n        :key=\"dia\"\n        :nombreDia=\"dia\"\n        :numeroDia=\"index\"\n        :factorZoom=\"factorZoom\"\n        :offset=\"offset\"\n        :idEspacioCrear=\"idEspacioCrear\"\n        :bloquesHorario=\"bloquesActivos.filter((b) => b.diaSemana === index)\"\n        :idBloqueMenuContextual=\"idBloqueMenuContextual\"\n        :idBloqueSeleccionado=\"idBloqueSeleccionado\"\n        @bloqueSeleccionado=\"\n          idBloqueSeleccionado = idBloqueSeleccionado === $event ? null : $event\n        \"\n        @bloqueHorarioCreado=\"addBloqueHorarioCache\"\n        @menuContextualBloque=\"idBloqueMenuContextual = $event\"\n        @bloqueEliminado=\"eliminarBloqueHorarioCache\"\n        @expandirBloque=\"setIdBloqueVentana\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport DiaOrganizadorHorario, {\n  fragmentoBloqueHorario,\n} from \"./DiaOrganizadorHorario.vue\";\nimport { fragmentoEspacio } from \"../frags\";\nimport { gql } from \"apollo-server-core\";\nimport VentanaBloqueHorario from \"./VentanaBloqueHorario.vue\";\n\nconst QUERY_ITERACIONES_SEMANALES_ESPACIOS = gql`\n  query ($idsAdministradores: [ID]!) {\n    iteracionesSemanalesEspaciosByAdministradores(\n      idsAdministradores: $idsAdministradores\n    ) {\n      ...fragBloqueHorario\n    }\n  }\n  ${fragmentoBloqueHorario}\n`;\n\nexport default {\n  components: {\n    DiaOrganizadorHorario,\n    VentanaBloqueHorario,\n  },\n  props: { yo: Object },\n  name: \"OrganizadorHorarioSemanal\",\n  apollo: {\n    espacios: {\n      query: gql`\n        query ($idsUsuarios: [ID]!) {\n          espaciosByUsuariosAdmin(idsUsuarios: $idsUsuarios) {\n            ...fragEspacio\n          }\n        }\n        ${fragmentoEspacio}\n      `,\n      variables() {\n        return {\n          idsUsuarios: [this.usuario.id],\n        };\n      },\n      update({ espaciosByUsuariosAdmin }) {\n        const primerEspacio = espaciosByUsuariosAdmin.find(\n          (e) => e.idAdministrador === this.usuario.id\n        );\n        if (primerEspacio) {\n          this.idEspacioCrear = primerEspacio.id;\n        }\n\n        return espaciosByUsuariosAdmin;\n      },\n      skip() {\n        return !this.usuario?.id;\n      },\n    },\n    usuariosProfe: {\n      query: gql`\n        query {\n          usuariosProfe {\n            id\n            nombres\n          }\n        }\n      `,\n    },\n    bloquesHorario: {\n      query: QUERY_ITERACIONES_SEMANALES_ESPACIOS,\n      variables() {\n        return {\n          idsAdministradores: this.idsUsuariosSeleccionados,\n        };\n      },\n      skip() {\n        return (\n          !this.idsUsuariosSeleccionados ||\n          this.idsUsuariosSeleccionados.length < 1\n        );\n      },\n      update({ iteracionesSemanalesEspaciosByAdministradores }) {\n        return iteracionesSemanalesEspaciosByAdministradores;\n      },\n    },\n    bloquesHorarioUsuarioAsiste: {\n      query: gql`\n        query {\n          bloquesHorarioUsuarioAsiste {\n            ...fragBloqueHorario\n          }\n        }\n        ${fragmentoBloqueHorario}\n      `,\n      skip() {\n        return !this.configuracionAdministradoresEspacios.includes(\"yo\");\n      },\n    },\n  },\n  data() {\n    const stringConfiguracion = localStorage.getItem(\n      \"configuracionOrganizadorHorarioSemanal\"\n    );\n\n    var configuracion = {};\n\n    if (stringConfiguracion) {\n      configuracion = JSON.parse(stringConfiguracion);\n    }\n\n    console.log(\"La configuración es: \");\n    console.table(configuracion);\n\n    return {\n      usuariosProfe: [],\n      espacios: [],\n      bloquesHorarioUsuarioAsiste: [],\n      diasSemana: [\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\"],\n      factorZoom: 3,\n      offset: 470,\n      idEspacioCrear: null,\n\n      configuracionAdministradoresEspacios:\n        configuracion.configuracionAdministradoresEspacios || [\"yo\"],\n      mostrandoConfiguracion: false,\n      mostrarBloquesParaChiquis:\n        configuracion.mostrarBloquesParaChiquis != null &&\n        configuracion.mostrarBloquesParaChiquis != undefined\n          ? configuracion.mostrarBloquesParaChiquis\n          : true,\n      mostrarBloquesParaTodos:\n        configuracion.mostrarBloquesParaTodos != null &&\n        configuracion.mostrarBloquesParaTodos != undefined\n          ? configuracion.mostrarBloquesParaTodos\n          : true,\n\n      bloquesHorario: [],\n\n      idBloqueMenuContextual: null,\n      idBloqueSeleccionado: null,\n\n      idBloqueEnVentana: null,\n    };\n  },\n  computed: {\n    todosBloquesDescargados() {\n      return this.bloquesHorario.concat(this.bloquesHorarioUsuarioAsiste);\n    },\n    espaciosCreables() {\n      return this.espacios;\n    },\n    bloqueEnVentana() {\n      if (!this.idBloqueEnVentana) {\n        return null;\n      }\n\n      return this.todosBloquesDescargados.find(\n        (bloque) => bloque.id === this.idBloqueEnVentana\n      );\n    },\n    usuariosSeleccionables() {\n      var listaFinal = [...this.usuariosProfe];\n\n      if (\n        !this.usuariosProfe.some((profe) => profe.id === this.usuario.id) &&\n        this.yo\n      ) {\n        listaFinal.push({\n          id: this.usuario.id,\n          nombres: this.yo.nombres,\n        });\n      }\n\n      return listaFinal;\n    },\n    idsUsuariosSeleccionados() {\n      var listaFinal = [];\n      if (this.configuracionAdministradoresEspacios.includes(\"yo\")) {\n        listaFinal.push(this.usuario.id);\n      }\n\n      if (this.configuracionAdministradoresEspacios.includes(\"profesorxs\")) {\n        listaFinal.push(...this.usuariosProfe.map((u) => u.id));\n      }\n\n      return listaFinal;\n    },\n    bloquesActivos() {\n      var listaFinal = [...this.bloquesHorario];\n      const idsListaFinal = listaFinal.map((elem) => elem.id);\n      if (this.configuracionAdministradoresEspacios.includes(\"yo\")) {\n        for (var bloqueU of this.bloquesHorarioUsuarioAsiste) {\n          if (!idsListaFinal.includes(bloqueU.id)) {\n            listaFinal.push(bloqueU);\n          }\n        }\n      }\n\n      if (!this.mostrarBloquesParaChiquis) {\n        listaFinal = listaFinal.filter((bloque) => !bloque.paraChiquis);\n      }\n      if (!this.mostrarBloquesParaTodos) {\n        listaFinal = listaFinal.filter((bloque) => bloque.paraChiquis);\n      }\n\n      return listaFinal;\n    },\n  },\n  methods: {\n    addBloqueHorarioCache(nuevoBloque) {\n      console.log(`Adding to cache un bloque con id ${nuevoBloque.id}`);\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_ITERACIONES_SEMANALES_ESPACIOS,\n        variables: {\n          idsAdministradores: this.idsUsuariosSeleccionados,\n        },\n      });\n\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n      const indexB =\n        nuevoCache.iteracionesSemanalesEspaciosByAdministradores.findIndex(\n          (b) => b.id === nuevoBloque.id\n        );\n\n      if (indexB < 0) {\n        nuevoCache.iteracionesSemanalesEspaciosByAdministradores.push(\n          nuevoBloque\n        );\n\n        store.writeQuery({\n          query: QUERY_ITERACIONES_SEMANALES_ESPACIOS,\n          variables: {\n            idsAdministradores: this.idsUsuariosSeleccionados,\n          },\n          data: nuevoCache,\n        });\n      } else {\n        console.log(\"Iteración semanal ya estaba en caché\");\n      }\n    },\n    eliminarBloqueHorarioCache(idBloque) {\n      console.log(`Removing from cache un bloque con id ${idBloque}`);\n      const store = this.$apollo.provider.defaultClient;\n      const cache = store.readQuery({\n        query: QUERY_ITERACIONES_SEMANALES_ESPACIOS,\n        variables: {\n          idsAdministradores: this.idsUsuariosSeleccionados,\n        },\n      });\n\n      var nuevoCache = JSON.parse(JSON.stringify(cache));\n\n      const indexB =\n        nuevoCache.iteracionesSemanalesEspaciosByAdministradores.findIndex(\n          (b) => b.id === idBloque\n        );\n\n      if (indexB > -1) {\n        nuevoCache.iteracionesSemanalesEspaciosByAdministradores.splice(\n          indexB,\n          1\n        );\n\n        store.writeQuery({\n          query: QUERY_ITERACIONES_SEMANALES_ESPACIOS,\n          variables: {\n            idsAdministradores: this.idsUsuariosSeleccionados,\n          },\n          data: nuevoCache,\n        });\n      } else {\n        console.log(\"Iteración semanal no estaba en caché\");\n      }\n    },\n    abrirVentanaBloque(idBloque) {\n      console.log(\"Abriendo la ventana del bloque con id \" + idBloque);\n    },\n    setIdBloqueVentana(nuevoId) {\n      this.idBloqueEnVentana = nuevoId;\n    },\n    checkVentanaBloque() {\n      if (this.idBloqueEnVentana) {\n        this.idBloqueEnVentana = null;\n        return true;\n      }\n\n      return false;\n    },\n    setLocalStorageConfiguracion() {\n      const objeto = {\n        mostrarBloquesParaChiquis: this.mostrarBloquesParaChiquis,\n        mostrarBloquesParaTodos: this.mostrarBloquesParaTodos,\n        configuracionAdministradoresEspacios:\n          this.configuracionAdministradoresEspacios,\n      };\n\n      const objetoString = JSON.stringify(objeto);\n\n      localStorage.setItem(\n        \"configuracionOrganizadorHorarioSemanal\",\n        objetoString\n      );\n    },\n  },\n  watch: {\n    configuracionAdministradoresEspacios() {\n      this.setLocalStorageConfiguracion();\n    },\n    mostrarBloquesParaChiquis() {\n      this.setLocalStorageConfiguracion();\n    },\n    mostrarBloquesParaTodos() {\n      this.setLocalStorageConfiguracion();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.organizadorHorarioSemanal {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.ventanaBloqueHorario {\n  z-index: 100000;\n}\n\n#seleccionEspacio {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n#selectEspacioCrear {\n  font-size: 17px;\n  padding: 5px 10px;\n  margin-left: 10px;\n}\n\n#contenedorDias {\n  width: min(1900px, 100vw);\n  overflow-x: scroll;\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n}\n</style>"]}]}