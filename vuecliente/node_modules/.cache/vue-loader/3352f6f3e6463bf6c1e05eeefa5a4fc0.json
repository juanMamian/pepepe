{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/tablaAdministracion/ItemTablaMovimientoDinero.vue?vue&type=template&id=8f6224aa&scoped=true&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/homeNodo/tablaAdministracion/ItemTablaMovimientoDinero.vue","mtime":1643654906499},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAiaXRlbVRhYmxhTW92aW1pZW50b0RpbmVybyIsCiAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5lbGltaW5hbmRvc2UgfQogICAgfSwKICAgIFsKICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJiYXJyYVByaW5jaXBhbCIgfSB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbm9JdGVtIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL3JlY2VpcHQuc3ZnIiksCiAgICAgICAgICAgIGFsdDogIlJlY2V0YSIsCiAgICAgICAgICAgIHRpdGxlOiAiTW92aW1pZW50byBkZSBkaW5lcm8iCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjZWxkYUNhbXBvIiwgYXR0cnM6IHsgaWQ6ICJjZWxkYUZlY2hhIiB9IH0sIFsKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvRmVjaGEsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibnVldm9GZWNoYSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb0ZlY2hhLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvRmVjaGEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICByZWY6ICJpbnB1dE51ZXZvRmVjaGEiLAogICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0TnVldm9GZWNoYSIsCiAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb051ZXZvRmVjaGEgfSwKICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpbnB1dE51ZXZvRmVjaGEiLCB0eXBlOiAiZGF0ZSIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5udWV2b0ZlY2hhIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAga2V5ZG93bjogWwogICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJ0YWIiLCA5LCAkZXZlbnQua2V5LCAiVGFiIikKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b0ZlY2hhKCJuZXh0IikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICEkZXZlbnQudHlwZS5pbmRleE9mKCJrZXkiKSAmJgogICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVzYyIsIDI3LCAkZXZlbnQua2V5LCBbCiAgICAgICAgICAgICAgICAgICAgICAiRXNjIiwKICAgICAgICAgICAgICAgICAgICAgICJFc2NhcGUiCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRyZWZzLmlucHV0TnVldm9GZWNoYS5ibHVyKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGtleXByZXNzOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVudGVyIiwgMTMsICRldmVudC5rZXksICJFbnRlciIpCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b0ZlY2hhKCRldmVudCkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNoYW5nZTogX3ZtLmd1YXJkYXJOdWV2b0ZlY2hhLAogICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9GZWNoYSA9IGZhbHNlCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdm0ubnVldm9GZWNoYSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5lZGl0YW5kb0ZlY2hhLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvRmVjaGEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbmlkb0NhbXBvIiwKICAgICAgICAgICAgICBjbGFzczogeyBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9OdWV2b0ZlY2hhIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJmZWNoYSIgfSwKICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvRmVjaGEgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uZmVjaGFGb3JtYXRlYWRhKSArICIgIildCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjZWxkYUNhbXBvIiwKICAgICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJBcnRpY3VsbyIsIGlkOiAiY2VsZGFBcnRpY3VsbyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvQXJ0aWN1bG8sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b0FydGljdWxvIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb0FydGljdWxvLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGFuZG9BcnRpY3VsbyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9BcnRpY3VsbyIsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dE51ZXZvQXJ0aWN1bG8gaW5wdXROb21icmVDb3NhIiwKICAgICAgICAgICAgICBjbGFzczogeyBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9OdWV2b0FydGljdWxvIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5udWV2b0FydGljdWxvIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGtleWRvd246IFsKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJ0YWIiLCA5LCAkZXZlbnQua2V5LCAiVGFiIikKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFyTnVldm9BcnRpY3VsbygiY2FudGlkYWQiKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVzYyIsIDI3LCAkZXZlbnQua2V5LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICJFc2MiLAogICAgICAgICAgICAgICAgICAgICAgICAiRXNjYXBlIgogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHJlZnMuaW5wdXROdWV2b0FydGljdWxvLmJsdXIoKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9rKCRldmVudC5rZXlDb2RlLCAiZW50ZXIiLCAxMywgJGV2ZW50LmtleSwgIkVudGVyIikKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b0FydGljdWxvKCRldmVudCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9BcnRpY3VsbyA9IGZhbHNlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0ubnVldm9BcnRpY3VsbyA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uZWRpdGFuZG9BcnRpY3VsbywKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIWVkaXRhbmRvQXJ0aWN1bG8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbmlkb0NhbXBvIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgIGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb051ZXZvQXJ0aWN1bG8KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImFydGljdWxvIiB9LAogICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS50b2dnbGVFZGl0YW5kb0FydGljdWxvIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5lc3RlTW92aW1pZW50by5hcnRpY3VsbykgKyAiICIpXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNlbGRhQ2FtcG8iLAogICAgICAgICAgICBhdHRyczogeyBpZDogImNlbGRhQ2FudGlkYWQiLCB0aXRsZTogIkNhbnRpZGFkIiB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvQ2FudGlkYWQgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51ZXZvQ2FudGlkYWQsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJudWV2b0NhbnRpZGFkIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb0NhbnRpZGFkLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZWRpdGFuZG9DYW50aWRhZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogImlucHV0TnVldm9DYW50aWRhZCIsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dE51ZXZvQ2FudGlkYWQiLAogICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOgogICAgICAgICAgICAgICAgICBfdm0uZW52aWFuZG9OdWV2b0NhbnRpZGFkIHx8IF92bS5lbnZpYW5kb051ZXZvTnVtZXJvcwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogIm51bWJlciIsIG1pbjogIjAiIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5udWV2b0NhbnRpZGFkIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGtleXByZXNzOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICEkZXZlbnQudHlwZS5pbmRleE9mKCJrZXkiKSAmJgogICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVudGVyIiwgMTMsICRldmVudC5rZXksICJFbnRlciIpCiAgICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFyTnVldm9OdW1lcm9zKCRldmVudCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9DYW50aWRhZCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgIF92bS5udWV2b0NhbnRpZGFkID0gX3ZtLmVzdGVNb3ZpbWllbnRvLmNhbnRpZGFkCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAga2V5ZG93bjogWwogICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVzYyIsIDI3LCAkZXZlbnQua2V5LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICJFc2MiLAogICAgICAgICAgICAgICAgICAgICAgICAiRXNjYXBlIgogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHJlZnMuaW5wdXROdWV2b0NhbnRpZGFkLmJsdXIoKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgInRhYiIsIDksICRldmVudC5rZXksICJUYWIiKQogICAgICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b051bWVyb3MoIm1vdmltaWVudG9Vbml0YXJpbyIpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5udWV2b0NhbnRpZGFkID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5lZGl0YW5kb0NhbnRpZGFkLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhZWRpdGFuZG9DYW50aWRhZCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udGVuaWRvQ2FtcG8iLAogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLmVudmlhbmRvTnVldm9DYW50aWRhZAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY2FudGlkYWQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5lc3RlTW92aW1pZW50by5jYW50aWRhZCkgKyAiICIpXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNlbGRhQ2FtcG8iLAogICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIlZhbG9yIHVuaXRhcmlvIiB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvTW92aW1pZW50b1VuaXRhcmlvIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b01vdmltaWVudG9Vbml0YXJpbywKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvTW92aW1pZW50b1VuaXRhcmlvIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb01vdmltaWVudG9Vbml0YXJpbywKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvTW92aW1pZW50b1VuaXRhcmlvIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgcmVmOiAiaW5wdXROdWV2b01vdmltaWVudG9Vbml0YXJpbyIsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dE51ZXZvTW92aW1pZW50b1VuaXRhcmlvIiwKICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzoKICAgICAgICAgICAgICAgICAgX3ZtLmVudmlhbmRvTnVldm9Nb3ZpbWllbnRvVW5pdGFyaW8gfHwKICAgICAgICAgICAgICAgICAgX3ZtLmVudmlhbmRvTnVldm9OdW1lcm9zCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAibnVtYmVyIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubnVldm9Nb3ZpbWllbnRvVW5pdGFyaW8gfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9rKCRldmVudC5rZXlDb2RlLCAiZW50ZXIiLCAxMywgJGV2ZW50LmtleSwgIkVudGVyIikKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b051bWVyb3MoJGV2ZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGtleWRvd246IFsKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJ0YWIiLCA5LCAkZXZlbnQua2V5LCAiVGFiIikKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFyTnVldm9OdW1lcm9zKCJtb3ZpbWllbnRvVG90YWwiKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAhJGV2ZW50LnR5cGUuaW5kZXhPZigia2V5IikgJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgImVzYyIsIDI3LCAkZXZlbnQua2V5LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICJFc2MiLAogICAgICAgICAgICAgICAgICAgICAgICAiRXNjYXBlIgogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHJlZnMuaW5wdXROdWV2b01vdmltaWVudG9Vbml0YXJpby5ibHVyKCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIF92bS5lZGl0YW5kb01vdmltaWVudG9Vbml0YXJpbyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgIF92bS5udWV2b01vdmltaWVudG9Vbml0YXJpbyA9CiAgICAgICAgICAgICAgICAgICAgX3ZtLmVzdGVNb3ZpbWllbnRvLm1vdmltaWVudG9Vbml0YXJpbwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLm51ZXZvTW92aW1pZW50b1VuaXRhcmlvID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICFfdm0uZWRpdGFuZG9Nb3ZpbWllbnRvVW5pdGFyaW8gJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3ZpbWllbnRvRGVwZW5kaWVudGUgIT0gInVuaXRhcmlvIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICFlZGl0YW5kb01vdmltaWVudG9Vbml0YXJpbyAmJiBtb3ZpbWllbnRvRGVwZW5kaWVudGUgIT0gJ3VuaXRhcmlvJ1xuICAgICAgICAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbmlkb0NhbXBvIGNvbnRlbmlkb0NhbXBvRGluZXJvIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgIGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb051ZXZvTW92aW1pZW50b1VuaXRhcmlvCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJtb3ZpbWllbnRvVW5pdGFyaW8iIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiAiICsgX3ZtLl9zKF92bS5lc3RlTW92aW1pZW50by5tb3ZpbWllbnRvVW5pdGFyaW8pICsgIiAiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAhX3ZtLmVkaXRhbmRvTW92aW1pZW50b1VuaXRhcmlvICYmCiAgICAgICAgICAgICAgICAgICAgICBfdm0ubW92aW1pZW50b0RlcGVuZGllbnRlID09PSAidW5pdGFyaW8iLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgIWVkaXRhbmRvTW92aW1pZW50b1VuaXRhcmlvICYmIG1vdmltaWVudG9EZXBlbmRpZW50ZSA9PT0gJ3VuaXRhcmlvJ1xuICAgICAgICAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImNvbnRlbmlkb0NhbXBvIGNvbnRlbmlkb0NhbXBvRGluZXJvIG1vdmltaWVudG9EZXBlbmRpZW50ZSIsCiAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9OdWV2b01vdmltaWVudG9Vbml0YXJpbwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibW92aW1pZW50b1VuaXRhcmlvRGVwZW5kaWVudGUiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5udWV2b01vdmltaWVudG9Vbml0YXJpbykgKyAiICIpXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNlbGRhQ2FtcG8iLAogICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIlZhbG9yIHRvdGFsIiB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvTW92aW1pZW50b1RvdGFsIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b01vdmltaWVudG9Ub3RhbCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm51ZXZvTW92aW1pZW50b1RvdGFsIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb01vdmltaWVudG9Ub3RhbCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvTW92aW1pZW50b1RvdGFsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgcmVmOiAiaW5wdXROdWV2b01vdmltaWVudG9Ub3RhbCIsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dE51ZXZvTW92aW1pZW50b1RvdGFsIiwKICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzoKICAgICAgICAgICAgICAgICAgX3ZtLmVudmlhbmRvTnVldm9Nb3ZpbWllbnRvVG90YWwgfHwgX3ZtLmVudmlhbmRvTnVldm9OdW1lcm9zCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAibnVtYmVyIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubnVldm9Nb3ZpbWllbnRvVG90YWwgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9rKCRldmVudC5rZXlDb2RlLCAiZW50ZXIiLCAxMywgJGV2ZW50LmtleSwgIkVudGVyIikKICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmd1YXJkYXJOdWV2b051bWVyb3MoJGV2ZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGtleWRvd246IFsKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJ0YWIiLCA5LCAkZXZlbnQua2V5LCAiVGFiIikKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5ndWFyZGFyTnVldm9OdW1lcm9zKCkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoImtleSIpICYmCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsICJlc2MiLCAyNywgJGV2ZW50LmtleSwgWwogICAgICAgICAgICAgICAgICAgICAgICAiRXNjIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkVzY2FwZSIKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRyZWZzLmlucHV0TnVldm9Nb3ZpbWllbnRvVG90YWwuYmx1cigpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9Nb3ZpbWllbnRvVG90YWwgPSBmYWxzZQogICAgICAgICAgICAgICAgICBfdm0ubnVldm9Nb3ZpbWllbnRvVG90YWwgPSBfdm0uZXN0ZU1vdmltaWVudG8ubW92aW1pZW50b1RvdGFsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0ubnVldm9Nb3ZpbWllbnRvVG90YWwgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgIV92bS5lZGl0YW5kb01vdmltaWVudG9Ub3RhbCAmJgogICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vdmltaWVudG9EZXBlbmRpZW50ZSAhPSAidG90YWwiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiIWVkaXRhbmRvTW92aW1pZW50b1RvdGFsICYmIG1vdmltaWVudG9EZXBlbmRpZW50ZSAhPSAndG90YWwnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW5pZG9DYW1wbyBjb250ZW5pZG9DYW1wb0RpbmVybyIsCiAgICAgICAgICAgICAgICBjbGFzczogewogICAgICAgICAgICAgICAgICBkZXNoYWJpbGl0YWRvOiBfdm0uZW52aWFuZG9OdWV2b01vdmltaWVudG9Ub3RhbAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibW92aW1pZW50b1RvdGFsIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uZXN0ZU1vdmltaWVudG8ubW92aW1pZW50b1RvdGFsKSArICIgIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICFfdm0uZWRpdGFuZG9Nb3ZpbWllbnRvVG90YWwgJiYKICAgICAgICAgICAgICAgICAgICAgIF92bS5tb3ZpbWllbnRvRGVwZW5kaWVudGUgPT09ICJ0b3RhbCIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICIhZWRpdGFuZG9Nb3ZpbWllbnRvVG90YWwgJiYgbW92aW1pZW50b0RlcGVuZGllbnRlID09PSAndG90YWwnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjb250ZW5pZG9DYW1wbyBjb250ZW5pZG9DYW1wb0RpbmVybyBtb3ZpbWllbnRvRGVwZW5kaWVudGUiLAogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzogX3ZtLmVudmlhbmRvTnVldm9Nb3ZpbWllbnRvVG90YWwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm1vdmltaWVudG9Ub3RhbERlcGVuZGllbnRlIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0ubnVldm9Nb3ZpbWllbnRvVG90YWwpICsgIiAiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250cm9sZXNJdGVtIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0udG9nZ2xpbmdNb3ZpbWllbnRvUmVhbGl6YWRvLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIXRvZ2dsaW5nTW92aW1pZW50b1JlYWxpemFkbyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24iLAogICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS50b2dnbGluZ01vdmltaWVudG9SZWFsaXphZG8gfSwKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgZmlsdGVyOiBfdm0uZXN0ZU1vdmltaWVudG8ucmVhbGl6YWRvCiAgICAgICAgICAgICAgICAgID8gInZhcigtLWF0bGFzRmlsdGVyVmVyZGUpIgogICAgICAgICAgICAgICAgICA6ICIiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvY2hlY2suc3ZnIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJDaGVjayIsCiAgICAgICAgICAgICAgICB0aXRsZTogX3ZtLmVzdGVNb3ZpbWllbnRvLnJlYWxpemFkbwogICAgICAgICAgICAgICAgICA/ICJNYXJjYXIgcXVlIGVsIG1vdmltaWVudG8gbm8gaGEgc2lkbyByZWFsaXphZG8iCiAgICAgICAgICAgICAgICAgIDogIk1hcmNhciBxdXVlIGVsIG1vdmltaWVudG8gZnVlIHJlYWxpemFkbyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0udG9nZ2xlTW92aW1pZW50b1JlYWxpemFkbyB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udG9nZ2xpbmdNb3ZpbWllbnRvUmVhbGl6YWRvLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidG9nZ2xpbmdNb3ZpbWllbnRvUmVhbGl6YWRvIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICIiIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYm90b24iLAogICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgZGVzaGFiaWxpdGFkbzoKICAgICAgICAgICAgICAgICAgICAoIV92bS5lc3RlTW92aW1pZW50by5pbmZvcm1hY2lvbiB8fAogICAgICAgICAgICAgICAgICAgICAgX3ZtLmVzdGVNb3ZpbWllbnRvLmluZm9ybWFjaW9uLmxlbmd0aCA9PT0gMCkgJiYKICAgICAgICAgICAgICAgICAgICAhX3ZtLnVzdWFyaW9SZXNwb25zYWJsZUFtcGxpb05vZG8KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0aXRsZTogIlZlciBpbmZvcm1hY2nDs24gZGUgZXN0ZSBtb3ZpbWllbnRvIiwKICAgICAgICAgICAgICAgICAgaWQ6ICJib3RvblZlckluZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICBfdm0ubW9zdHJhbmRvSW5mb3JtYWNpb24gPSAhX3ZtLm1vc3RyYW5kb0luZm9ybWFjaW9uCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvaW5mby5zdmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJJbmZvcm1hY2lvbiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5lbGltaW5hbmRvc2UsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFlbGltaW5hbmRvc2UiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiRWxpbWluYXIgZXN0ZSBtb3ZpbWllbnRvIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZWxpbWluYXJzZSgkZXZlbnQpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvdHJhc2guc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiRGVsZXRlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImxvYWRpbmciLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVsaW1pbmFuZG9zZSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVsaW1pbmFuZG9zZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7IHRleHRvOiAiIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5lc3RlTW92aW1pZW50by5ub2RvT3duZXIKICAgICAgICA/IF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiaW5mb05vZG9Pd25lciIgfSB9LCBbCiAgICAgICAgICAgIF92bS5lc3RlTW92aW1pZW50by5ub2RvT3duZXIudGlwb05vZG8gPT09ICJ0cmFiYWpvIgogICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdmctaW5saW5lLS1mYSBmYS1jb2cgZmEtdy0xNiBpY29ub05vZG9Pd25lciIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZTogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXByZWZpeCI6ICJmYXMiLAogICAgICAgICAgICAgICAgICAgICAgImRhdGEtaWNvbiI6ICJjb2ciLAogICAgICAgICAgICAgICAgICAgICAgcm9sZTogImltZyIsCiAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgNTEyIDUxMiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICJjdXJyZW50Q29sb3IiLAogICAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAgICJNNDg3LjQgMzE1LjdsLTQyLjYtMjQuNmM0LjMtMjMuMiA0LjMtNDcgMC03MC4ybDQyLjYtMjQuNmM0LjktMi44IDcuMS04LjYgNS41LTE0LTExLjEtMzUuNi0zMC02Ny44LTU0LjctOTQuNi0zLjgtNC4xLTEwLTUuMS0xNC44LTIuM0wzODAuOCAxMTBjLTE3LjktMTUuNC0zOC41LTI3LjMtNjAuOC0zNS4xVjI1LjhjMC01LjYtMy45LTEwLjUtOS40LTExLjctMzYuNy04LjItNzQuMy03LjgtMTA5LjIgMC01LjUgMS4yLTkuNCA2LjEtOS40IDExLjdWNzVjLTIyLjIgNy45LTQyLjggMTkuOC02MC44IDM1LjFMODguNyA4NS41Yy00LjktMi44LTExLTEuOS0xNC44IDIuMy0yNC43IDI2LjctNDMuNiA1OC45LTU0LjcgOTQuNi0xLjcgNS40LjYgMTEuMiA1LjUgMTRMNjcuMyAyMjFjLTQuMyAyMy4yLTQuMyA0NyAwIDcwLjJsLTQyLjYgMjQuNmMtNC45IDIuOC03LjEgOC42LTUuNSAxNCAxMS4xIDM1LjYgMzAgNjcuOCA1NC43IDk0LjYgMy44IDQuMSAxMCA1LjEgMTQuOCAyLjNsNDIuNi0yNC42YzE3LjkgMTUuNCAzOC41IDI3LjMgNjAuOCAzNS4xdjQ5LjJjMCA1LjYgMy45IDEwLjUgOS40IDExLjcgMzYuNyA4LjIgNzQuMyA3LjggMTA5LjIgMCA1LjUtMS4yIDkuNC02LjEgOS40LTExLjd2LTQ5LjJjMjIuMi03LjkgNDIuOC0xOS44IDYwLjgtMzUuMWw0Mi42IDI0LjZjNC45IDIuOCAxMSAxLjkgMTQuOC0yLjMgMjQuNy0yNi43IDQzLjYtNTguOSA1NC43LTk0LjYgMS41LTUuNS0uNy0xMS4zLTUuNi0xNC4xek0yNTYgMzM2Yy00NC4xIDAtODAtMzUuOS04MC04MHMzNS45LTgwIDgwLTgwIDgwIDM1LjkgODAgODAtMzUuOSA4MC04MCA4MHoiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgIF92bS5lc3RlTW92aW1pZW50by5ub2RvT3duZXIudGlwb05vZG8gPT09ICJvYmpldGl2byIKICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgInN2Zy1pbmxpbmUtLWZhIGZhLXN0YXIgZmEtdy0xOCBpY29ub05vZG9Pd25lciIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiwKICAgICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZTogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXByZWZpeCI6ICJmYXMiLAogICAgICAgICAgICAgICAgICAgICAgImRhdGEtaWNvbiI6ICJzdGFyIiwKICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDU3NiA1MTIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAiTTI1OS4zIDE3LjhMMTk0IDE1MC4yIDQ3LjkgMTcxLjVjLTI2LjIgMy44LTM2LjcgMzYuMS0xNy43IDU0LjZsMTA1LjcgMTAzLTI1IDE0NS41Yy00LjUgMjYuMyAyMy4yIDQ2IDQ2LjQgMzMuN0wyODggNDM5LjZsMTMwLjcgNjguN2MyMy4yIDEyLjIgNTAuOS03LjQgNDYuNC0zMy43bC0yNS0xNDUuNSAxMDUuNy0xMDNjMTktMTguNSA4LjUtNTAuOC0xNy43LTU0LjZMMzgyIDE1MC4yIDMxNi43IDE3LjhjLTExLjctMjMuNi00NS42LTIzLjktNTcuNCAweiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJub21icmVOb2RvT3duZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmVzdGVNb3ZpbWllbnRvLm5vZG9Pd25lci5ub21icmUpKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogImNvbnRlbmlkb1NlbGVjY2lvbmFkbyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tb3N0cmFuZG9JbmZvcm1hY2lvbiwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtb3N0cmFuZG9JbmZvcm1hY2lvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiem9uYUNvbnRlbmlkb1NlbGVjY2lvbmFkbyIsCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiem9uYUluZm9ybWFjaW9uIiB9LAogICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUVkaXRhbmRvSW5mb3JtYWNpb24gfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmVkaXRhbmRvSW5mb3JtYWNpb24sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFlZGl0YW5kb0luZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVmOiAiaW5mb3JtYWNpb24iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJpbmZvcm1hY2lvbiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiICIgKyBfdm0uX3MoX3ZtLmVzdGVNb3ZpbWllbnRvLmluZm9ybWFjaW9uKSArICIgIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5udWV2b0luZm9ybWFjaW9uLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibnVldm9JbmZvcm1hY2lvbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdGFuZG9JbmZvcm1hY2lvbiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRhbmRvSW5mb3JtYWNpb24iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICByZWY6ICJpbnB1dE51ZXZvSW5mb3JtYWNpb24iLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXRUZXh0b05vZG8iLAogICAgICAgICAgICAgIGNsYXNzOiB7IGRlc2hhYmlsaXRhZG86IF92bS5lbnZpYW5kb051ZXZvSW5mb3JtYWNpb24gfSwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImlucHV0TnVldm9JbmZvcm1hY2lvbiIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51ZXZvSW5mb3JtYWNpb24gfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5udWV2b0luZm9ybWFjaW9uID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lZGl0YW5kb0luZm9ybWFjaW9uLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlZGl0YW5kb0luZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250ZW5lZG9yQm90b25lc0NhbXBvIiwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uZW52aWFuZG9OdWV2b0luZm9ybWFjaW9uLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFlbnZpYW5kb051ZXZvSW5mb3JtYWNpb24iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJvdG9uR3VhcmRhckNhbXBvIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9zYXZlLnN2ZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIkd1YXJkYXIiLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiR3VhcmRhciBkZXNjcmlwY2nDs24iLAogICAgICAgICAgICAgICAgICAgIGlkOiAiYm90b25HdWFyZGFySW5mb3JtYWNpb24iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uZ3VhcmRhck51ZXZvSW5mb3JtYWNpb24gfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygibG9hZGluZyIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5lbnZpYW5kb051ZXZvSW5mb3JtYWNpb24sCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW52aWFuZG9OdWV2b0luZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGV4dG86ICIiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJib3Rvbkd1YXJkYXJDYW1wbyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pY29ub3MvZXF1aXMuc3ZnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ2FuY2VsYXIiLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ2FuY2VsYXIgZWRpY2nDs24iLAogICAgICAgICAgICAgICAgICAgIGlkOiAiYm90b25DYW5jZWxhckVkaWNpb25JbmZvcm1hY2lvbiIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uZWRpdGFuZG9JbmZvcm1hY2lvbiA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}