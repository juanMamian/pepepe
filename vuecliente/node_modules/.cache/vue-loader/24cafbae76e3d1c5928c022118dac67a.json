{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/AtlasSolidaridad.vue?vue&type=style&index=1&id=67c6de9e&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasSolidaridad/AtlasSolidaridad.vue","mtime":1643654906499},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hdGxhc1NvbGlkYXJpZGFkIHsKICBvdmVyZmxvdzogaGlkZGVuOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTIyNjNhOwogIGhlaWdodDogMTAwdmg7Cn0KI2JvdG9uVmlzdGFMaXN0YSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiAyNHB4OwogIGhlaWdodDogMjRweDsKICB0b3A6IDIycHg7CiAgbGVmdDogMjJweDsKICBmaWx0ZXI6IHZhcigtLWF0bGFzRmlsdGVyR3Jpcyk7CiAgY3Vyc29yOiBwb2ludGVyOwogIHotaW5kZXg6IDI7Cn0KI2JvdG9uVmlzdGFMaXN0YTpob3ZlciB7CiAgZmlsdGVyOiB2YXIoLS1maWx0ZXJCbGFuY28pOwp9Ci52ZW50YW5hTGlzdGEgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgbGVmdDogMCU7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNnM7CiAgYm94LXNoYWRvdzogNHB4IDRweCA2cHggcmdiYSgxNTIsIDE0MywgMjUzLCAwLjI1KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTlkMWQxOwogIHdpZHRoOiBtaW4oMTAwMHB4LCAxMDAlKTsKfQoKLm5vZG9WaXN0YUxpc3RhICNiYXJyYVN1cGVyaW9yIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7Cn0KI21lbnVDb250ZXh0dWFsIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3MywgMTczLCAxNzMpOwogIHotaW5kZXg6IDI7Cn0KLmJvdG9uTWVudUNvbnRleHR1YWwgewogIHBhZGRpbmc6IDVweCAxMHB4OwogIGN1cnNvcjogcG9pbnRlcjsKfQouYm90b25NZW51Q29udGV4dHVhbDpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogZ3JheTsKfQojY29udGVuZWRvck5vZG9zIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgei1pbmRleDogMTsKfQojY29udGVuZWRvclZpbmN1bG9zTm9kb3MgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKI2NhbnZhc2VzYXRsYXNTb2xpZGFyaWRhZCB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CiNjZW50cm9WaXN0YSB7CiAgd2lkdGg6IDNweDsKICBoZWlnaHQ6IDNweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYmFja2dyb3VuZC1jb2xvcjogb3JhbmdlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKfQoKI2JvdG9uQ2FsbGluZ1Bvc2ljaW9uZXMgewogIHdpZHRoOiAyMHB4OwogIGhlaWdodDogMjBweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMSU7CiAgcmlnaHQ6IDElOwogIGN1cnNvcjogcG9pbnRlcjsKICB6LWluZGV4OiAxMDA7Cn0KLnZlbnRhbml0YU5vZG8gewogIHdpZHRoOiBtaW4oNDAwcHgsIDkwJSk7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMTVweDsKICBsZWZ0OiAxNXB4OwogIHotaW5kZXg6IDYwOwp9CiNsb2FkaW5nTm9kb3MgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDUwJTsKICBsZWZ0OiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOwp9CiNpbmRpY2Fkb3JDZW50cm9EZXNjYXJnYSB7CiAgd2lkdGg6IDUwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9CiNpbmRpY2Fkb3JDZW50cm9WaXN0YSB7CiAgd2lkdGg6IDUwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgNjAsIDI1NSk7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9CgojaW5mb1pvb20gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDIlOwogIGxlZnQ6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7CiAgcGFkZGluZzogMTBweDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgY29sb3I6IHJnYigxMDIsIDEwMiwgMTAyKTsKICB6LWluZGV4OiAzOwp9Cgojbm9tYnJlTm9kb0VtZXJnZW50ZSB7CiAgcG9zaXRpb246IGZpeGVkOwogIGJvdHRvbTogNXB4OwogIGxlZnQ6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7CiAgYm9yZGVyLXJhZGl1czogMTBweDsKICBib3JkZXI6IDJweCBzb2xpZCByZ2IoNTYsIDEyOCwgMTMxKTsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTg1LCAyMTUsIDIxNik7CiAgcGFkZGluZzogMTBweDsKICBmb250LXNpemU6IDIwcHg7CiAgei1pbmRleDogMTA7Cn0KI3BhbmVsQ29uZmlndXJhY2lvbiB7CiAgcG9zaXRpb246IGZpeGVkOwogIGJvdHRvbTogMXZoOwogIHJpZ2h0OiAzdnc7Cn0KCi5ib3RvblBhbmVsQ29uZmlndXJhY2lvbiB7CiAgaGVpZ2h0OiAyNXB4OwogIHBhZGRpbmc6IDVweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50Owp9Ci5ib3RvblBhbmVsQ29uZmlndXJhY2lvbi5hY3Rpdm8gewogIGJvcmRlci1jb2xvcjogd2hpdGU7Cn0KLmJvdG9uUGFuZWxDb25maWd1cmFjaW9uIGltZyB7CiAgaGVpZ2h0OiAxMDAlOwp9Ci5mYWRlT3V0LWxlYXZlLXRvIHsKICBvcGFjaXR5OiAwOwp9Ci5mYWRlT3V0LWxlYXZlLWFjdGl2ZSB7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxczsKfQouZmFkZU91dC1sZWF2ZSB7CiAgb3BhY2l0eTogMTsKfQoKLmZhZGVPdXRMZW50by1sZWF2ZS10byB7CiAgb3BhY2l0eTogMDsKfQouZmFkZU91dExlbnRvLWxlYXZlLWFjdGl2ZSB7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyczsKfQouZmFkZU91dExlbnRvLWxlYXZlIHsKICBvcGFjaXR5OiAxOwp9CgouZmFkZS1lbnRlci1hY3RpdmUsCi5mYWRlLWxlYXZlLWFjdGl2ZSB7CiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzOwp9CgouZmFkZS1lbnRlciwKLmZhZGUtbGVhdmUtdG8gewogIG9wYWNpdHk6IDA7Cn0K"},{"version":3,"sources":["AtlasSolidaridad.vue"],"names":[],"mappingsmsfile":"AtlasSolidaridad.vue","sourceRoot":"src/components/atlasSolidaridad","sourcesContent":["<template>\n  <div\n    class=\"atlasSolidaridad\"\n    @mousedown.left.exact.self.stop=\"panningVista = true\"\n    @mouseenter=\"hovered = true\"\n    @mouseleave=\"hovered = false\"\n    @click.right.self.exact.prevent=\"abrirMenuContextual\"\n    @mousemove=\"panVista\"\n    @mouseup.left=\"clickFondoAtlas\"\n    @touchmove.prevent.stop=\"movimientoMobile\"\n    @touchstart=\"iniciaMovimientoTouch\"\n    @touchend=\"finTouch\"\n  >    \n    <div\n      id=\"botonCallingPosiciones\"\n      v-if=\"usuarioSuperadministrador && usuario.username == 'juanMamian'\"\n      @click.stop=\"iniciarCallingPosiciones\"\n      :class=\"{ deshabilitado: callingPosiciones }\"\n      :style=\"[\n        { backgroundColor: callingPosiciones ? 'green' : 'transparent' },\n      ]\"\n    ></div>\n    <transition name=\"fadeOut\">\n      <div v-show=\"showingZoomInfo\" id=\"infoZoom\">x{{ factorZoom }}</div>\n    </transition>      \n    <div\n      id=\"menuContextual\"\n      v-if=\"usuario && usuario.id\"\n      v-show=\"mostrandoMenuContextual\"\n      :style=\"[offsetMenuContextual]\"\n      :class=\"{ deshabilitado: enviandoQueryNodos }\"\n    >\n      <div\n        class=\"botonMenuContextual\"\n        id=\"botonCrearObjetivo\"\n        v-show=\"usuarioSuperadministrador\"\n        @mouseup.left.stop=\"\"\n        @click.stop=\"crearNodoEnMenuContextual('objetivo')\"\n      >\n        Crear objetivo\n      </div>\n      <div\n        class=\"botonMenuContextual\"\n        id=\"botonCrearObjetivo\"\n        @click.stop=\"crearNodoEnMenuContextual('trabajo')\"\n        @mouseup.left.stop=\"\"\n        v-show=\"usuarioSuperadministrador\"\n      >\n        Crear trabajo\n      </div>\n    </div>\n\n    <div\n      id=\"centroVista\"\n      v-show=\"usuarioSuperadministrador && callingPosiciones\"\n    >\n      {{ centroVista.x + \", \" + centroVista.y }}\n    </div>\n\n    <div id=\"contenedorVinculosNodos\" :style=\"[posContenedores]\">\n      <enlaces-nodo\n        v-for=\"nodo of nodosConRequerimentos\"\n        :yo=\"yo\"\n        :key=\"nodo.id\"\n        :idNodoSeleccionado=\"idNodoSeleccionado\"\n        :esteNodo=\"nodo\"\n        :todosNodos=\"todosNodos\"\n        :factorZoom=\"factorZoom\"\n        :nodoSeleccionado=\"nodoSeleccionado\"\n        :redibujarEnlaces=\"redibujarEnlacesNodos\"\n        :idsTodosNodosRender=\"idsTodosNodosRender\"\n        :callingPosiciones=\"callingPosiciones\"\n        :transicionarPosicionNodos=\"transicionarPosicionNodos\"\n      />\n    </div>\n\n    <div id=\"contenedorNodos\" :style=\"[posContenedores]\">\n      <nodo-persona\n        v-for=\"persona of personasRender\"\n        :esNodoYo=\"nodoYo.id === persona.id\"\n        :key=\"persona.id\"\n        :esteNodo=\"persona\"\n        :idNodoSeleccionado=\"idNodoSeleccionado\"\n        :idsNodosNeedingFetchMore=\"idsNodosNeedingFetchMore\"\n        :nodoSeleccionado=\"nodoSeleccionado\"\n        :nodosUnder=\"indiceNodosUnder[persona.id]\"\n        :requeridoPorSeleccionado=\"\n          idsNodosRequeridosSeleccionado.includes(persona.id)\n        \"\n        :requiereAlSeleccionado=\"\n          idsNodosRequierenSeleccionado.includes(persona.id)\n        \"\n        :idsNodosDesplegados=\"idsNodosDesplegados\"\n        :menuCx=\"idNodoMenuCx && idNodoMenuCx === persona.id\"\n        :factorZoom=\"factorZoom\"\n        :callingPosiciones=\"callingPosiciones\"\n        :transparentoso=\"\n          idNodoSeleccionado &&\n          idNodoSeleccionado != persona.id &&\n          !nodoSeleccionado.responsables.includes(persona.id) &&\n          !idsNodosRequierenSeleccionado.includes(persona.id) &&\n          nodoSeleccionado &&\n          nodoSeleccionado.nodoParent != persona.id\n        \"\n        :todosNodos=\"todosNodos\"\n        :todasPersonas=\"personas\"\n        :transicionarPosicionNodos=\"transicionarPosicionNodos\"\n        @mouseup.native.stop=\"\"\n        @click.native=\"idNodoSeleccionado = persona.id\"\n        @click.native.right.exact.stop.prevent=\"idNodoMenuCx = persona.id\"\n        @nodoSolidaridadCreado=\"addNodoToNodosSolidaridad($event)\"\n\n      />\n      <transition-group name=\"fade\" tag=\"div\" v-if=\"indiceNodosUnder\">\n        <nodo\n          v-for=\"nodo of nodosSolidaridadRender\"\n          :key=\"nodo.id\"\n          :esteNodo=\"nodo\"\n          :nodoYo=\"nodoYo\"\n          :idNodoSeleccionado=\"idNodoSeleccionado\"\n          :idsNodosNeedingFetchMore=\"idsNodosNeedingFetchMore\"\n          :nodoParent=\"todosNodos.find((n) => n.id === nodo.nodoParent)\"\n          :nodoSeleccionado=\"nodoSeleccionado\"\n          :nodosUnder=\"indiceNodosUnder[nodo.id]\"\n          :requeridoPorSeleccionado=\"\n            idsNodosRequeridosSeleccionado.includes(nodo.id)\n          \"\n          :seleccionadoEsResponsable=\"\n            nodo.responsables.includes(idNodoSeleccionado)\n          \"\n          :requiereAlSeleccionado=\"\n            idsNodosRequierenSeleccionado.includes(nodo.id)\n          \"\n          :enVentanita=\"idNodoPaVentanita === nodo.id\"\n          :idsNodosDesplegados=\"idsNodosDesplegados\"\n          :menuCx=\"idNodoMenuCx && idNodoMenuCx == nodo.id\"\n          :factorZoom=\"factorZoom\"\n          :callingPosiciones=\"callingPosiciones\"\n          :usuarioAdministradorNodoSeleccionado=\"\n            usuarioAdministradorNodoSeleccionado\n          \"\n          :usuarioResponsableNodoSeleccionado=\"\n            usuarioResponsableNodoSeleccionado\n          \"\n          :usuarioResponsableAmplioNodoSeleccionado=\"\n            usuarioResponsableAmplioNodoSeleccionado\n          \"\n          :transparentoso=\"\n            idNodoSeleccionado &&\n            idNodoSeleccionado != nodo.id &&\n            !idsNodosRequeridosSeleccionado.includes(nodo.id) &&\n            !idsNodosRequierenSeleccionado.includes(nodo.id) &&\n            !nodo.responsables.includes(idNodoSeleccionado) &&\n            nodoSeleccionado &&\n            nodoSeleccionado.nodoParent != nodo.id\n          \"\n          :childSeleccionado=\"idsNodosChildrenSeleccionado.includes(nodo.id)\"\n          :todosNodos=\"todosNodos\"\n          :transicionarPosicionNodos=\"transicionarPosicionNodos\"\n          @meMovi=\"redibujarEnlacesNodos++\"\n          @mouseup.native.stop=\"\"\n          @click.native=\"idNodoSeleccionado = nodo.id\"\n          @click.native.right.exact.stop.prevent=\"idNodoMenuCx = nodo.id\"\n          @meAbrieron=\"setNodoEnVentanita(nodo.id)\"\n          @meElimine=\"eliminarNodoCache(nodo.id)\"\n          @nodoSolidaridadCreado=\"addNodoToNodosSolidaridad($event)\"\n\n        />\n      </transition-group>\n\n      <div\n        id=\"indicadorCentroDescarga\"\n        :style=\"[\n          {\n            left: centroDescarga.x * factorZoom + 'px',\n            top: centroDescarga.y * factorZoom + 'px',\n            width: 20 * factorZoom + 'px',\n            height: 20 * factorZoom + 'px',\n          },\n        ]\"\n        v-show=\"usuario.username == 'juanMamian'\"\n      ></div>\n      <div\n        id=\"indicadorCentroVista\"\n        :style=\"[\n          {\n            left: centroVista.x * factorZoom + 'px',\n            top: centroVista.y * factorZoom + 'px',\n            width: 20 * factorZoom + 'px',\n            height: 20 * factorZoom + 'px',\n          },\n        ]\"\n        v-show=\"usuario.username == 'juanMamian'\"\n      ></div>\n    </div>\n\n    <!-- <ventanita-nodo\n      v-if=\"idNodoPaVentanita && nodoEnVentanita && !callingPosiciones\"      \n      :key=\"nodoEnVentanita.id\"\n      :esteNodo=\"nodoEnVentanita\"      \n      @cerrarme=\"cerrarNodoEnVentanita()\"\n    /> -->\n\n    <router-view\n      v-if=\"idNodoPaVentanita && nodoEnVentanita && !callingPosiciones\"\n      :key=\"nodoEnVentanita.id\"\n      :esteNodo=\"nodoEnVentanita\"\n      @cerrarme=\"cerrarNodoEnVentanita()\"\n    />\n\n    <transition name=\"fadeOutLento\">\n      <div id=\"nombreNodoEmergente\" v-show=\"showingNombreNodoEmergente\">\n        {{ nodoSeleccionado ? nodoSeleccionado.nombre : \"\" }}\n      </div>\n    </transition>\n\n    <div id=\"panelConfiguracion\" @mouseup.stop=\"\">\n      <div\n        class=\"boton botonPanelConfiguracion\"\n        :class=\"{ activo: mostrandoPersonas }\"\n        :title=\"mostrandoPersonas ? 'Ocultar personas' : 'Mostrar personas'\"\n        @click.stop=\"mostrandoPersonas = !mostrandoPersonas\"\n      >\n        <img src=\"@/assets/iconos/user.svg\" alt=\"Usuarios\" />\n      </div>\n    </div>\n\n    <loading\n      id=\"loadingNodos\"\n      v-show=\"        \n        $apollo.queries.nodoRoot.loading        \n      \"\n      texto=\"Descargando información...\"\n      colorLetra=\"white\"\n    />\n  </div>\n</template>\n\n<script>\nimport gql from \"graphql-tag\";\n\nimport Loading from \"../utilidades/Loading.vue\";\nimport Nodo from \"./Nodo.vue\";\nimport EnlacesNodo from \"./EnlacesNodo.vue\";\nimport debounce from \"debounce\";\nimport { fragmentoNodoSolidaridad, fragmentoPersonaAtlas } from \"./frags\";\nimport NodoPersona from \"./NodoPersona.vue\";\nimport { MixinAtlasSolidaridad } from \"./MixinAtlasSolidaridad\";\nimport { QUERY_DATOS_USUARIO_ATLAS_SOLIDARIDAD } from \"./ConfiguracionNodoSolidaridad\";\n// const QUERY_NODOS = gql`\n//   query ($nivel: Int!) {\n//     nodosSolidaridadById(nivel: $nivel) {\n//       ...fragNodoSolidaridad\n//     }\n//   }\n//   ${fragmentoNodoSolidaridad}\n// `;\n\nexport const QUERY_PERSONAS_ATLAS_SOLIDARIDAD = gql`\n  query ($idsUsuarios: [ID!]) {\n    usuariosByIds(idsUsuarios: $idsUsuarios) {\n      ...fragPersonaAtlas\n    }\n  }\n  ${fragmentoPersonaAtlas}\n`;\n\nexport const QUERY_NODOS_ATLAS = gql`\n  query {\n    nodosSolidaridadByIds {\n      ...fragNodoSolidaridad\n    }\n  }\n  ${fragmentoNodoSolidaridad}\n`;\n\nexport default {\n  components: {\n    Loading,\n    Nodo,\n    EnlacesNodo,\n    NodoPersona,\n  },\n  name: \"AtlasSolidaridad\",\n  apollo: {           \n    yo: {\n      query: QUERY_DATOS_USUARIO_ATLAS_SOLIDARIDAD,\n      update({ yo }) {\n        this.calcularEsquinaVista(yo.coords);\n        this.datosYoDescargados = true;\n        return yo;\n      },\n      skip() {\n        return !this.usuarioLogeado || !this.montado;\n      },\n      fetchPolicy: \"network-only\",\n    },\n    $subscribe:{\n      nodosAtlasPosicionados: {\n        query: gql`\n          subscription ($idAtlas: ID!) {\n            nodosAtlasPosicionados(idAtlas: $idAtlas)\n          }\n        `,\n        variables: {\n          idAtlas: \"61b3fe0280509360825b2634\", //Id del atlas de solidaridad.\n        },\n        result() {\n          console.log(\n            `Nodos del atlas han sido posicionados. Refetching coords`\n          );\n          this.refetchCoordsNodos();\n        },\n      },\n    }    \n  },\n  mixins: [MixinAtlasSolidaridad],\n  data() {\n    return {\n      tipoNodoRoot:'usuario',\n      montado: false,\n      personas: [],\n      descargasPersonas: 0,\n      nodosRenderRoot: [],\n      nodosSolidaridadRender: [],\n\n      personasRenderRoot: [],\n      personasRender: [],\n\n      mostrandoMenuContextual: false,\n      posMenuContextual: {\n        top: 0,\n        left: 0,\n      },\n\n      esquinaVistaDecimal: {\n        x: 0,\n        y: 0,\n      },\n      centroDescarga: {\n        x: 0,\n        y: 0,\n      },\n\n      radioDescarga: null,\n      sizeAtlas: {\n        x: 0,\n        y: 0,\n        diagonal: 0,\n      },\n      panningVista: false,\n      vistaPanned: false,\n      hovered: false,\n\n      idNodoSeleccionado: null,\n      idNodoMenuCx: null,\n      idNodoCentradoArbol: null,\n\n      zoom: 80,\n      minZoom: 20,\n      maxZoom: 120,\n      showingZoomInfo: false,\n      infoPosZoom: null,\n\n      pinching: false,\n      lastPinchDistance: 0,\n\n      // proyectos: [],\n      // trabajos: [],\n      // objetivos: [],\n\n      enviandoQueryNodos: false,\n      refetchingCoords: false,\n      transicionarPosicionNodos: true,\n\n      callingPosiciones: false,\n\n      redibujarEnlacesNodos: 0,\n\n      enviandoCoordsVistaUsuario: false,\n      esquinaVistaCalculada: false,\n\n      mostrandoPersonas: false,\n\n      showingNombreNodoEmergente: false,\n      vista: \"atlas\",\n    };\n  },\n  methods: {    \n    setNodosRender() {\n      if (!this.indiceNodosUnder || this.indiceNodosUnder.length < 1) return [];\n      console.log(`Setting nodos render`);      \n      var currentTodosNodos = {\n        nodosSolidaridad: this.nodosSolidaridadRoot,\n        personas: this.personasRoot,\n      };\n      var nodosSolidaridadRender=this.nodosSolidaridadRoot;\n      var personasRender=this.personasRoot;\n\n      var idsnodosSolidaridadRenderParcial = nodosSolidaridadRender.map((nr) => nr.id);\n      var idsPersonasRenderParcial = personasRender.map((p) => p.id);\n      var cuenta = 0;\n      do {\n        cuenta++;\n        if (cuenta > 1000) {\n          console.log(`OVERFLOW`);\n          break;\n        }\n        //nodosUnder\n        let nodosUnder = currentTodosNodos.nodosSolidaridad\n          .concat(currentTodosNodos.personas)\n          .filter((cr) => this.idsNodosDesplegados.includes(cr.id))\n          .reduce((acc, cn) => {\n            const requeridos = this.indiceNodosUnder[cn.id].nodosRequeridos;\n            return acc.concat(requeridos.filter(r=>!acc.map(v=>v.id).includes(r.id)));\n          }, []);\n        let nodosUnderNuevos = nodosUnder.filter(\n          (nu) => !idsnodosSolidaridadRenderParcial.includes(nu.id)\n        );\n\n        //PersonasUnder\n        let personasUnder = [];\n        let personasUnderNuevos = [];\n        if (this.mostrandoPersonas) {\n          personasUnder = currentTodosNodos.nodosSolidaridad\n            .filter((n) => this.idsNodosDesplegados.includes(n.id))\n            .reduce((acc, cn) => {\n              const responsables=this.indiceNodosUnder[cn.id].responsables;\n              return acc.concat(responsables.filter(r=>!acc.map(v=>v.id).includes(r.id)));\n            }, []);\n          personasUnderNuevos = personasUnder.filter(\n            (p) => !idsPersonasRenderParcial.includes(p.id)\n          );\n        }\n\n        nodosSolidaridadRender = nodosSolidaridadRender.concat(nodosUnderNuevos);\n        personasRender = personasRender.concat(personasUnderNuevos);\n\n        currentTodosNodos.nodosSolidaridad = nodosUnderNuevos;\n        currentTodosNodos.personas = personasUnderNuevos;\n\n        idsnodosSolidaridadRenderParcial = nodosSolidaridadRender.map((nr) => nr.id);\n        idsPersonasRenderParcial = personasRender.map((p) => p.id);\n      } while (\n        currentTodosNodos.nodosSolidaridad.length + currentTodosNodos.personas.length >\n        0\n      );\n\n      this.nodosSolidaridadRender = nodosSolidaridadRender;\n      this.personasRender = personasRender;\n    },\n    setNodoEnVentanita(idNodo) {\n      console.log(`Setting path to ${idNodo}`);\n      // var currentPath = this.$route.currentRoute.path;\n      // console.log(`Era: ${currentPath}`);\n      this.$router.push({ name: \"nodoEnVentanita\", params: { idNv: idNodo } });\n    },\n    cerrarNodoEnVentanita() {\n      console.log(`Cerrando nodo en ventanita`);\n      this.$router.push({ name: \"atlasSolidaridad\" });\n    },\n    iniciarCallingPosiciones() {\n      var ciclos = prompt(\"¿Cuantos ciclos?\");\n      if (isNaN(ciclos)) {\n        return;\n      }\n\n      ciclos = Math.round(ciclos);\n      if (ciclos < 1) {\n        return;\n      }\n      console.log(`Enviando reposicionamiento de ${ciclos} ciclos`);\n      this.callingPosiciones = true;\n\n      this.$apollo\n        .query({\n          query: gql`\n            query ($ciclos: Int!) {\n              posicionarNodosSolidaridadByFuerzas(ciclos: $ciclos)\n            }\n          `,\n          variables: {\n            ciclos,\n          },\n        })\n        .then(() => {\n          this.callingPosiciones = false;\n        })\n        .catch((error) => {\n          this.callingPosiciones = false;\n          console.log(`Error: ${error}`);\n        });\n    },\n    calcularEsquinaVista(centro) {\n      console.log(`Centrando en usuario`);\n      if (this.esquinaVistaCalculada) return;\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"x\",\n        Math.round(centro.x - this.sizeAtlas.x / (2 * this.factorZoom))\n      );\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"y\",\n        Math.round(centro.y - this.sizeAtlas.y / (2 * this.factorZoom))\n      );\n      this.esquinaVistaCalculada = true;\n    },\n    abrirMenuContextual(e) {\n      let posAtlas = this.$el.getBoundingClientRect();\n\n      let topClick = Math.round(e.pageY - posAtlas.top);\n      let leftClick = Math.round(e.pageX - posAtlas.left);\n\n      this.$set(this.posMenuContextual, \"y\", topClick);\n      this.$set(this.posMenuContextual, \"x\", leftClick);\n      this.mostrandoMenuContextual = true;\n    },\n    uploadVistaActual: debounce(function () {\n      this.enviandoCoordsVistaUsuario = true;\n      console.log(`Uploading vista de usuario`);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($coords: CoordsInput!) {\n              setCoordsVistaAtlasSolidaridadUsuario(coords: $coords)\n            }\n          `,\n          variables: {\n            coords: {\n              x: Math.round(\n                this.esquinaVistaDecimal.x +\n                  this.sizeAtlas.x / (2 * this.factorZoom)\n              ),\n              y: Math.round(\n                this.esquinaVistaDecimal.y +\n                  this.sizeAtlas.y / (2 * this.factorZoom)\n              ),\n            },\n          },\n        })\n        .then(() => {\n          this.enviandoCoordsVistaUsuario = false;\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.enviandoCoordsVistaUsuario = false;\n        });\n    }, 3000),\n    desplazarVista(deltaX, deltaY) {\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"x\",\n        this.esquinaVistaDecimal.x - deltaX\n      );\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"y\",\n        this.esquinaVistaDecimal.y - deltaY\n      );\n      this.uploadVistaActual();\n    },\n    panVista(e) {\n      if (!this.panningVista) {\n        return;\n      }\n      this.desplazarVista(\n        e.movementX / this.factorZoom,\n        e.movementY / this.factorZoom\n      );\n      e.preventDefault();\n      this.vistaPanned = true;\n    },\n    clickFondoAtlas() {\n      if (!this.vistaPanned) {\n        if (!this.idNodoPaVentanita) {\n          this.idNodoSeleccionado = null;\n        }\n        if (this.$route.name === \"nodoEnVentanita\") {\n          this.cerrarNodoEnVentanita();\n        }\n        this.idNodoMenuCx = null;\n\n        if (this.$route.name === \"atlasConLista\") {\n          this.$router.push({ name: \"atlasSolidaridad\" });\n        }\n      }\n      this.mostrandoMenuContextual = false;\n\n      this.panningVista = false;\n      this.vistaPanned = false;\n    },\n    movimientoMobile(e) {\n      if (this.pinching) {\n        var contenedor = this.$el;\n        let posContenedor = contenedor.getBoundingClientRect();\n\n        const posPinch = {\n          x:\n            (e.touches[0].pageX -\n              posContenedor.left +\n              (e.touches[1].pageX - posContenedor.left)) /\n            2,\n          y:\n            (e.touches[0].pageY -\n              posContenedor.top +\n              (e.touches[1].pageY - posContenedor.top)) /\n            2,\n        }; //Posición en pixeles.\n\n        const coordsPinch = {\n          x: Math.round(\n            posPinch.x / this.factorZoom + this.esquinaVistaDecimal.x\n          ),\n          y: Math.round(\n            posPinch.y / this.factorZoom + this.esquinaVistaDecimal.y\n          ),\n        }; //Posicion en unidades absolutas (Las que usa el atlas)\n\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        var pinch = dist - this.lastPinchDistance;\n        pinch = pinch * 0.3;\n        this.zoomVista(pinch, coordsPinch);\n        this.lastPinchDistance = dist;\n\n        return;\n      }\n\n      const deltaX = Math.round(\n        (e.changedTouches[0].clientX - this.ultimoTouchX) / this.factorZoom\n      );\n      const deltaY = Math.round(\n        (e.changedTouches[0].clientY - this.ultimoTouchY) / this.factorZoom\n      );\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n\n      this.desplazarVista(deltaX, deltaY);\n    },\n    iniciaMovimientoTouch(e) {\n      if (e.touches.length === 2) {\n        var dist = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        );\n        this.lastPinchDistance = dist;\n        this.pinching = true;\n        return;\n      }\n\n      this.ultimoTouchX = e.changedTouches[0].clientX;\n      this.ultimoTouchY = e.changedTouches[0].clientY;\n    },\n    finTouch() {\n      this.pinching = false;\n    },\n    zoomVista(deltaZoom, posZoom) {\n      const viejoZoom = this.zoom;\n      var nuevoZoom = Math.round(this.zoom + deltaZoom);\n      if (nuevoZoom < this.minZoom) {\n        this.zoom = this.minZoom;\n      } else if (nuevoZoom > this.maxZoom) {\n        this.zoom = this.maxZoom;\n      } else {\n        this.zoom = nuevoZoom;\n      }\n\n      //Pan vista de acuerdo con la posición del mouse respecto del atlas\n      const distanciaEsquina = {\n        x: posZoom.x - this.esquinaVistaDecimal.x,\n        y: posZoom.y - this.esquinaVistaDecimal.y,\n      };\n      const proporcionZoom = viejoZoom / this.zoom;\n\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"x\",\n        posZoom.x - proporcionZoom * distanciaEsquina.x\n      );\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"y\",\n        posZoom.y - proporcionZoom * distanciaEsquina.y\n      );\n    },\n    zoomWheel(e) {\n      if (!this.hovered || !e.ctrlKey) {\n        return;\n      }\n      e.preventDefault();\n      var contenedor = document.getElementById(\"contenedorNodos\");\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const posZoom = {\n        x: Math.round((e.clientX - posContenedor.left) / this.factorZoom),\n        y: Math.round((e.clientY - posContenedor.top) / this.factorZoom),\n      };\n\n      const factorZoom = 0.2;\n      this.zoomVista(-Math.round(e.deltaY * factorZoom), posZoom);\n\n      // const posZoom={\n      //   x: Math.round((e.clientX-posContenedor.left)/this.factorZoom)+this.esquinaVista.x,\n      //   y: Math.round((e.clientY-posContenedor.top)/this.factorZoom)+this.esquinaVista.y\n      // }\n\n      // const proporciones={\n      //   x: (posZoom.x-this.esquinaVistaDecimal.x)/(posContenedor.width/this.factorZoom),\n      //   y: (posZoom.y-this.esquinaVistaDecimal.y)/(posContenedor.height/this.factorZoom),\n      // }\n\n      // const factorZoom=0.2;\n      // this.zoomVista(-Math.round(e.deltaY*factorZoom), {x:posZoom.x, y: posZoom.y});\n\n      // this.$set(this.esquinaVistaDecimal, \"x\", posZoom.x-((posContenedor.width/this.factorZoom)*proporciones.x) );\n      // this.$set(this.esquinaVistaDecimal, \"y\", posZoom.y-((posContenedor.height/this.factorZoom)*proporciones.y) );\n    },\n    eliminarNodoCache(idNodo) {\n      console.log(`Eliminando nodo de caché`);\n      const indexN=this.nodosSolidaridad.find(n=>n.id===idNodo);\n      if(indexN>-1){\n        this.nodosSolidaridad.splice(indexN, 1);\n      }\n      else{\n        console.log(`Nodo no estaba en lista`);\n      }\n    },\n    crearNodoEnMenuContextual(tipo) {\n      let posContenedor = document\n        .getElementById(\"contenedorNodos\")\n        .getBoundingClientRect();\n\n      var posicionNuevoNodo = {\n        x: parseInt(\n          (parseInt(this.posMenuContextual.x) - posContenedor.left) /\n            this.factorZoom\n        ),\n        y: parseInt(\n          (parseInt(this.posMenuContextual.y) - posContenedor.top) /\n            this.factorZoom\n        ),\n      };\n\n      console.log(`Creando nuevo nodo en ${JSON.stringify(posicionNuevoNodo)}`);\n      this.crearNodo(posicionNuevoNodo, tipo);\n    },\n    crearNodo(posicion, tipoNodo) {\n      if (!this.usuario || !this.usuario.id) {\n        console.log(`Error usuario no logeado`);\n        return;\n      }\n      console.log(`enviando una mutación de crear nodo`);\n      this.enviandoQueryNodos = true;\n\n      let infoNodo = {\n        coords: {\n          x: posicion.x,\n          y: posicion.y,\n        },\n        tipoNodo,\n      };\n      console.log(`en las coordenadas: ${posicion.x}, ${posicion.y}`);\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($infoNodo: NodoSolidaridadInput!) {\n              crearNodoSolidaridad(infoNodo: $infoNodo) {\n                ...fragNodoSolidaridad\n              }\n            }\n            ${fragmentoNodoSolidaridad}\n          `,\n          variables: {\n            infoNodo,\n          },\n        })\n        .then(({ data: { crearNodoSolidaridad } }) => {\n          console.log(`Creado ${crearNodoSolidaridad.id}`);\n          const store = this.$apollo.provider.defaultClient;\n          const cache = store.readQuery({\n            query: QUERY_NODOS_ATLAS,\n            variables: {\n              centro: {\n                x: this.centroDescarga.x,\n                y: this.centroDescarga.y,\n              },\n              radio: this.radioDescarga,\n            },\n          });\n          var nuevoCache = JSON.parse(JSON.stringify(cache));\n          var losNodos = nuevoCache.nodosSolidaridadById;\n          const indexN = losNodos.findIndex(\n            (n) => n.id === crearNodoSolidaridad.id\n          );\n          if (indexN > -1) {\n            console.log(`El nodo ya estaba en caché`);\n          } else {\n            losNodos.push(crearNodoSolidaridad);\n            store.writeQuery({\n              query: QUERY_NODOS_ATLAS,\n              variables: {\n                centro: {\n                  x: this.centroDescarga.x,\n                  y: this.centroDescarga.y,\n                },\n                radio: this.radioDescarga,\n              },\n              data: nuevoCache,\n            });\n          }\n          this.setNodoEnVentanita(crearNodoSolidaridad.id);\n          this.enviandoQueryNodos = false;\n          this.mostrandoMenuContextual = false;\n\n          //this.$router.push(\"/nodoConocimiento/\"+crearNodoSolidaridad.id);\n        })\n        .catch((error) => {\n          this.enviandoQueryNodos = false;\n          console.log(`Error. E: ${error}`);\n        });\n    },\n    centrarEnNodo(n) {\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"x\",\n        n.coords.x - posContenedor.width / (2 * this.factorZoom)\n      );\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"y\",\n        n.coords.y - posContenedor.height / (2 * this.factorZoom)\n      );\n      this.idNodoSeleccionado = n.id;\n      //this.centroVista=e;\n    },\n    centrarEnNodoById(idNodo) {\n      var contenedor = this.$el;\n      let posContenedor = contenedor.getBoundingClientRect();\n\n      const elNodo = this.todosNodos.find((n) => n.id === idNodo);\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"x\",\n        elNodo.coords.x - posContenedor.width / (2 * this.factorZoom)\n      );\n      this.$set(\n        this.esquinaVistaDecimal,\n        \"y\",\n        elNodo.coords.y - posContenedor.height / (2 * this.factorZoom)\n      );\n      this.idNodoSeleccionado = idNodo;\n\n      //this.centroVista=e;\n    },\n\n    uploadNodosDesplegados: debounce(function () {\n      this.$apollo\n        .mutate({\n          mutation: gql`\n            mutation ($idsNodos: [ID!]) {\n              setNodosSolidaridadDesplegadosUsuario(idsNodos: $idsNodos)\n            }\n          `,\n          variables: {\n            idsNodos: this.idsNodosDesplegados,\n          },\n        })\n        .then(() => {})\n        .catch((error) => {\n          console.log(`Error: E:${error}`);\n        });\n    }, 5000),\n    refetchCoordsNodos: debounce(function () {\n      console.log(`Iniciando refetch de coords`);\n      this.refetchingCoords = true;\n      this.$apollo\n        .query({\n          query: gql`\n            query ($idsNodos: [ID!]) {\n              nodosSolidaridadByIds(idsNodos: $idsNodos) {\n                id\n                coords {\n                  x\n                  y\n                }\n              }\n            }\n          `,\n          variables: {\n            idsNodos: this.todosNodos.map((n) => n.id),\n          },\n        })\n        .then(() => {\n          console.log(`Coords refetched`);\n          this.refetchingCoords = false;\n        })\n        .catch((error) => {\n          console.log(`Error: ${error}`);\n          this.refetchingCoords = false;\n        });\n    }, 2000),\n    hideNombreNodoEmergente: debounce(function () {\n      this.showingNombreNodoEmergente = false;\n    }, 4000),\n    hideZoomInfo: debounce(function () {\n      this.showingZoomInfo = false;\n    }, 1000),\n  },\n  computed: {\n    personasRoot(){\n      if(this.nodoRoot.__typename==='Usuario'){\n        return [this.nodoRoot]\n      }\n      else{\n        return []\n      }\n    },\n    nodosSolidaridadRoot(){\n      if(this.nodoRoot.__typename==='NodoSolidaridad'){\n        return [this.nodoRoot]\n      }\n      else{\n        return []\n      }\n    },\n    nodoYo() {\n      if (!this.usuarioLogeado) return null;\n      return this.personas.find((p) => p.id === this.usuario.id);\n    },\n    idNodoRoot() {\n      return this.usuario ? this.usuario.id : null;\n    },    \n    idNodoPaVentanita() {\n      return this.$route.params.idNv;\n    },\n    refreshNodoVentanita() {\n      return this.$store.state.refreshNodoVentanitaAtlasSolidaridad;\n    },\n    offsetMenuContextual() {\n      return {\n        top: this.posMenuContextual.y + \"px\",\n        left: this.posMenuContextual.x + \"px\",\n      };\n    },\n    factorZoom() {\n      return Number((this.zoom / 100).toFixed(2));\n    },\n    esquinaVista() {\n      return {\n        x: Math.round(this.esquinaVistaDecimal.x),\n        y: Math.round(this.esquinaVistaDecimal.y),\n      };\n    },\n    centroVista() {\n      return {\n        x: this.esquinaVista.x + this.sizeAtlas.x / this.factorZoom / 2,\n        y: this.esquinaVista.y + this.sizeAtlas.y / this.factorZoom / 2,\n      };\n    },\n    posContenedores() {\n      return {\n        left: -(this.esquinaVista.x * this.factorZoom) + \"px\",\n        top: -(this.esquinaVista.y * this.factorZoom) + \"px\",\n      };\n    },\n    posCuadroDescarga() {\n      const posx =\n        this.centroDescarga.x - this.radioDescarga - this.esquinaVista.x;\n      const posy =\n        this.centroDescarga.y - this.radioDescarga - this.esquinaVista.y;\n      return {\n        left: posx * this.factorZoom + \"px\",\n        top: posy * this.factorZoom + \"px\",\n      };\n    },\n    nodoEnVentanita() {\n      if (!this.idNodoPaVentanita) return null;\n      return this.nodosSolidaridad.find((n) => n.id == this.idNodoPaVentanita);\n    },\n    nodoSeleccionado() {\n      return this.todosNodos.find((n) => n.id === this.idNodoSeleccionado);\n    },\n    // nodoCentradoArbol() {\n    //   return this.nodosTodos.find((n) => n.id === this.idNodoCentradoArbol);\n    // },\n    usuarioAdministradorNodoSeleccionado() {\n      if (!this.usuario || !this.usuario.id) return false;\n      if (!this.nodoSeleccionado) return false;\n      return this.nodoSeleccionado.administradores.includes(this.usuario.id);\n    },\n    usuarioResponsableNodoSeleccionado() {\n      if (!this.usuario || !this.usuario.id) return false;\n      if (!this.nodoSeleccionado) return false;\n\n      return this.nodoSeleccionado.responsables.includes(this.usuario.id);\n    },\n    usuarioResponsableAmplioNodoSeleccionado() {\n      if (!this.usuarioLogeado || !this.usuario || !this.usuario.id)\n        return false;\n\n      if (!this.nodoSeleccionado) return false;\n      return (\n        this.nodoSeleccionado.responsablesAmplio &&\n        this.nodoSeleccionado.responsablesAmplio.includes(this.usuario.id)\n      );\n    },\n    nodosRequierenSeleccionado() {\n      if (!this.idNodoSeleccionado) return [];\n      return this.todosNodos.filter((n) =>\n        n.vinculos\n          .filter((v) => v.tipo == \"requiere\")\n          .map((v) => v.idRef)\n          .includes(this.idNodoSeleccionado)\n      );\n    },\n    nodosRequeridosSeleccionado() {\n      return this.todosNodos.filter((n) =>\n        this.idsNodosRequeridosSeleccionado.includes(n.id)\n      );\n    },\n    idsNodosChildrenSeleccionado() {\n      if (!this.nodoSeleccionado || !this.indiceNodosUnder) return [];\n      return this.indiceNodosUnder[this.idNodoSeleccionado].nodosChildren.map(\n        (n) => n.id\n      );\n    },\n    idsNodosRequierenSeleccionado() {\n      return this.nodosRequierenSeleccionado.map((n) => n.id);\n    },\n    idsNodosRequeridosSeleccionado() {\n      if (!this.nodoSeleccionado) {\n        return [];\n      }\n      return this.nodoSeleccionado.vinculos\n        .filter((v) => v.tipo == \"requiere\")\n        .map((v) => v.idRef);\n    },\n    idsNodosDesplegados() {\n      if (\n        !this.yo ||\n        !this.yo.atlasSolidaridad ||\n        !this.yo.atlasSolidaridad.idsNodosDesplegados\n      )\n        return [];\n      return this.yo.atlasSolidaridad.idsNodosDesplegados;\n    },   \n    trabajos() {\n      return this.nodosSolidaridad.filter((n) => n.tipoNodo === \"trabajo\");\n    },\n    objetivos() {\n      return this.nodosSolidaridad.filter((n) => n.tipoNodo === \"objetivo\");\n    },\n    nodosConRequerimentos() {\n      var nr = this.todosNodos.filter(\n          (n) =>\n            n.vinculos.filter((v) => v.tipo === \"requiere\").length > 0 ||\n            (n.__typename==='NodoSolidaridad' && n.responsables.length > 0)\n        );\n\n      return nr;\n    },        \n    idsNodosSolidaridadRender() {\n      return this.nodosSolidaridadRender.map((n) => n.id);\n    },\n    idsPersonasRender() {\n      return this.personasRender.map((n) => n.id);\n    },\n    idsTodosNodosRender() {\n      return this.idsNodosSolidaridadRender.concat(this.idsPersonasRender);\n    },\n    \n  },\n  watch: {\n    centroVista(actual) {\n      const distanciaCentroDescarga = Math.hypot(\n        this.centroDescarga.x - actual.x,\n        this.centroDescarga.y - actual.y\n      );\n      // console.log(`Distancia centro descarga: ${distanciaCentroDescarga}`);\n      if (\n        this.radioDescarga - distanciaCentroDescarga <\n        this.sizeAtlas.diagonal / this.factorZoom / 2\n      ) {\n        //Hora de actualizar nodos\n        this.radioDescarga = Math.ceil(\n          (Math.max(this.sizeAtlas.x, this.sizeAtlas.y) * 2) / this.factorZoom\n        );\n        this.$set(this.centroDescarga, \"x\", Math.round(this.centroVista.x));\n        this.$set(this.centroDescarga, \"y\", Math.round(this.centroVista.y));\n      }\n    },\n    idNodoSeleccionado(nuevo) {\n      if (!nuevo) {\n        // this.cerrarNodoEnVentanita();\n        this.showingNombreNodoEmergente = false;\n      } else {\n        // this.$refs.listas.desplegarCascadaHaciaNodo(nuevo);\n        if (this.zoom < 65) {\n          this.showingNombreNodoEmergente = true;\n          this.hideNombreNodoEmergente();\n        }\n      }\n    },\n    zoom() {\n      this.transicionarPosicionNodos = false;\n      this.showingZoomInfo = true;\n      this.hideZoomInfo();\n    },\n    idsNodosDesplegados() {\n      if (this.usuarioLogeado) {\n        this.setNodosRender();\n        this.uploadNodosDesplegados();\n      }\n    },\n    personas() {\n      this.setNodosRender();\n    },\n    todosNodos() {\n      this.setNodosRender();\n    },\n    mostrandoPersonas() {\n      this.setNodosRender();\n    },\n    idsTodosNodosRender() {\n      const idsNuevosPersonas = this.idsPersonasRender.filter(\n        (id) => !this.infoNodosEverRendered.map((ner) => ner.id).includes(id)\n      );\n      const idsNuevosNodosSolidaridad = this.idsNodosSolidaridadRender.filter(\n        (id) => !this.infoNodosEverRendered.map((ner) => ner.id).includes(id)\n      );\n\n      const infoPersonasNuevosRender = idsNuevosPersonas.map((idp) => {\n        return { id: idp, tipo: \"usuario\" };\n      });\n      const infoNodosSolidaridadNuevosRender = idsNuevosNodosSolidaridad.map(\n        (idn) => {\n          return { id: idn, tipo: \"nodoSolidaridad\" };\n        }\n      );\n\n      this.infoNodosEverRendered = this.infoNodosEverRendered\n        .concat(infoPersonasNuevosRender)\n        .concat(infoNodosSolidaridadNuevosRender);\n    },\n    \n  },\n  mounted() {\n    var posAtlas = this.$el.getBoundingClientRect();\n    this.$set(this.sizeAtlas, \"x\", posAtlas.width);\n    this.$set(this.sizeAtlas, \"y\", posAtlas.height);\n    this.$set(\n      this.sizeAtlas,\n      \"diagonal\",\n      Math.hypot(this.sizeAtlas.x, this.sizeAtlas.y)\n    );\n\n    this.radioDescarga = Math.ceil(\n      (Math.max(this.sizeAtlas.x, this.sizeAtlas.y) * 2) / this.factorZoom\n    );\n    this.montado = true;\n    this.$el.scrollIntoView({ behavior: \"smooth\" });\n  },\n  created() {\n    window.addEventListener(\"wheel\", this.zoomWheel, { passive: false });\n  },\n  removed() {\n    window.removeEventListener(\"wheel\", this.zoomWheel);\n  },\n  // beforeRouteLeave(to, from, next) {\n  //   console.log(`Hacia: ${to}`);\n  //   if (this.$refs.listas.abierta) {\n  //     this.$refs.listas.abierta = false;\n  //     return next(false);\n  //   }\n  //   if (this.idNodoPaVentanita) {\n  //     this.idNodoPaVentanita = null;\n  //     return next(false);\n  //   }\n  //   next();\n  // },\n};\n</script>\n<style>\n:root {\n  --atlasFondo: #12263a;\n  --atlasVerde: #4d8b31;\n  --atlasAmarillo: #ffc800;\n  --atlasAzul: #69c7c7;\n  --atlasFondoNodo: #a9d1d1;\n  --atlasNaranja: #ef7229;\n  --atlasMorado: #ba2c73;\n  --atlasGris: #929292;\n  --atlasParent: #3066be;\n\n  --atlasFilterFondo: invert(10%) sepia(55%) saturate(1034%) hue-rotate(174deg)\n    brightness(91%) contrast(91%);\n  --atlasFilterVerde: invert(41%) sepia(84%) saturate(349%) hue-rotate(57deg)\n    brightness(95%) contrast(89%);\n  --atlasFilterAmarillo: invert(79%) sepia(32%) saturate(4772%) hue-rotate(3deg)\n    brightness(108%) contrast(105%);\n  --atlasFilterAzul: invert(73%) sepia(20%) saturate(732%) hue-rotate(131deg)\n    brightness(92%) contrast(98%);\n  --atlasFilterNaranja: invert(53%) sepia(29%) saturate(1745%)\n    hue-rotate(340deg) brightness(96%) contrast(95%);\n  --atlasFilterMorado: invert(27%) sepia(24%) saturate(4772%) hue-rotate(301deg)\n    brightness(92%) contrast(95%);\n  --atlasFilterGris: invert(61%) sepia(0%) saturate(1316%) hue-rotate(210deg)\n    brightness(97%) contrast(81%);\n  --filterBlanco: invert(100%) sepia(100%) saturate(0%) hue-rotate(130deg)\n    brightness(106%) contrast(102%);\n}\n</style>\n<style scoped>\n.atlasSolidaridad {\n  overflow: hidden;\n  position: relative;\n  background-color: #12263a;\n  height: 100vh;\n}\n#botonVistaLista {\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  top: 22px;\n  left: 22px;\n  filter: var(--atlasFilterGris);\n  cursor: pointer;\n  z-index: 2;\n}\n#botonVistaLista:hover {\n  filter: var(--filterBlanco);\n}\n.ventanaLista {\n  position: absolute;\n  top: 0;\n  left: 0%;\n  transition: transform 0.6s;\n  box-shadow: 4px 4px 6px rgba(152, 143, 253, 0.25);\n  background-color: #a9d1d1;\n  width: min(1000px, 100%);\n}\n\n.nodoVistaLista #barraSuperior {\n  background-color: red;\n}\n#menuContextual {\n  position: absolute;\n  background-color: rgb(173, 173, 173);\n  z-index: 2;\n}\n.botonMenuContextual {\n  padding: 5px 10px;\n  cursor: pointer;\n}\n.botonMenuContextual:hover {\n  background-color: gray;\n}\n#contenedorNodos {\n  position: relative;\n  z-index: 1;\n}\n#contenedorVinculosNodos {\n  position: relative;\n}\n\n#canvasesatlasSolidaridad {\n  position: relative;\n}\n#centroVista {\n  width: 3px;\n  height: 3px;\n  border-radius: 50%;\n  background-color: orange;\n  transform: translate(-50%, -50%);\n  position: absolute;\n}\n\n#botonCallingPosiciones {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n  position: absolute;\n  top: 1%;\n  right: 1%;\n  cursor: pointer;\n  z-index: 100;\n}\n.ventanitaNodo {\n  width: min(400px, 90%);\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  z-index: 60;\n}\n#loadingNodos {\n  position: absolute;\n  bottom: 50%;\n  left: 50%;\n  transform: translateX(-50%);\n}\n#indicadorCentroDescarga {\n  width: 50px;\n  height: 50px;\n  position: absolute;\n  background-color: red;\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n}\n#indicadorCentroVista {\n  width: 50px;\n  height: 50px;\n  position: absolute;\n  background-color: rgb(0, 60, 255);\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n}\n\n#infoZoom {\n  position: absolute;\n  top: 2%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 10px;\n  display: inline-block;\n  font-weight: bold;\n  color: rgb(102, 102, 102);\n  z-index: 3;\n}\n\n#nombreNodoEmergente {\n  position: fixed;\n  bottom: 5px;\n  left: 50%;\n  transform: translateX(-50%);\n  border-radius: 10px;\n  border: 2px solid rgb(56, 128, 131);\n  background-color: rgb(185, 215, 216);\n  padding: 10px;\n  font-size: 20px;\n  z-index: 10;\n}\n#panelConfiguracion {\n  position: fixed;\n  bottom: 1vh;\n  right: 3vw;\n}\n\n.botonPanelConfiguracion {\n  height: 25px;\n  padding: 5px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid transparent;\n}\n.botonPanelConfiguracion.activo {\n  border-color: white;\n}\n.botonPanelConfiguracion img {\n  height: 100%;\n}\n.fadeOut-leave-to {\n  opacity: 0;\n}\n.fadeOut-leave-active {\n  transition: opacity 1s;\n}\n.fadeOut-leave {\n  opacity: 1;\n}\n\n.fadeOutLento-leave-to {\n  opacity: 0;\n}\n.fadeOutLento-leave-active {\n  transition: opacity 2s;\n}\n.fadeOutLento-leave {\n  opacity: 1;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>"]}]}