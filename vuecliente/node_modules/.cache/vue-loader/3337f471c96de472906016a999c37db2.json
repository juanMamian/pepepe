{"remainingRequest":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/EnlacesNodoConocimiento.vue?vue&type=style&index=0&id=1333e728&scoped=true&lang=css&","dependencies":[{"path":"/home/vida1/webpj/pepepe/vuecliente/src/components/atlasConocimiento/EnlacesNodoConocimiento.vue","mtime":1674484905022},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vida1/webpj/pepepe/vuecliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVubGFjZXNOb2RvQ29ub2NpbWllbnRvIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgd2lkdGg6IDFweDsKICBvdmVyZmxvdzogdmlzaWJsZTsKfQoKLmVubGFjZXMgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQoudmluY3VsbyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRyYW5zZm9ybS1vcmlnaW46IDAlIDAlOwogIC8qIHRyYW5zaXRpb246IGxlZnQgM3MsIHRvcCAzczsgKi8KfQouZnVlcnphIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdHJhbnNmb3JtLW9yaWdpbjogMCUgMCU7CiAgaGVpZ2h0OiAzcHg7Cn0KI2Z1ZXJ6YUNvbGlzaW9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7Cn0KI2Z1ZXJ6YUNlbnRyb01hc2EgewogIGJhY2tncm91bmQtY29sb3I6IHllbGxvdzsKfQouZmxlY2hhVmluY3VsbyB7CiAgd2lkdGg6IDFweDsKICBoZWlnaHQ6IDFweDsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyLWxlZnQtY29sb3I6IGluaGVyaXQ7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogNTAlOwogIGxlZnQ6IDUwJTsKICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsKfQoKLnZpbmN1bG9HcmlzIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKfQouZmFkZS1lbnRlci1hY3RpdmUgewogIGFuaW1hdGlvbjogZmFkZSAwLjVzOwp9Ci5mYWRlLWxlYXZlLWFjdGl2ZSB7CiAgYW5pbWF0aW9uOiBmYWRlIDAuNXMgcmV2ZXJzZTsKfQoKQGtleWZyYW1lcyBmYWRlIHsKICAwJSB7CiAgICBvcGFjaXR5OiAwOwogIH0KICAxMDAlIHsKICAgIG9wYWNpdHk6IDE7CiAgfQp9Cg=="},{"version":3,"sources":["EnlacesNodoConocimiento.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+PA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EnlacesNodoConocimiento.vue","sourceRoot":"src/components/atlasConocimiento","sourcesContent":["<template>\n  <div\n    class=\"enlacesNodoConocimiento\"\n    v-show=\"nodoRender\"\n    :style=\"[estiloPosicion]\"\n  >\n    <transition-group tag=\"div\">\n      <div\n        class=\"vinculo vinculoGris\"\n        v-for=\"vinculo of vinculosGrises\"\n        :key=\"vinculo.id\"\n        :style=\"[vinculo.estilo, altoVinculos]\"\n      >\n        <div class=\"flechaVinculo\" :style=\"[sizeFlecha]\"></div>\n      </div>\n    </transition-group>\n    <div\n      class=\"fuerza\"\n      v-show=\"callingPosiciones\"\n      :style=\"[estiloFuerzaColision, { opacity: nodoSeleccionado ? 1 : 0.3 }]\"\n      id=\"fuerzaColision\"\n    ></div>\n    <div\n      class=\"fuerza\"\n      v-show=\"callingPosiciones\"\n      :style=\"[estiloFuerzaCentroMasa, { opacity: nodoSeleccionado ? 1 : 0.3 }]\"\n      id=\"fuerzaCentroMasa\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"EnlacesNodoConocimiento\",\n  props: {\n    yo: Object,\n    idNodoSeleccionado: String,\n    idsNodosPreviosSeleccionado: Array,\n    esteNodo: Object,\n    todosNodos: Array,\n    factorZoom: Number,\n    callingPosiciones: Boolean,\n    nodoSeleccionado: Object,\n    childSeleccionado: Boolean,\n    idsTodosNodosRender: Array,\n    esquinasDiagrama: Object,\n    transicionarPosicionNodos: Boolean,\n    idsNodosPresentesCabeza: Array,\n    redibujarEnlaces: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      esquinasSeleccionado: {\n        x1: 0,\n        x2: 0,\n        y1: 0,\n        y2: 0,\n      },\n      posicionSeleccionado: {\n        x: 0,\n        y: 0,\n      },\n      factorFuerza: 15,\n    };\n  },\n\n  computed: {\n    continuacionDeSeleccionado() {\n      if (!this.nodoSeleccionado) return false;\n      if (\n        this.nodoSeleccionado.vinculos.some((v) => v.idRef === this.esteNodo.id)\n      )\n        return true;\n      return false;\n    },\n    estiloPosicion() {\n      const posXAjustada =\n        this.esteNodo.autoCoords.x - this.esquinasDiagrama.x1;\n      const posYAjustada =\n        this.esteNodo.autoCoords.y - this.esquinasDiagrama.y1;\n      return {\n        left: posXAjustada * this.factorZoom + \"px\",\n        top: posYAjustada * this.factorZoom + \"px\",\n      };\n    },\n    vinculosGrises() {\n      var vGrises = JSON.parse(\n        JSON.stringify(\n          this.esteNodo.vinculos.filter(\n            (v) =>\n              v.rol === \"target\" && this.idsTodosNodosRender.includes(v.idRef)\n          )\n        )\n      );\n\n      var idsRelevantesSeleccionado = [];\n\n      if (this.idNodoSeleccionado) {\n        idsRelevantesSeleccionado = this.idsNodosPreviosSeleccionado;\n        idsRelevantesSeleccionado = idsRelevantesSeleccionado.concat([\n          this.idNodoSeleccionado,\n        ]);\n      }\n\n      vGrises.forEach((v) => {\n        const coordsFrom = this.todosNodos.find((n) => n.id === v.idRef).coords;\n        const paralelas = {\n          x: coordsFrom.x - this.posNodo.x,\n          y: coordsFrom.y - this.posNodo.y,\n        };\n        const angulo = Math.PI + Math.atan2(paralelas.y, paralelas.x);\n        const modulo = Math.hypot(paralelas.x, paralelas.y);\n        const entreNodosPreviosSeleccionado =\n          this.idNodoSeleccionado &&\n          idsRelevantesSeleccionado.includes(this.esteNodo.id) &&\n          idsRelevantesSeleccionado.includes(v.idRef);\n\n        const esEnlaceSuperado =\n          (v.rol === \"target\" &&\n            this.idsNodosPresentesCabeza.includes(this.esteNodo.id)) ||\n          (v.rol === \"source\" &&\n            this.idsNodosPresentesCabeza.includes(v.idRef));\n\n        const esEnlacePorSuperar =\n          (v.rol === \"source\" &&\n            !this.idsNodosPresentesCabeza.includes(this.esteNodo.id)) ||\n          (v.rol === \"target\" &&\n            this.idsNodosPresentesCabeza.includes(v.idRef));\n\n        const esEnlaceInaccesible = !esEnlaceSuperado && !esEnlacePorSuperar;\n\n        let opacity = 0.3;\n        let backgroundColor = \"black\";\n\n        if (esEnlacePorSuperar) {\n          backgroundColor = \"var(--atlasConocimientoAvailable)\";\n        }\n        if (esEnlaceInaccesible) {\n          backgroundColor = \"black\";\n        }\n        if (esEnlaceSuperado) {\n          backgroundColor = \"var(--atlasConocimientoCheck)\";\n        }\n\n        if (this.idNodoSeleccionado) {\n          opacity=0.05;\n          if (entreNodosPreviosSeleccionado) {\n            opacity = 0.7;\n            if(esEnlaceInaccesible){\n              opacity=0.2;\n            }\n          }\n        }\n\n        v.estilo = {\n          transform: \"rotate(\" + angulo + \"rad)\",\n          top: Math.round((paralelas.y - 1) * this.factorZoom) + \"px\",\n          left: Math.round(paralelas.x * this.factorZoom) + \"px\",\n          width: Math.round(modulo * this.factorZoom) + \"px\",\n          backgroundColor,\n          opacity,\n          borderLeftColor: backgroundColor,\n        };\n      });\n\n      return vGrises;\n    },\n\n    estiloFuerzaColision() {\n      // var paralelas={\n      //   x: this.esteNodo.fuerzaColision.fuerza*Math.cos(this.esteNodo.fuerzaColision.direccion),\n      //   y: this.esteNodo.fuerzaColision.fuerza*Math.sin(this.esteNodo.fuerzaColision.direccion),\n      // }\n      return {\n        transform: \"rotate(\" + this.esteNodo.fuerzaColision.direccion + \"rad)\",\n        // top: Math.round((paralelas.y - 1) * this.factorZoom) + \"px\",\n        // left: Math.round(paralelas.x * this.factorZoom) + \"px\",\n        top: \"0px\",\n        left: \"0px\",\n        width:\n          Math.ceil(\n            this.esteNodo.fuerzaColision.fuerza *\n              this.factorFuerza *\n              this.factorZoom\n          ) + \"px\",\n      };\n    },\n    estiloFuerzaCentroMasa() {\n      // var paralelas={\n      //   x: this.esteNodo.fuerzaCentroMasa.fuerza*Math.cos(this.esteNodo.fuerzaCentroMasa.direccion),\n      //   y: this.esteNodo.fuerzaCentroMasa.fuerza*Math.sin(this.esteNodo.fuerzaCentroMasa.direccion),\n      // }\n      return {\n        transform:\n          \"rotate(\" + this.esteNodo.fuerzaCentroMasa.direccion + \"rad)\",\n        // top: Math.round((paralelas.y - 1) * this.factorZoom) + \"px\",\n        // left: Math.round(paralelas.x * this.factorZoom) + \"px\",\n        top: \"0px\",\n        left: \"0px\",\n        width:\n          Math.round(\n            this.esteNodo.fuerzaCentroMasa.fuerza *\n              this.factorFuerza *\n              this.factorZoom\n          ) + \"px\",\n      };\n    },\n\n    altoVinculos() {\n      return {\n        height: Math.ceil(1 * this.factorZoom) + \"px\",\n      };\n    },\n    sizeFlecha() {\n      return {\n        borderWidth: Math.round(7 * this.factorZoom) + \"px\",\n      };\n    },\n\n    posNodo() {\n      return this.esteNodo.coords;\n    },\n\n    seleccionado() {\n      if (!this.nodoSeleccionado) {\n        return false;\n      }\n      return this.nodoSeleccionado.id === this.esteNodo.id;\n    },\n    desplegado() {\n      if (\n        !this.usuario ||\n        !this.usuario.id ||\n        !this.yo ||\n        !this.yo.atlasSolidaridad ||\n        !this.yo.atlasSolidaridad.idsNodosDesplegados\n      )\n        return false;\n\n      return this.yo.atlasSolidaridad.idsNodosDesplegados.includes(\n        this.esteNodo.id\n      );\n    },\n    nodoRender() {\n      if (this.usuario && this.esteNodo.id === this.usuario.id) return true;\n      return this.idsTodosNodosRender.includes(this.esteNodo.id);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.enlacesNodoConocimiento {\n  position: relative;\n  width: 1px;\n  overflow: visible;\n}\n\n.enlaces {\n  position: absolute;\n  pointer-events: none;\n}\n.vinculo {\n  position: absolute;\n  transform-origin: 0% 0%;\n  /* transition: left 3s, top 3s; */\n}\n.fuerza {\n  position: absolute;\n  transform-origin: 0% 0%;\n  height: 3px;\n}\n#fuerzaColision {\n  background-color: red;\n}\n#fuerzaCentroMasa {\n  background-color: yellow;\n}\n.flechaVinculo {\n  width: 1px;\n  height: 1px;\n  border-style: solid;\n  border-color: transparent;\n  border-left-color: inherit;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.vinculoGris {\n  background-color: black;\n}\n.fade-enter-active {\n  animation: fade 0.5s;\n}\n.fade-leave-active {\n  animation: fade 0.5s reverse;\n}\n\n@keyframes fade {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n</style>"]}]}