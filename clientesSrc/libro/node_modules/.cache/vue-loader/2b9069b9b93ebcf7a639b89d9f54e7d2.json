{"remainingRequest":"/home/juan/webPj/pepepe/libro/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/juan/webPj/pepepe/libro/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/juan/webPj/pepepe/libro/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/juan/webPj/pepepe/libro/src/components/LibrosPublicos.vue?vue&type=template&id=3917e98e&scoped=true&","dependencies":[{"path":"/home/juan/webPj/pepepe/libro/src/components/LibrosPublicos.vue","mtime":1621177679639},{"path":"/home/juan/webPj/pepepe/libro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/juan/webPj/pepepe/libro/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/juan/webPj/pepepe/libro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/juan/webPj/pepepe/libro/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAibGlicm9zUHVibGljb3MiIH0gfSwgWwogICAgX2MoCiAgICAgICJoNCIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInRpdHVsb1pvbmEiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7IGN1cnNvcjogInBvaW50ZXIiIH0sCiAgICAgICAgb246IHsKICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgX3ZtLmRlc3BsZWdhZG8gPSAhX3ZtLmRlc3BsZWdhZG8KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0cmlhbmd1bG9CdWxsZXQiLAogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgdHJhbnNmb3JtOiBfdm0uZGVzcGxlZ2FkbyA/ICJyb3RhdGVaKDkwZGVnKSIgOiAicm90YXRlWigwZGVnKSIKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBMaWJyb3MgcHVibGljb3MgIikKICAgICAgXQogICAgKSwKICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiY29udHJvbGVzTGlicm9zUHVibGljb3MiIH0gfSksCiAgICBfYygiaW1nIiwgewogICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgewogICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICB2YWx1ZTogX3ZtLmRlc3BsZWdhZG8gJiYgX3ZtLiRhcG9sbG8ucXVlcmllcy5saWJyb3NQdWJsaWNvcy5sb2FkaW5nLAogICAgICAgICAgZXhwcmVzc2lvbjogImRlc3BsZWdhZG8gJiYgJGFwb2xsby5xdWVyaWVzLmxpYnJvc1B1YmxpY29zLmxvYWRpbmciCiAgICAgICAgfQogICAgICBdLAogICAgICBzdGF0aWNDbGFzczogInNpbWJvbG9Mb2FkaW5nIiwKICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyMHB4IiwgbWFyZ2luOiAiMTBweCBhdXRvIiwgZGlzcGxheTogImJsb2NrIiB9LAogICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9sb2FkaW5nLnBuZyIpLCBhbHQ6ICJDYXJnYW5kbyIgfQogICAgfSksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgIHZhbHVlOiBfdm0uZGVzcGxlZ2FkbywKICAgICAgICAgICAgZXhwcmVzc2lvbjogImRlc3BsZWdhZG8iCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBhdHRyczogeyBpZDogImxpc3RhTGlicm9zUHVibGljb3MiIH0KICAgICAgfSwKICAgICAgX3ZtLl9sKF92bS5saWJyb3NQb3JBdXRvciwgZnVuY3Rpb24obGlzdGFMaWJyb3MsIGlkQXV0b3IpIHsKICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsga2V5OiBpZEF1dG9yLCBzdGF0aWNDbGFzczogImJsb3F1ZUF1dG9yIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaWNvbm8tcGVyc29uYS1hdXRvbm9tbyIsIHsgYXR0cnM6IHsgaWRQZXJzb25hOiBpZEF1dG9yIH0gfSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsaXN0YUxpYnJvcyIgfSwKICAgICAgICAgICAgICBfdm0uX2wobGlzdGFMaWJyb3MsIGZ1bmN0aW9uKHBvcnRhZGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IHBvcnRhZGEuaWQsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3J0YWRhTGlicm8iLAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzZWxlY2Npb25hZG86IF92bS5pZExpYnJvU2VsZWNjaW9uYWRvID09IHBvcnRhZGEuaWQKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2VsZWNjaW9uYXJMaWJybyhwb3J0YWRhLmlkKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm9tYnJlTGlicm8iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MocG9ydGFkYS50aXR1bG8pICsgIiAiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udHJvbGVzTGlicm8iLAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udXN1YXJpb1N1cGVyYWRtaW5pc3RyYWRvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInVzdWFyaW9TdXBlcmFkbWluaXN0cmFkb3IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRyb2xMaWJybyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaWNvbm9zL2RlbGV0ZS5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkVsaW1pbmFyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiRWxpbWluYXIgZXN0ZSBsaWJybyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmVsaW1pbmFyTGlicm8ocG9ydGFkYS5pZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogX3ZtLlVSTExpYnJvc29sbyArICI/aWQ9IiArIHBvcnRhZGEuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udHJvbExpYnJvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ljb25vcy9saWJyb0FiaWVydG8ucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiTGlicm8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiVmVyIGxpYnJvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIH0pLAogICAgICAwCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}